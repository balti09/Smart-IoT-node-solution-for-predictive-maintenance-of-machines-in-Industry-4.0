
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dba0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c1e4  0800dd40  0800dd40  0001dd40  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f24  08019f24  00030a48  2**0
                  CONTENTS
  4 .ARM          00000008  08019f24  08019f24  00029f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f2c  08019f2c  00030a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f2c  08019f2c  00029f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f30  08019f30  00029f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a48  20000000  08019f34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001094  20000a48  0801a97c  00030a48  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001adc  0801a97c  00031adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a48  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cbf4  00000000  00000000  00030a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004392  00000000  00000000  0005d66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023b8  00000000  00000000  00061a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f0  00000000  00000000  00063db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b94b  00000000  00000000  00065fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a85  00000000  00000000  000918f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108b50  00000000  00000000  000b4378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cb  00000000  00000000  001bcec8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000abb0  00000000  00000000  001bcf94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000b4  00000000  00000000  001c7b44  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000183  00000000  00000000  001c7bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a48 	.word	0x20000a48
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd18 	.word	0x0800dd18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a4c 	.word	0x20000a4c
 80001cc:	0800dd18 	.word	0x0800dd18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eae:	b08b      	sub	sp, #44	; 0x2c
 8000eb0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb2:	f002 fba0 	bl	80035f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb6:	f000 f89d 	bl	8000ff4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eba:	f000 fa49 	bl	8001350 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000ebe:	f000 f91d 	bl	80010fc <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 8000ec2:	f000 f953 	bl	800116c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000ec6:	f000 f977 	bl	80011b8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000eca:	f000 f9b3 	bl	8001234 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000ece:	f000 f9e1 	bl	8001294 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ed2:	f000 fa0f 	bl	80012f4 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 8000ed6:	f000 f8ef 	bl	80010b8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
   dataRdyIntReceived = 0;
 8000eda:	4b3d      	ldr	r3, [pc, #244]	; (8000fd0 <main+0x124>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
   MEMS_Init();
 8000ee0:	f000 fbe8 	bl	80016b4 <MEMS_Init>
   AI_Init();
 8000ee4:	f000 fc5c 	bl	80017a0 <AI_Init>
   BSP_TSENSOR_Init();
 8000ee8:	f001 fb0c 	bl	8002504 <BSP_TSENSOR_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   uint32_t write_index = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
   temp_value = 18;
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <main+0x128>)
 8000ef2:	4a39      	ldr	r2, [pc, #228]	; (8000fd8 <main+0x12c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */
	  if (dataRdyIntReceived != 0) {
 8000ef6:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <main+0x124>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d0fb      	beq.n	8000ef6 <main+0x4a>
	        dataRdyIntReceived = 0;
 8000efe:	4b34      	ldr	r3, [pc, #208]	; (8000fd0 <main+0x124>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
	        LSM6DSL_Axes_t acc_axes;
	        LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8000f04:	463b      	mov	r3, r7
 8000f06:	4619      	mov	r1, r3
 8000f08:	4834      	ldr	r0, [pc, #208]	; (8000fdc <main+0x130>)
 8000f0a:	f001 fd83 	bl	8002a14 <LSM6DSL_ACC_GetAxes>
	        // printf("% 5d, % 5d, % 5d\r\n",  (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);

	        /* Normalize data to [-1; 1] and accumulate into input buffer */
	        /* Note: window overlapping can be managed here */
	        aiInData[write_index + 0] = (float) acc_axes.x / 4000.0f;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	ee07 3a90 	vmov	s15, r3
 8000f14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f18:	eddf 6a31 	vldr	s13, [pc, #196]	; 8000fe0 <main+0x134>
 8000f1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f20:	4a30      	ldr	r2, [pc, #192]	; (8000fe4 <main+0x138>)
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	edc3 7a00 	vstr	s15, [r3]
	        aiInData[write_index + 1] = (float) acc_axes.y / 4000.0f;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	eddf 6a29 	vldr	s13, [pc, #164]	; 8000fe0 <main+0x134>
 8000f3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f42:	4a28      	ldr	r2, [pc, #160]	; (8000fe4 <main+0x138>)
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	edc3 7a00 	vstr	s15, [r3]
	        aiInData[write_index + 2] = (float) acc_axes.z / 4000.0f;
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3302      	adds	r3, #2
 8000f5a:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000fe0 <main+0x134>
 8000f5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f62:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <main+0x138>)
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	edc3 7a00 	vstr	s15, [r3]
	        write_index += 3;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3303      	adds	r3, #3
 8000f70:	617b      	str	r3, [r7, #20]

	        if (write_index == AI_NETWORK_IN_1_SIZE) {
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2b4e      	cmp	r3, #78	; 0x4e
 8000f76:	d1be      	bne.n	8000ef6 <main+0x4a>
	          write_index = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

	          //printf("Running inference\r\n");
	          AI_Run(aiInData, aiOutData);
 8000f7c:	491a      	ldr	r1, [pc, #104]	; (8000fe8 <main+0x13c>)
 8000f7e:	4819      	ldr	r0, [pc, #100]	; (8000fe4 <main+0x138>)
 8000f80:	f000 fc4a 	bl	8001818 <AI_Run>

	          /* Output results */
	          for (uint32_t i = 0; i < AI_NETWORK_OUT_1_SIZE; i++) {
 8000f84:	2300      	movs	r3, #0
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	e002      	b.n	8000f90 <main+0xe4>
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d9f9      	bls.n	8000f8a <main+0xde>
	           // printf("%8.6f ", aiOutData[i]);
	          }
	          uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 8000f96:	2103      	movs	r1, #3
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <main+0x13c>)
 8000f9a:	f000 fc75 	bl	8001888 <argmax>
 8000f9e:	60f8      	str	r0, [r7, #12]
	          printf(" ,%d,%d,%d,%d,%d, %s \r\n", (int) class,(int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z ,(int) temp_value,activities[class]);
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	6838      	ldr	r0, [r7, #0]
 8000fa4:	687c      	ldr	r4, [r7, #4]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <main+0x128>)
 8000faa:	edd2 7a00 	vldr	s15, [r2]
 8000fae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fb2:	ee17 6a90 	vmov	r6, s15
 8000fb6:	4d0d      	ldr	r5, [pc, #52]	; (8000fec <main+0x140>)
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8000fbe:	9202      	str	r2, [sp, #8]
 8000fc0:	9601      	str	r6, [sp, #4]
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	4623      	mov	r3, r4
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <main+0x144>)
 8000fca:	f00a fd69 	bl	800baa0 <iprintf>
	  if (dataRdyIntReceived != 0) {
 8000fce:	e792      	b.n	8000ef6 <main+0x4a>
 8000fd0:	200011ac 	.word	0x200011ac
 8000fd4:	20001940 	.word	0x20001940
 8000fd8:	41900000 	.word	0x41900000
 8000fdc:	2000117c 	.word	0x2000117c
 8000fe0:	457a0000 	.word	0x457a0000
 8000fe4:	200011b4 	.word	0x200011b4
 8000fe8:	200012ec 	.word	0x200012ec
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	0800dd58 	.word	0x0800dd58

08000ff4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b096      	sub	sp, #88	; 0x58
 8000ff8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2244      	movs	r2, #68	; 0x44
 8001000:	2100      	movs	r1, #0
 8001002:	4618      	mov	r0, r3
 8001004:	f009 fffa 	bl	800affc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001008:	463b      	mov	r3, r7
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001016:	f44f 7000 	mov.w	r0, #512	; 0x200
 800101a:	f004 f933 	bl	8005284 <HAL_PWREx_ControlVoltageScaling>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001024:	f000 fc60 	bl	80018e8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001028:	f004 f90e 	bl	8005248 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <SystemClock_Config+0xc0>)
 800102e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001032:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <SystemClock_Config+0xc0>)
 8001034:	f023 0318 	bic.w	r3, r3, #24
 8001038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800103c:	2314      	movs	r3, #20
 800103e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001040:	2301      	movs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800104c:	2360      	movs	r3, #96	; 0x60
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001050:	2302      	movs	r3, #2
 8001052:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001054:	2301      	movs	r3, #1
 8001056:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800105c:	2328      	movs	r3, #40	; 0x28
 800105e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001060:	2307      	movs	r3, #7
 8001062:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001064:	2302      	movs	r3, #2
 8001066:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4618      	mov	r0, r3
 8001072:	f004 fa29 	bl	80054c8 <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800107c:	f000 fc34 	bl	80018e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001080:	230f      	movs	r3, #15
 8001082:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001084:	2303      	movs	r3, #3
 8001086:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	2104      	movs	r1, #4
 8001098:	4618      	mov	r0, r3
 800109a:	f004 fdf1 	bl	8005c80 <HAL_RCC_ClockConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010a4:	f000 fc20 	bl	80018e8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010a8:	f005 faf8 	bl	800669c <HAL_RCCEx_EnableMSIPLLMode>
}
 80010ac:	bf00      	nop
 80010ae:	3758      	adds	r7, #88	; 0x58
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40021000 	.word	0x40021000

080010b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010bc:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <MX_CRC_Init+0x3c>)
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <MX_CRC_Init+0x40>)
 80010c0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_CRC_Init+0x3c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <MX_CRC_Init+0x3c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80010ce:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_CRC_Init+0x3c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <MX_CRC_Init+0x3c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_CRC_Init+0x3c>)
 80010dc:	2201      	movs	r2, #1
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	; (80010f4 <MX_CRC_Init+0x3c>)
 80010e2:	f002 fc33 	bl	800394c <HAL_CRC_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80010ec:	f000 fbfc 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000a64 	.word	0x20000a64
 80010f8:	40023000 	.word	0x40023000

080010fc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_DFSDM1_Init+0x68>)
 8001102:	4a19      	ldr	r2, [pc, #100]	; (8001168 <MX_DFSDM1_Init+0x6c>)
 8001104:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_DFSDM1_Init+0x68>)
 8001108:	2201      	movs	r2, #1
 800110a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_DFSDM1_Init+0x68>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001112:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_DFSDM1_Init+0x68>)
 8001114:	2202      	movs	r2, #2
 8001116:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_DFSDM1_Init+0x68>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800111e:	4b11      	ldr	r3, [pc, #68]	; (8001164 <MX_DFSDM1_Init+0x68>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_DFSDM1_Init+0x68>)
 8001126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800112a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <MX_DFSDM1_Init+0x68>)
 800112e:	2200      	movs	r2, #0
 8001130:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_DFSDM1_Init+0x68>)
 8001134:	2204      	movs	r2, #4
 8001136:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <MX_DFSDM1_Init+0x68>)
 800113a:	2200      	movs	r2, #0
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_DFSDM1_Init+0x68>)
 8001140:	2201      	movs	r2, #1
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <MX_DFSDM1_Init+0x68>)
 8001146:	2200      	movs	r2, #0
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <MX_DFSDM1_Init+0x68>)
 800114c:	2200      	movs	r2, #0
 800114e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <MX_DFSDM1_Init+0x68>)
 8001152:	f002 fce5 	bl	8003b20 <HAL_DFSDM_ChannelInit>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800115c:	f000 fbc4 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000a88 	.word	0x20000a88
 8001168:	40016020 	.word	0x40016020

0800116c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <MX_QUADSPI_Init+0x48>)
 8001174:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 8001178:	2202      	movs	r2, #2
 800117a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 800117e:	2204      	movs	r2, #4
 8001180:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 8001184:	2210      	movs	r2, #16
 8001186:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 800118a:	2217      	movs	r2, #23
 800118c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_QUADSPI_Init+0x44>)
 800119c:	f004 f8d8 	bl	8005350 <HAL_QSPI_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80011a6:	f000 fb9f 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000ac0 	.word	0x20000ac0
 80011b4:	a0001000 	.word	0xa0001000

080011b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_SPI3_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <MX_SPI3_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_SPI3_Init+0x74>)
 80011c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_SPI3_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_SPI3_Init+0x74>)
 80011d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_SPI3_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_SPI3_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_SPI3_Init+0x74>)
 80011e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_SPI3_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_SPI3_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_SPI3_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_SPI3_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_SPI3_Init+0x74>)
 8001206:	2207      	movs	r2, #7
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <MX_SPI3_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_SPI3_Init+0x74>)
 8001212:	2208      	movs	r2, #8
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_SPI3_Init+0x74>)
 8001218:	f005 fc22 	bl	8006a60 <HAL_SPI_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 fb61 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000b04 	.word	0x20000b04
 8001230:	40003c00 	.word	0x40003c00

08001234 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_USART1_UART_Init+0x58>)
 800123a:	4a15      	ldr	r2, [pc, #84]	; (8001290 <MX_USART1_UART_Init+0x5c>)
 800123c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800123e:	4b13      	ldr	r3, [pc, #76]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_USART1_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_USART1_UART_Init+0x58>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <MX_USART1_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_USART1_UART_Init+0x58>)
 8001278:	f005 fc95 	bl	8006ba6 <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001282:	f000 fb31 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000b68 	.word	0x20000b68
 8001290:	40013800 	.word	0x40013800

08001294 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <MX_USART3_UART_Init+0x58>)
 800129a:	4a15      	ldr	r2, [pc, #84]	; (80012f0 <MX_USART3_UART_Init+0x5c>)
 800129c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART3_UART_Init+0x58>)
 80012d8:	f005 fc65 	bl	8006ba6 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012e2:	f000 fb01 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000bec 	.word	0x20000bec
 80012f0:	40004800 	.word	0x40004800

080012f4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001302:	2206      	movs	r2, #6
 8001304:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001308:	2202      	movs	r2, #2
 800130a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130e:	2202      	movs	r2, #2
 8001310:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132c:	2200      	movs	r2, #0
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001332:	2200      	movs	r2, #0
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001338:	f003 fe3d 	bl	8004fb6 <HAL_PCD_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001342:	f000 fad1 	bl	80018e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000c70 	.word	0x20000c70

08001350 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001366:	4bbd      	ldr	r3, [pc, #756]	; (800165c <MX_GPIO_Init+0x30c>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	4abc      	ldr	r2, [pc, #752]	; (800165c <MX_GPIO_Init+0x30c>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001372:	4bba      	ldr	r3, [pc, #744]	; (800165c <MX_GPIO_Init+0x30c>)
 8001374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137e:	4bb7      	ldr	r3, [pc, #732]	; (800165c <MX_GPIO_Init+0x30c>)
 8001380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001382:	4ab6      	ldr	r2, [pc, #728]	; (800165c <MX_GPIO_Init+0x30c>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138a:	4bb4      	ldr	r3, [pc, #720]	; (800165c <MX_GPIO_Init+0x30c>)
 800138c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4bb1      	ldr	r3, [pc, #708]	; (800165c <MX_GPIO_Init+0x30c>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4ab0      	ldr	r2, [pc, #704]	; (800165c <MX_GPIO_Init+0x30c>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4bae      	ldr	r3, [pc, #696]	; (800165c <MX_GPIO_Init+0x30c>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4bab      	ldr	r3, [pc, #684]	; (800165c <MX_GPIO_Init+0x30c>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4aaa      	ldr	r2, [pc, #680]	; (800165c <MX_GPIO_Init+0x30c>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4ba8      	ldr	r3, [pc, #672]	; (800165c <MX_GPIO_Init+0x30c>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	4ba5      	ldr	r3, [pc, #660]	; (800165c <MX_GPIO_Init+0x30c>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4aa4      	ldr	r2, [pc, #656]	; (800165c <MX_GPIO_Init+0x30c>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4ba2      	ldr	r3, [pc, #648]	; (800165c <MX_GPIO_Init+0x30c>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 718a 	mov.w	r1, #276	; 0x114
 80013e4:	489e      	ldr	r0, [pc, #632]	; (8001660 <MX_GPIO_Init+0x310>)
 80013e6:	f002 ff45 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f248 1104 	movw	r1, #33028	; 0x8104
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f002 ff3e 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80013f8:	2200      	movs	r2, #0
 80013fa:	f24f 0114 	movw	r1, #61460	; 0xf014
 80013fe:	4899      	ldr	r0, [pc, #612]	; (8001664 <MX_GPIO_Init+0x314>)
 8001400:	f002 ff38 	bl	8004274 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f241 0181 	movw	r1, #4225	; 0x1081
 800140a:	4897      	ldr	r0, [pc, #604]	; (8001668 <MX_GPIO_Init+0x318>)
 800140c:	f002 ff32 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001416:	4894      	ldr	r0, [pc, #592]	; (8001668 <MX_GPIO_Init+0x318>)
 8001418:	f002 ff2c 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001422:	4892      	ldr	r0, [pc, #584]	; (800166c <MX_GPIO_Init+0x31c>)
 8001424:	f002 ff26 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2120      	movs	r1, #32
 800142c:	488d      	ldr	r0, [pc, #564]	; (8001664 <MX_GPIO_Init+0x314>)
 800142e:	f002 ff21 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2101      	movs	r1, #1
 8001436:	488a      	ldr	r0, [pc, #552]	; (8001660 <MX_GPIO_Init+0x310>)
 8001438:	f002 ff1c 	bl	8004274 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800143c:	f240 1315 	movw	r3, #277	; 0x115
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4882      	ldr	r0, [pc, #520]	; (8001660 <MX_GPIO_Init+0x310>)
 8001456:	f002 fc6f 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800145a:	236a      	movs	r3, #106	; 0x6a
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800145e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	487c      	ldr	r0, [pc, #496]	; (8001660 <MX_GPIO_Init+0x310>)
 8001470:	f002 fc62 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4878      	ldr	r0, [pc, #480]	; (800166c <MX_GPIO_Init+0x31c>)
 800148c:	f002 fc54 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001490:	233f      	movs	r3, #63	; 0x3f
 8001492:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001494:	230b      	movs	r3, #11
 8001496:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4872      	ldr	r0, [pc, #456]	; (800166c <MX_GPIO_Init+0x31c>)
 80014a4:	f002 fc48 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80014a8:	2303      	movs	r3, #3
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014b8:	2308      	movs	r3, #8
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c6:	f002 fc37 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80014ca:	f248 1304 	movw	r3, #33028	; 0x8104
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f002 fc27 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80014ea:	2308      	movs	r3, #8
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014fa:	2301      	movs	r3, #1
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001508:	f002 fc16 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800150c:	2310      	movs	r3, #16
 800150e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001510:	230b      	movs	r3, #11
 8001512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f002 fc09 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001526:	23e0      	movs	r3, #224	; 0xe0
 8001528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001536:	2305      	movs	r3, #5
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f002 fbf8 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001548:	2301      	movs	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800154c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4841      	ldr	r0, [pc, #260]	; (8001664 <MX_GPIO_Init+0x314>)
 800155e:	f002 fbeb 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001562:	2302      	movs	r3, #2
 8001564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001566:	230b      	movs	r3, #11
 8001568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	483b      	ldr	r0, [pc, #236]	; (8001664 <MX_GPIO_Init+0x314>)
 8001576:	f002 fbdf 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800157a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800157e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4834      	ldr	r0, [pc, #208]	; (8001664 <MX_GPIO_Init+0x314>)
 8001594:	f002 fbd0 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001598:	f64c 4304 	movw	r3, #52228	; 0xcc04
 800159c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800159e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	482e      	ldr	r0, [pc, #184]	; (8001668 <MX_GPIO_Init+0x318>)
 80015b0:	f002 fbc2 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80015b4:	f243 0381 	movw	r3, #12417	; 0x3081
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	4826      	ldr	r0, [pc, #152]	; (8001668 <MX_GPIO_Init+0x318>)
 80015ce:	f002 fbb3 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80015d2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d8:	2301      	movs	r3, #1
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4619      	mov	r1, r3
 80015ea:	4820      	ldr	r0, [pc, #128]	; (800166c <MX_GPIO_Init+0x31c>)
 80015ec:	f002 fba4 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80015f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80015f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	4819      	ldr	r0, [pc, #100]	; (800166c <MX_GPIO_Init+0x31c>)
 8001608:	f002 fb96 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800160c:	2302      	movs	r3, #2
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800161c:	2305      	movs	r3, #5
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4810      	ldr	r0, [pc, #64]	; (8001668 <MX_GPIO_Init+0x318>)
 8001628:	f002 fb86 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800162c:	2378      	movs	r3, #120	; 0x78
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001638:	2303      	movs	r3, #3
 800163a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800163c:	2307      	movs	r3, #7
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4808      	ldr	r0, [pc, #32]	; (8001668 <MX_GPIO_Init+0x318>)
 8001648:	f002 fb76 	bl	8003d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800164c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001652:	2312      	movs	r3, #18
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	e00a      	b.n	8001670 <MX_GPIO_Init+0x320>
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000
 8001660:	48001000 	.word	0x48001000
 8001664:	48000400 	.word	0x48000400
 8001668:	48000c00 	.word	0x48000c00
 800166c:	48000800 	.word	0x48000800
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001676:	2304      	movs	r3, #4
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480b      	ldr	r0, [pc, #44]	; (80016b0 <MX_GPIO_Init+0x360>)
 8001682:	f002 fb59 	bl	8003d38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2017      	movs	r0, #23
 800168c:	f002 f927 	bl	80038de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001690:	2017      	movs	r0, #23
 8001692:	f002 f940 	bl	8003916 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001696:	2200      	movs	r2, #0
 8001698:	2100      	movs	r1, #0
 800169a:	2028      	movs	r0, #40	; 0x28
 800169c:	f002 f91f 	bl	80038de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016a0:	2028      	movs	r0, #40	; 0x28
 80016a2:	f002 f938 	bl	8003916 <HAL_NVIC_EnableIRQ>

}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	48000400 	.word	0x48000400

080016b4 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08a      	sub	sp, #40	; 0x28
 80016b8:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 80016be:	23d5      	movs	r3, #213	; 0xd5
 80016c0:	763b      	strb	r3, [r7, #24]
  io_ctx.Init        = BSP_I2C2_Init;
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MEMS_Init+0x7c>)
 80016c4:	60fb      	str	r3, [r7, #12]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 80016c6:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <MEMS_Init+0x80>)
 80016c8:	613b      	str	r3, [r7, #16]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 80016ca:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MEMS_Init+0x84>)
 80016cc:	623b      	str	r3, [r7, #32]
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 80016ce:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MEMS_Init+0x88>)
 80016d0:	61fb      	str	r3, [r7, #28]
  io_ctx.GetTick     = BSP_GetTick;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <MEMS_Init+0x8c>)
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	4619      	mov	r1, r3
 80016dc:	4819      	ldr	r0, [pc, #100]	; (8001744 <MEMS_Init+0x90>)
 80016de:	f000 ffe1 	bl	80026a4 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 80016e2:	f107 030b 	add.w	r3, r7, #11
 80016e6:	4619      	mov	r1, r3
 80016e8:	4816      	ldr	r0, [pc, #88]	; (8001744 <MEMS_Init+0x90>)
 80016ea:	f001 f8aa 	bl	8002842 <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 80016ee:	7afb      	ldrb	r3, [r7, #11]
 80016f0:	2b6a      	cmp	r3, #106	; 0x6a
 80016f2:	d001      	beq.n	80016f8 <MEMS_Init+0x44>
    Error_Handler();
 80016f4:	f000 f8f8 	bl	80018e8 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 80016f8:	4812      	ldr	r0, [pc, #72]	; (8001744 <MEMS_Init+0x90>)
 80016fa:	f001 f839 	bl	8002770 <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 80016fe:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 8001702:	4810      	ldr	r0, [pc, #64]	; (8001744 <MEMS_Init+0x90>)
 8001704:	f001 f91e 	bl	8002944 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 8001708:	2104      	movs	r1, #4
 800170a:	480e      	ldr	r0, [pc, #56]	; (8001744 <MEMS_Init+0x90>)
 800170c:	f001 f936 	bl	800297c <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 8001710:	2101      	movs	r1, #1
 8001712:	480c      	ldr	r0, [pc, #48]	; (8001744 <MEMS_Init+0x90>)
 8001714:	f001 f9f0 	bl	8002af8 <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4619      	mov	r1, r3
 800171c:	4809      	ldr	r0, [pc, #36]	; (8001744 <MEMS_Init+0x90>)
 800171e:	f001 f955 	bl	80029cc <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 8001722:	4808      	ldr	r0, [pc, #32]	; (8001744 <MEMS_Init+0x90>)
 8001724:	f001 f8a3 	bl	800286e <LSM6DSL_ACC_Enable>
}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	08001f75 	.word	0x08001f75
 8001734:	08001ff1 	.word	0x08001ff1
 8001738:	080020a5 	.word	0x080020a5
 800173c:	08002041 	.word	0x08002041
 8001740:	08002109 	.word	0x08002109
 8001744:	2000117c 	.word	0x2000117c

08001748 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8001752:	88fb      	ldrh	r3, [r7, #6]
 8001754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001758:	d104      	bne.n	8001764 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_GPIO_EXTI_Callback+0x28>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	3301      	adds	r3, #1
 8001760:	4a03      	ldr	r2, [pc, #12]	; (8001770 <HAL_GPIO_EXTI_Callback+0x28>)
 8001762:	6013      	str	r3, [r2, #0]
  }
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	200011ac 	.word	0x200011ac

08001774 <_write>:
int _write(int fd, char * ptr, int len)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	b29a      	uxth	r2, r3
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	4804      	ldr	r0, [pc, #16]	; (800179c <_write+0x28>)
 800178c:	f005 fa59 	bl	8006c42 <HAL_UART_Transmit>
  return len;
 8001790:	687b      	ldr	r3, [r7, #4]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000b68 	.word	0x20000b68

080017a0 <AI_Init>:
static void AI_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <AI_Init+0x64>)
 80017a8:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80017aa:	463b      	mov	r3, r7
 80017ac:	2200      	movs	r2, #0
 80017ae:	4619      	mov	r1, r3
 80017b0:	4815      	ldr	r0, [pc, #84]	; (8001808 <AI_Init+0x68>)
 80017b2:	f006 fb19 	bl	8007de8 <ai_network_create_and_init>
 80017b6:	4603      	mov	r3, r0
 80017b8:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 80017ba:	793b      	ldrb	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00a      	beq.n	80017d6 <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 80017c0:	793b      	ldrb	r3, [r7, #4]
 80017c2:	4619      	mov	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80017ca:	461a      	mov	r2, r3
 80017cc:	480f      	ldr	r0, [pc, #60]	; (800180c <AI_Init+0x6c>)
 80017ce:	f00a f967 	bl	800baa0 <iprintf>
    Error_Handler();
 80017d2:	f000 f889 	bl	80018e8 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <AI_Init+0x68>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2100      	movs	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f006 fb77 	bl	8007ed0 <ai_network_inputs_get>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <AI_Init+0x70>)
 80017e6:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <AI_Init+0x68>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f006 fb88 	bl	8007f04 <ai_network_outputs_get>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4a07      	ldr	r2, [pc, #28]	; (8001814 <AI_Init+0x74>)
 80017f8:	6013      	str	r3, [r2, #0]
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200012f8 	.word	0x200012f8
 8001808:	200011b0 	.word	0x200011b0
 800180c:	0800dd70 	.word	0x0800dd70
 8001810:	20001938 	.word	0x20001938
 8001814:	2000193c 	.word	0x2000193c

08001818 <AI_Run>:
static void AI_Run(float *pIn, float *pOut)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <AI_Run+0x60>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <AI_Run+0x64>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <AI_Run+0x68>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <AI_Run+0x60>)
 8001838:	6811      	ldr	r1, [r2, #0]
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <AI_Run+0x64>)
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f006 fbb6 	bl	8007fb0 <ai_network_run>
 8001844:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d011      	beq.n	8001870 <AI_Run+0x58>
    err = ai_network_get_error(network);
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <AI_Run+0x68>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f006 faa7 	bl	8007da4 <ai_network_get_error>
 8001856:	4603      	mov	r3, r0
 8001858:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 800185a:	7a3b      	ldrb	r3, [r7, #8]
 800185c:	4619      	mov	r1, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001864:	461a      	mov	r2, r3
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <AI_Run+0x6c>)
 8001868:	f00a f91a 	bl	800baa0 <iprintf>
    Error_Handler();
 800186c:	f000 f83c 	bl	80018e8 <Error_Handler>
  }
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20001938 	.word	0x20001938
 800187c:	2000193c 	.word	0x2000193c
 8001880:	200011b0 	.word	0x200011b0
 8001884:	0800dd9c 	.word	0x0800dd9c

08001888 <argmax>:
static uint32_t argmax(const float * values, uint32_t len)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 800189c:	2301      	movs	r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e017      	b.n	80018d2 <argmax+0x4a>
    if (values[i] > max_value) {
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80018b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	d507      	bpl.n	80018cc <argmax+0x44>
      max_value = values[i];
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	617b      	str	r3, [r7, #20]
      max_index = i;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3e3      	bcc.n	80018a2 <argmax+0x1a>
    }
  }
  return max_index;
 80018da:	693b      	ldr	r3, [r7, #16]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	371c      	adds	r7, #28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80018f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <Error_Handler+0x1c>)
 80018f6:	f002 fcd5 	bl	80042a4 <HAL_GPIO_TogglePin>
	      HAL_Delay(50); /* wait 50 ms */
 80018fa:	2032      	movs	r0, #50	; 0x32
 80018fc:	f001 fef0 	bl	80036e0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001900:	e7f6      	b.n	80018f0 <Error_Handler+0x8>
 8001902:	bf00      	nop
 8001904:	48000400 	.word	0x48000400

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_MspInit+0x44>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_MspInit+0x44>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6613      	str	r3, [r2, #96]	; 0x60
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_MspInit+0x44>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_MspInit+0x44>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_MspInit+0x44>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_MspInit+0x44>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_CRC_MspInit+0x38>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10b      	bne.n	800197a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_CRC_MspInit+0x3c>)
 8001964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001966:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_CRC_MspInit+0x3c>)
 8001968:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800196c:	6493      	str	r3, [r2, #72]	; 0x48
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_CRC_MspInit+0x3c>)
 8001970:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001972:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40023000 	.word	0x40023000
 800198c:	40021000 	.word	0x40021000

08001990 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b0ac      	sub	sp, #176	; 0xb0
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	2288      	movs	r2, #136	; 0x88
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f009 fb23 	bl	800affc <memset>
  if(DFSDM1_Init == 0)
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d142      	bne.n	8001a44 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80019be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4618      	mov	r0, r3
 80019d0:	f004 fb7a 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80019da:	f7ff ff85 	bl	80018e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80019de:	4b1c      	ldr	r3, [pc, #112]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ea:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f6:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019fc:	f043 0310 	orr.w	r3, r3, #16
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001a0e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001a12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001a28:	2306      	movs	r3, #6
 8001a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a32:	4619      	mov	r1, r3
 8001a34:	4807      	ldr	r0, [pc, #28]	; (8001a54 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001a36:	f002 f97f 	bl	8003d38 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	4a02      	ldr	r2, [pc, #8]	; (8001a4c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001a42:	6013      	str	r3, [r2, #0]
  }

}
 8001a44:	bf00      	nop
 8001a46:	37b0      	adds	r7, #176	; 0xb0
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20001944 	.word	0x20001944
 8001a50:	40021000 	.word	0x40021000
 8001a54:	48001000 	.word	0x48001000

08001a58 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08a      	sub	sp, #40	; 0x28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <HAL_QSPI_MspInit+0x7c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d128      	bne.n	8001acc <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_QSPI_MspInit+0x80>)
 8001a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7e:	4a16      	ldr	r2, [pc, #88]	; (8001ad8 <HAL_QSPI_MspInit+0x80>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a84:	6513      	str	r3, [r2, #80]	; 0x50
 8001a86:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <HAL_QSPI_MspInit+0x80>)
 8001a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <HAL_QSPI_MspInit+0x80>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_QSPI_MspInit+0x80>)
 8001a98:	f043 0310 	orr.w	r3, r3, #16
 8001a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <HAL_QSPI_MspInit+0x80>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001aaa:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001aae:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001abc:	230a      	movs	r3, #10
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4805      	ldr	r0, [pc, #20]	; (8001adc <HAL_QSPI_MspInit+0x84>)
 8001ac8:	f002 f936 	bl	8003d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001acc:	bf00      	nop
 8001ace:	3728      	adds	r7, #40	; 0x28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	a0001000 	.word	0xa0001000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	48001000 	.word	0x48001000

08001ae0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a17      	ldr	r2, [pc, #92]	; (8001b5c <HAL_SPI_MspInit+0x7c>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d128      	bne.n	8001b54 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b02:	4b17      	ldr	r3, [pc, #92]	; (8001b60 <HAL_SPI_MspInit+0x80>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	4a16      	ldr	r2, [pc, #88]	; (8001b60 <HAL_SPI_MspInit+0x80>)
 8001b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <HAL_SPI_MspInit+0x80>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <HAL_SPI_MspInit+0x80>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a10      	ldr	r2, [pc, #64]	; (8001b60 <HAL_SPI_MspInit+0x80>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_SPI_MspInit+0x80>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001b32:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b44:	2306      	movs	r3, #6
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4805      	ldr	r0, [pc, #20]	; (8001b64 <HAL_SPI_MspInit+0x84>)
 8001b50:	f002 f8f2 	bl	8003d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40003c00 	.word	0x40003c00
 8001b60:	40021000 	.word	0x40021000
 8001b64:	48000800 	.word	0x48000800

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0ae      	sub	sp, #184	; 0xb8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b80:	f107 031c 	add.w	r3, r7, #28
 8001b84:	2288      	movs	r2, #136	; 0x88
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f009 fa37 	bl	800affc <memset>
  if(huart->Instance==USART1)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a42      	ldr	r2, [pc, #264]	; (8001c9c <HAL_UART_MspInit+0x134>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d13b      	bne.n	8001c10 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f004 fa8f 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bb0:	f7ff fe9a 	bl	80018e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bb4:	4b3a      	ldr	r3, [pc, #232]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb8:	4a39      	ldr	r2, [pc, #228]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001bba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbe:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc0:	4b37      	ldr	r3, [pc, #220]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd0:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd8:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	617b      	str	r3, [r7, #20]
 8001be2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001be4:	23c0      	movs	r3, #192	; 0xc0
 8001be6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bfc:	2307      	movs	r3, #7
 8001bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4826      	ldr	r0, [pc, #152]	; (8001ca4 <HAL_UART_MspInit+0x13c>)
 8001c0a:	f002 f895 	bl	8003d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c0e:	e040      	b.n	8001c92 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a24      	ldr	r2, [pc, #144]	; (8001ca8 <HAL_UART_MspInit+0x140>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d13b      	bne.n	8001c92 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4618      	mov	r0, r3
 8001c28:	f004 fa4e 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001c32:	f7ff fe59 	bl	80018e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c36:	4b1a      	ldr	r3, [pc, #104]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	4a19      	ldr	r2, [pc, #100]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001c3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c40:	6593      	str	r3, [r2, #88]	; 0x58
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4e:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001c54:	f043 0308 	orr.w	r3, r3, #8
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_UART_MspInit+0x138>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001c66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c80:	2307      	movs	r3, #7
 8001c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <HAL_UART_MspInit+0x144>)
 8001c8e:	f002 f853 	bl	8003d38 <HAL_GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	37b8      	adds	r7, #184	; 0xb8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	48000400 	.word	0x48000400
 8001ca8:	40004800 	.word	0x40004800
 8001cac:	48000c00 	.word	0x48000c00

08001cb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0ac      	sub	sp, #176	; 0xb0
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2288      	movs	r2, #136	; 0x88
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f009 f993 	bl	800affc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cde:	d17c      	bne.n	8001dda <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001ce6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001cf6:	2318      	movs	r3, #24
 8001cf8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d02:	2302      	movs	r3, #2
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001d06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 f9d9 	bl	80060c8 <HAL_RCCEx_PeriphCLKConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001d1c:	f7ff fde4 	bl	80018e8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d24:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d56:	f001 ffef 	bl	8003d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001d5a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d74:	230a      	movs	r3, #10
 8001d76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d84:	f001 ffd8 	bl	8003d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d88:	4b16      	ldr	r3, [pc, #88]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001d8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d114      	bne.n	8001dd6 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db0:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db6:	6593      	str	r3, [r2, #88]	; 0x58
 8001db8:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001dc4:	f003 fab4 	bl	8005330 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dcc:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <HAL_PCD_MspInit+0x134>)
 8001dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001dd4:	e001      	b.n	8001dda <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001dd6:	f003 faab 	bl	8005330 <HAL_PWREx_EnableVddUSB>
}
 8001dda:	bf00      	nop
 8001ddc:	37b0      	adds	r7, #176	; 0xb0
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <NMI_Handler+0x4>

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e34:	f001 fc34 	bl	80036a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001e40:	2020      	movs	r0, #32
 8001e42:	f002 fa49 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001e46:	2040      	movs	r0, #64	; 0x40
 8001e48:	f002 fa46 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001e4c:	2080      	movs	r0, #128	; 0x80
 8001e4e:	f002 fa43 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001e52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001e56:	f002 fa3f 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001e62:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e66:	f002 fa37 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001e6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e6e:	f002 fa33 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001e72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e76:	f002 fa2f 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001e7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e7e:	f002 fa2b 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001e82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e86:	f002 fa27 	bl	80042d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e98:	4a14      	ldr	r2, [pc, #80]	; (8001eec <_sbrk+0x5c>)
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <_sbrk+0x60>)
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eac:	4b11      	ldr	r3, [pc, #68]	; (8001ef4 <_sbrk+0x64>)
 8001eae:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <_sbrk+0x68>)
 8001eb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d207      	bcs.n	8001ed0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec0:	f009 f85c 	bl	800af7c <__errno>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	e009      	b.n	8001ee4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <_sbrk+0x64>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed6:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <_sbrk+0x64>)
 8001ee0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20018000 	.word	0x20018000
 8001ef0:	00000800 	.word	0x00000800
 8001ef4:	20001948 	.word	0x20001948
 8001ef8:	20001ae0 	.word	0x20001ae0

08001efc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <SystemInit+0x20>)
 8001f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f06:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <SystemInit+0x20>)
 8001f08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f24:	f7ff ffea 	bl	8001efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480c      	ldr	r0, [pc, #48]	; (8001f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f2a:	490d      	ldr	r1, [pc, #52]	; (8001f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <LoopForever+0xe>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f40:	4c0a      	ldr	r4, [pc, #40]	; (8001f6c <LoopForever+0x16>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f4e:	f009 f81b 	bl	800af88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f52:	f7fe ffab 	bl	8000eac <main>

08001f56 <LoopForever>:

LoopForever:
    b LoopForever
 8001f56:	e7fe      	b.n	8001f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f60:	20000a48 	.word	0x20000a48
  ldr r2, =_sidata
 8001f64:	08019f34 	.word	0x08019f34
  ldr r2, =_sbss
 8001f68:	20000a48 	.word	0x20000a48
  ldr r4, =_ebss
 8001f6c:	20001adc 	.word	0x20001adc

08001f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f70:	e7fe      	b.n	8001f70 <ADC1_2_IRQHandler>
	...

08001f74 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	; (8001fe4 <BSP_I2C2_Init+0x70>)
 8001f80:	4a19      	ldr	r2, [pc, #100]	; (8001fe8 <BSP_I2C2_Init+0x74>)
 8001f82:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <BSP_I2C2_Init+0x78>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	4918      	ldr	r1, [pc, #96]	; (8001fec <BSP_I2C2_Init+0x78>)
 8001f8c:	600a      	str	r2, [r1, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d122      	bne.n	8001fd8 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001f92:	4814      	ldr	r0, [pc, #80]	; (8001fe4 <BSP_I2C2_Init+0x70>)
 8001f94:	f002 fcb8 	bl	8004908 <HAL_I2C_GetState>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d11c      	bne.n	8001fd8 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001f9e:	4811      	ldr	r0, [pc, #68]	; (8001fe4 <BSP_I2C2_Init+0x70>)
 8001fa0:	f000 f8fe 	bl	80021a0 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8001faa:	480e      	ldr	r0, [pc, #56]	; (8001fe4 <BSP_I2C2_Init+0x70>)
 8001fac:	f000 f8b4 	bl	8002118 <MX_I2C2_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001fb6:	f06f 0307 	mvn.w	r3, #7
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	e00c      	b.n	8001fd8 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <BSP_I2C2_Init+0x70>)
 8001fc2:	f002 ff61 	bl	8004e88 <HAL_I2CEx_ConfigAnalogFilter>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001fcc:	f06f 0307 	mvn.w	r3, #7
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	e001      	b.n	8001fd8 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001fd8:	687b      	ldr	r3, [r7, #4]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000194c 	.word	0x2000194c
 8001fe8:	40005800 	.word	0x40005800
 8001fec:	200019a0 	.word	0x200019a0

08001ff0 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <BSP_I2C2_DeInit+0x48>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d014      	beq.n	800202c <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8002002:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <BSP_I2C2_DeInit+0x48>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3b01      	subs	r3, #1
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <BSP_I2C2_DeInit+0x48>)
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <BSP_I2C2_DeInit+0x48>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10b      	bne.n	800202c <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8002014:	4809      	ldr	r0, [pc, #36]	; (800203c <BSP_I2C2_DeInit+0x4c>)
 8002016:	f000 f909 	bl	800222c <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 800201a:	4808      	ldr	r0, [pc, #32]	; (800203c <BSP_I2C2_DeInit+0x4c>)
 800201c:	f002 fa03 	bl	8004426 <HAL_I2C_DeInit>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8002026:	f06f 0307 	mvn.w	r3, #7
 800202a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200019a0 	.word	0x200019a0
 800203c:	2000194c 	.word	0x2000194c

08002040 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af04      	add	r7, sp, #16
 8002046:	60ba      	str	r2, [r7, #8]
 8002048:	461a      	mov	r2, r3
 800204a:	4603      	mov	r3, r0
 800204c:	81fb      	strh	r3, [r7, #14]
 800204e:	460b      	mov	r3, r1
 8002050:	81bb      	strh	r3, [r7, #12]
 8002052:	4613      	mov	r3, r2
 8002054:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 800205a:	89ba      	ldrh	r2, [r7, #12]
 800205c:	89f9      	ldrh	r1, [r7, #14]
 800205e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002062:	9302      	str	r3, [sp, #8]
 8002064:	88fb      	ldrh	r3, [r7, #6]
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2301      	movs	r3, #1
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <BSP_I2C2_WriteReg+0x60>)
 8002070:	f002 fa1c 	bl	80044ac <HAL_I2C_Mem_Write>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 800207a:	4809      	ldr	r0, [pc, #36]	; (80020a0 <BSP_I2C2_WriteReg+0x60>)
 800207c:	f002 fc52 	bl	8004924 <HAL_I2C_GetError>
 8002080:	4603      	mov	r3, r0
 8002082:	2b04      	cmp	r3, #4
 8002084:	d103      	bne.n	800208e <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8002086:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	e002      	b.n	8002094 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800208e:	f06f 0303 	mvn.w	r3, #3
 8002092:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8002094:	697b      	ldr	r3, [r7, #20]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000194c 	.word	0x2000194c

080020a4 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af04      	add	r7, sp, #16
 80020aa:	60ba      	str	r2, [r7, #8]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	81fb      	strh	r3, [r7, #14]
 80020b2:	460b      	mov	r3, r1
 80020b4:	81bb      	strh	r3, [r7, #12]
 80020b6:	4613      	mov	r3, r2
 80020b8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80020be:	89ba      	ldrh	r2, [r7, #12]
 80020c0:	89f9      	ldrh	r1, [r7, #14]
 80020c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	480c      	ldr	r0, [pc, #48]	; (8002104 <BSP_I2C2_ReadReg+0x60>)
 80020d4:	f002 fafe 	bl	80046d4 <HAL_I2C_Mem_Read>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00c      	beq.n	80020f8 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80020de:	4809      	ldr	r0, [pc, #36]	; (8002104 <BSP_I2C2_ReadReg+0x60>)
 80020e0:	f002 fc20 	bl	8004924 <HAL_I2C_GetError>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d103      	bne.n	80020f2 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80020ea:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e002      	b.n	80020f8 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80020f2:	f06f 0303 	mvn.w	r3, #3
 80020f6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80020f8:	697b      	ldr	r3, [r7, #20]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	2000194c 	.word	0x2000194c

08002108 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800210c:	f001 fadc 	bl	80036c8 <HAL_GetTick>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a1c      	ldr	r2, [pc, #112]	; (8002198 <MX_I2C2_Init+0x80>)
 8002128:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a1b      	ldr	r2, [pc, #108]	; (800219c <MX_I2C2_Init+0x84>)
 800212e:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f002 f8d4 	bl	8004308 <HAL_I2C_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800216a:	2100      	movs	r1, #0
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f002 fe8b 	bl	8004e88 <HAL_I2CEx_ConfigAnalogFilter>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800217c:	2100      	movs	r1, #0
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f002 fecd 	bl	8004f1e <HAL_I2CEx_ConfigDigitalFilter>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40005800 	.word	0x40005800
 800219c:	00702991 	.word	0x00702991

080021a0 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <I2C2_MspInit+0x84>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ac:	4a1d      	ldr	r2, [pc, #116]	; (8002224 <I2C2_MspInit+0x84>)
 80021ae:	f043 0302 	orr.w	r3, r3, #2
 80021b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021b4:	4b1b      	ldr	r3, [pc, #108]	; (8002224 <I2C2_MspInit+0x84>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80021c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c6:	2312      	movs	r3, #18
 80021c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	2303      	movs	r3, #3
 80021d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 80021d2:	2304      	movs	r3, #4
 80021d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4812      	ldr	r0, [pc, #72]	; (8002228 <I2C2_MspInit+0x88>)
 80021de:	f001 fdab 	bl	8003d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 80021e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e8:	2312      	movs	r3, #18
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021ec:	2301      	movs	r3, #1
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 80021f4:	2304      	movs	r3, #4
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	480a      	ldr	r0, [pc, #40]	; (8002228 <I2C2_MspInit+0x88>)
 8002200:	f001 fd9a 	bl	8003d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <I2C2_MspInit+0x84>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	4a06      	ldr	r2, [pc, #24]	; (8002224 <I2C2_MspInit+0x84>)
 800220a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800220e:	6593      	str	r3, [r2, #88]	; 0x58
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <I2C2_MspInit+0x84>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 800221c:	bf00      	nop
 800221e:	3728      	adds	r7, #40	; 0x28
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	48000400 	.word	0x48000400

0800222c <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <I2C2_MspDeInit+0x30>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a08      	ldr	r2, [pc, #32]	; (800225c <I2C2_MspDeInit+0x30>)
 800223a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002244:	4806      	ldr	r0, [pc, #24]	; (8002260 <I2C2_MspDeInit+0x34>)
 8002246:	f001 ff21 	bl	800408c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 800224a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224e:	4804      	ldr	r0, [pc, #16]	; (8002260 <I2C2_MspDeInit+0x34>)
 8002250:	f001 ff1c 	bl	800408c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	48000400 	.word	0x48000400

08002264 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <I2Cx_MspInit+0xa8>)
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002270:	4a26      	ldr	r2, [pc, #152]	; (800230c <I2Cx_MspInit+0xa8>)
 8002272:	f043 0302 	orr.w	r3, r3, #2
 8002276:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002278:	4b24      	ldr	r3, [pc, #144]	; (800230c <I2Cx_MspInit+0xa8>)
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002284:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002288:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800228a:	2312      	movs	r3, #18
 800228c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800228e:	2301      	movs	r3, #1
 8002290:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002296:	2304      	movs	r3, #4
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	481b      	ldr	r0, [pc, #108]	; (8002310 <I2Cx_MspInit+0xac>)
 80022a2:	f001 fd49 	bl	8003d38 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	4818      	ldr	r0, [pc, #96]	; (8002310 <I2Cx_MspInit+0xac>)
 80022ae:	f001 fd43 	bl	8003d38 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80022b2:	4b16      	ldr	r3, [pc, #88]	; (800230c <I2Cx_MspInit+0xa8>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b6:	4a15      	ldr	r2, [pc, #84]	; (800230c <I2Cx_MspInit+0xa8>)
 80022b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022bc:	6593      	str	r3, [r2, #88]	; 0x58
 80022be:	4b13      	ldr	r3, [pc, #76]	; (800230c <I2Cx_MspInit+0xa8>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80022ca:	4b10      	ldr	r3, [pc, #64]	; (800230c <I2Cx_MspInit+0xa8>)
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	4a0f      	ldr	r2, [pc, #60]	; (800230c <I2Cx_MspInit+0xa8>)
 80022d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022d4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80022d6:	4b0d      	ldr	r3, [pc, #52]	; (800230c <I2Cx_MspInit+0xa8>)
 80022d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022da:	4a0c      	ldr	r2, [pc, #48]	; (800230c <I2Cx_MspInit+0xa8>)
 80022dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80022e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80022e2:	2200      	movs	r2, #0
 80022e4:	210f      	movs	r1, #15
 80022e6:	2021      	movs	r0, #33	; 0x21
 80022e8:	f001 faf9 	bl	80038de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80022ec:	2021      	movs	r0, #33	; 0x21
 80022ee:	f001 fb12 	bl	8003916 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	210f      	movs	r1, #15
 80022f6:	2022      	movs	r0, #34	; 0x22
 80022f8:	f001 faf1 	bl	80038de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80022fc:	2022      	movs	r0, #34	; 0x22
 80022fe:	f001 fb0a 	bl	8003916 <HAL_NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	; 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	48000400 	.word	0x48000400

08002314 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <I2Cx_Init+0x54>)
 8002320:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <I2Cx_Init+0x58>)
 8002326:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff89 	bl	8002264 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f001 ffd8 	bl	8004308 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002358:	2100      	movs	r1, #0
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f002 fd94 	bl	8004e88 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40005800 	.word	0x40005800
 800236c:	00702681 	.word	0x00702681

08002370 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af04      	add	r7, sp, #16
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	4608      	mov	r0, r1
 800237a:	4611      	mov	r1, r2
 800237c:	461a      	mov	r2, r3
 800237e:	4603      	mov	r3, r0
 8002380:	72fb      	strb	r3, [r7, #11]
 8002382:	460b      	mov	r3, r1
 8002384:	813b      	strh	r3, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800238e:	7afb      	ldrb	r3, [r7, #11]
 8002390:	b299      	uxth	r1, r3
 8002392:	88f8      	ldrh	r0, [r7, #6]
 8002394:	893a      	ldrh	r2, [r7, #8]
 8002396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239a:	9302      	str	r3, [sp, #8]
 800239c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	4603      	mov	r3, r0
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f002 f994 	bl	80046d4 <HAL_I2C_Mem_Read>
 80023ac:	4603      	mov	r3, r0
 80023ae:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80023b6:	7afb      	ldrb	r3, [r7, #11]
 80023b8:	4619      	mov	r1, r3
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f832 	bl	8002424 <I2Cx_Error>
  }
  return status;
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b08a      	sub	sp, #40	; 0x28
 80023ce:	af04      	add	r7, sp, #16
 80023d0:	60f8      	str	r0, [r7, #12]
 80023d2:	4608      	mov	r0, r1
 80023d4:	4611      	mov	r1, r2
 80023d6:	461a      	mov	r2, r3
 80023d8:	4603      	mov	r3, r0
 80023da:	72fb      	strb	r3, [r7, #11]
 80023dc:	460b      	mov	r3, r1
 80023de:	813b      	strh	r3, [r7, #8]
 80023e0:	4613      	mov	r3, r2
 80023e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	b299      	uxth	r1, r3
 80023ec:	88f8      	ldrh	r0, [r7, #6]
 80023ee:	893a      	ldrh	r2, [r7, #8]
 80023f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023f4:	9302      	str	r3, [sp, #8]
 80023f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4603      	mov	r3, r0
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f002 f853 	bl	80044ac <HAL_I2C_Mem_Write>
 8002406:	4603      	mov	r3, r0
 8002408:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800240a:	7dfb      	ldrb	r3, [r7, #23]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002410:	7afb      	ldrb	r3, [r7, #11]
 8002412:	4619      	mov	r1, r3
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f805 	bl	8002424 <I2Cx_Error>
  }
  return status;
 800241a:	7dfb      	ldrb	r3, [r7, #23]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f001 fff8 	bl	8004426 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff6c 	bl	8002314 <I2Cx_Init>
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <SENSOR_IO_Init+0x10>)
 800244a:	f7ff ff63 	bl	8002314 <I2Cx_Init>
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200019a4 	.word	0x200019a4

08002458 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af02      	add	r7, sp, #8
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
 8002462:	460b      	mov	r3, r1
 8002464:	71bb      	strb	r3, [r7, #6]
 8002466:	4613      	mov	r3, r2
 8002468:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800246a:	79bb      	ldrb	r3, [r7, #6]
 800246c:	b29a      	uxth	r2, r3
 800246e:	79f9      	ldrb	r1, [r7, #7]
 8002470:	2301      	movs	r3, #1
 8002472:	9301      	str	r3, [sp, #4]
 8002474:	1d7b      	adds	r3, r7, #5
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	2301      	movs	r3, #1
 800247a:	4803      	ldr	r0, [pc, #12]	; (8002488 <SENSOR_IO_Write+0x30>)
 800247c:	f7ff ffa5 	bl	80023ca <I2Cx_WriteMultiple>
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	200019a4 	.word	0x200019a4

0800248c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af02      	add	r7, sp, #8
 8002492:	4603      	mov	r3, r0
 8002494:	460a      	mov	r2, r1
 8002496:	71fb      	strb	r3, [r7, #7]
 8002498:	4613      	mov	r3, r2
 800249a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80024a0:	79bb      	ldrb	r3, [r7, #6]
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	79f9      	ldrb	r1, [r7, #7]
 80024a6:	2301      	movs	r3, #1
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	f107 030f 	add.w	r3, r7, #15
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	2301      	movs	r3, #1
 80024b2:	4804      	ldr	r0, [pc, #16]	; (80024c4 <SENSOR_IO_Read+0x38>)
 80024b4:	f7ff ff5c 	bl	8002370 <I2Cx_ReadMultiple>

  return read_value;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200019a4 	.word	0x200019a4

080024c8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	603a      	str	r2, [r7, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
 80024d6:	460b      	mov	r3, r1
 80024d8:	71bb      	strb	r3, [r7, #6]
 80024da:	4613      	mov	r3, r2
 80024dc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80024de:	79bb      	ldrb	r3, [r7, #6]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	79f9      	ldrb	r1, [r7, #7]
 80024e4:	88bb      	ldrh	r3, [r7, #4]
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	4804      	ldr	r0, [pc, #16]	; (8002500 <SENSOR_IO_ReadMultiple+0x38>)
 80024f0:	f7ff ff3e 	bl	8002370 <I2Cx_ReadMultiple>
 80024f4:	4603      	mov	r3, r0
 80024f6:	b29b      	uxth	r3, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200019a4 	.word	0x200019a4

08002504 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <BSP_TSENSOR_Init+0x30>)
 8002510:	4a09      	ldr	r2, [pc, #36]	; (8002538 <BSP_TSENSOR_Init+0x34>)
 8002512:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002514:	f7ff ff96 	bl	8002444 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <BSP_TSENSOR_Init+0x30>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2100      	movs	r1, #0
 8002520:	20be      	movs	r0, #190	; 0xbe
 8002522:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002528:	79fb      	ldrb	r3, [r7, #7]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200019f8 	.word	0x200019f8
 8002538:	20000010 	.word	0x20000010

0800253c <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2120      	movs	r1, #32
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff9c 	bl	800248c <SENSOR_IO_Read>
 8002554:	4603      	mov	r3, r0
 8002556:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	f023 0304 	bic.w	r3, r3, #4
 800255e:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	f043 0304 	orr.w	r3, r3, #4
 8002566:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	f023 0303 	bic.w	r3, r3, #3
 800256e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	f043 0301 	orr.w	r3, r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800257e:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	7bfa      	ldrb	r2, [r7, #15]
 8002586:	2120      	movs	r1, #32
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff65 	bl	8002458 <SENSOR_IO_Write>
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b088      	sub	sp, #32
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	b2d8      	uxtb	r0, r3
 80025a4:	f107 0208 	add.w	r2, r7, #8
 80025a8:	2302      	movs	r3, #2
 80025aa:	21b2      	movs	r1, #178	; 0xb2
 80025ac:	f7ff ff8c 	bl	80024c8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2135      	movs	r1, #53	; 0x35
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ff68 	bl	800248c <SENSOR_IO_Read>
 80025bc:	4603      	mov	r3, r0
 80025be:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 80025c0:	7ffb      	ldrb	r3, [r7, #31]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	b21b      	sxth	r3, r3
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	b21a      	sxth	r2, r3
 80025cc:	7a3b      	ldrb	r3, [r7, #8]
 80025ce:	b21b      	sxth	r3, r3
 80025d0:	4313      	orrs	r3, r2
 80025d2:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 80025d4:	7ffb      	ldrb	r3, [r7, #31]
 80025d6:	019b      	lsls	r3, r3, #6
 80025d8:	b21b      	sxth	r3, r3
 80025da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025de:	b21a      	sxth	r2, r3
 80025e0:	7a7b      	ldrb	r3, [r7, #9]
 80025e2:	b21b      	sxth	r3, r3
 80025e4:	4313      	orrs	r3, r2
 80025e6:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 80025e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025ec:	10db      	asrs	r3, r3, #3
 80025ee:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 80025f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80025f4:	10db      	asrs	r3, r3, #3
 80025f6:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	b2d8      	uxtb	r0, r3
 80025fc:	f107 0208 	add.w	r2, r7, #8
 8002600:	2304      	movs	r3, #4
 8002602:	21bc      	movs	r1, #188	; 0xbc
 8002604:	f7ff ff60 	bl	80024c8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002608:	7a7b      	ldrb	r3, [r7, #9]
 800260a:	021b      	lsls	r3, r3, #8
 800260c:	b21a      	sxth	r2, r3
 800260e:	7a3b      	ldrb	r3, [r7, #8]
 8002610:	b21b      	sxth	r3, r3
 8002612:	4313      	orrs	r3, r2
 8002614:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002616:	7afb      	ldrb	r3, [r7, #11]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	b21a      	sxth	r2, r3
 800261c:	7abb      	ldrb	r3, [r7, #10]
 800261e:	b21b      	sxth	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	b2d8      	uxtb	r0, r3
 8002628:	f107 0208 	add.w	r2, r7, #8
 800262c:	2302      	movs	r3, #2
 800262e:	21aa      	movs	r1, #170	; 0xaa
 8002630:	f7ff ff4a 	bl	80024c8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002634:	7a7b      	ldrb	r3, [r7, #9]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	b21a      	sxth	r2, r3
 800263a:	7a3b      	ldrb	r3, [r7, #8]
 800263c:	b21b      	sxth	r3, r3
 800263e:	4313      	orrs	r3, r2
 8002640:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002642:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002646:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	ee07 3a90 	vmov	s15, r3
 8002650:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002654:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002658:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002666:	ee67 6a27 	vmul.f32	s13, s14, s15
 800266a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800266e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	ee07 3a90 	vmov	s15, r3
 8002678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800267c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002680:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002684:	ee07 3a90 	vmov	s15, r3
 8002688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800268c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002690:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	ee07 3a90 	vmov	s15, r3
}
 800269a:	eeb0 0a67 	vmov.f32	s0, s15
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	e04d      	b.n	800275c <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	7b1a      	ldrb	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	699a      	ldr	r2, [r3, #24]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a1b      	ldr	r2, [pc, #108]	; (8002768 <LSM6DSL_RegisterBusIO+0xc4>)
 80026fc:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a1a      	ldr	r2, [pc, #104]	; (800276c <LSM6DSL_RegisterBusIO+0xc8>)
 8002702:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d103      	bne.n	800271a <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8002712:	f04f 33ff 	mov.w	r3, #4294967295
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	e020      	b.n	800275c <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4798      	blx	r3
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e016      	b.n	800275c <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	2b02      	cmp	r3, #2
 8002734:	d112      	bne.n	800275c <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10d      	bne.n	800275c <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002740:	230c      	movs	r3, #12
 8002742:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8002744:	7afb      	ldrb	r3, [r7, #11]
 8002746:	461a      	mov	r2, r3
 8002748:	2112      	movs	r1, #18
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f9b9 	bl	8002ac2 <LSM6DSL_Write_Reg>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800275c:	68fb      	ldr	r3, [r7, #12]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	08002d7d 	.word	0x08002d7d
 800276c:	08002db3 	.word	0x08002db3

08002770 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	331c      	adds	r3, #28
 800277c:	2101      	movs	r1, #1
 800277e:	4618      	mov	r0, r3
 8002780:	f000 fcb4 	bl	80030ec <lsm6dsl_auto_increment_set>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e054      	b.n	800283a <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	331c      	adds	r3, #28
 8002794:	2101      	movs	r1, #1
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fc26 	bl	8002fe8 <lsm6dsl_block_data_update_set>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	e048      	b.n	800283a <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	331c      	adds	r3, #28
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fefb 	bl	80035aa <lsm6dsl_fifo_mode_set>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80027ba:	f04f 33ff 	mov.w	r3, #4294967295
 80027be:	e03c      	b.n	800283a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2204      	movs	r2, #4
 80027c4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	331c      	adds	r3, #28
 80027cc:	2100      	movs	r1, #0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fb98 	bl	8002f04 <lsm6dsl_xl_data_rate_set>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
 80027de:	e02c      	b.n	800283a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	331c      	adds	r3, #28
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 fb2e 	bl	8002e48 <lsm6dsl_xl_full_scale_set>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	e020      	b.n	800283a <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2204      	movs	r2, #4
 80027fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	331c      	adds	r3, #28
 8002804:	2100      	movs	r1, #0
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fbc8 	bl	8002f9c <lsm6dsl_gy_data_rate_set>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e010      	b.n	800283a <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	331c      	adds	r3, #28
 800281c:	2106      	movs	r1, #6
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fb96 	bl	8002f50 <lsm6dsl_gy_full_scale_set>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800282a:	f04f 33ff 	mov.w	r3, #4294967295
 800282e:	e004      	b.n	800283a <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
 800284a:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	331c      	adds	r3, #28
 8002850:	6839      	ldr	r1, [r7, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fc39 	bl	80030ca <lsm6dsl_device_id_get>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	e000      	b.n	8002866 <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	e014      	b.n	80028ae <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f103 021c 	add.w	r2, r3, #28
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 fb36 	bl	8002f04 <lsm6dsl_xl_data_rate_set>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d002      	beq.n	80028a4 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295
 80028a2:	e004      	b.n	80028ae <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	331c      	adds	r3, #28
 80028ca:	f107 020b 	add.w	r2, r7, #11
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fadf 	bl	8002e94 <lsm6dsl_xl_full_scale_get>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
 80028e0:	e023      	b.n	800292a <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d81b      	bhi.n	8002920 <LSM6DSL_ACC_GetSensitivity+0x68>
 80028e8:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <LSM6DSL_ACC_GetSensitivity+0x38>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002901 	.word	0x08002901
 80028f4:	08002919 	.word	0x08002919
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002911 	.word	0x08002911
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8002904:	601a      	str	r2, [r3, #0]
      break;
 8002906:	e00f      	b.n	8002928 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <LSM6DSL_ACC_GetSensitivity+0x80>)
 800290c:	601a      	str	r2, [r3, #0]
      break;
 800290e:	e00b      	b.n	8002928 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <LSM6DSL_ACC_GetSensitivity+0x84>)
 8002914:	601a      	str	r2, [r3, #0]
      break;
 8002916:	e007      	b.n	8002928 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	4a09      	ldr	r2, [pc, #36]	; (8002940 <LSM6DSL_ACC_GetSensitivity+0x88>)
 800291c:	601a      	str	r2, [r3, #0]
      break;
 800291e:	e003      	b.n	8002928 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
 8002924:	60fb      	str	r3, [r7, #12]
      break;
 8002926:	bf00      	nop
  }

  return ret;
 8002928:	68fb      	ldr	r3, [r7, #12]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	3d79db23 	.word	0x3d79db23
 8002938:	3df9db23 	.word	0x3df9db23
 800293c:	3e79db23 	.word	0x3e79db23
 8002940:	3ef9db23 	.word	0x3ef9db23

08002944 <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8002956:	2b01      	cmp	r3, #1
 8002958:	d106      	bne.n	8002968 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800295a:	ed97 0a00 	vldr	s0, [r7]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8fe 	bl	8002b60 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8002964:	4603      	mov	r3, r0
 8002966:	e005      	b.n	8002974 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002968:	ed97 0a00 	vldr	s0, [r7]
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f983 	bl	8002c78 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8002972:	4603      	mov	r3, r0
  }
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b02      	cmp	r3, #2
 800298a:	dd0b      	ble.n	80029a4 <LSM6DSL_ACC_SetFullScale+0x28>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b04      	cmp	r3, #4
 8002990:	dd06      	ble.n	80029a0 <LSM6DSL_ACC_SetFullScale+0x24>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b08      	cmp	r3, #8
 8002996:	dc01      	bgt.n	800299c <LSM6DSL_ACC_SetFullScale+0x20>
 8002998:	2303      	movs	r3, #3
 800299a:	e004      	b.n	80029a6 <LSM6DSL_ACC_SetFullScale+0x2a>
 800299c:	2301      	movs	r3, #1
 800299e:	e002      	b.n	80029a6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e000      	b.n	80029a6 <LSM6DSL_ACC_SetFullScale+0x2a>
 80029a4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80029a6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	331c      	adds	r3, #28
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	4611      	mov	r1, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fa49 	bl	8002e48 <lsm6dsl_xl_full_scale_set>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	e000      	b.n	80029c4 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	331c      	adds	r3, #28
 80029da:	f107 0208 	add.w	r2, r7, #8
 80029de:	4611      	mov	r1, r2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fb27 	bl	8003034 <lsm6dsl_acceleration_raw_get>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 80029ec:	f04f 33ff 	mov.w	r3, #4294967295
 80029f0:	e00c      	b.n	8002a0c <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80029f2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80029fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002a02:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	331c      	adds	r3, #28
 8002a28:	f107 0210 	add.w	r2, r7, #16
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fb00 	bl	8003034 <lsm6dsl_acceleration_raw_get>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8002a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a3e:	e03c      	b.n	8002aba <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff36 	bl	80028b8 <LSM6DSL_ACC_GetSensitivity>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	e030      	b.n	8002aba <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002a58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a5c:	ee07 3a90 	vmov	s15, r3
 8002a60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a70:	ee17 2a90 	vmov	r2, s15
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002a78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002a7c:	ee07 3a90 	vmov	s15, r3
 8002a80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a84:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a90:	ee17 2a90 	vmov	r2, s15
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002a98:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002a9c:	ee07 3a90 	vmov	s15, r3
 8002aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab0:	ee17 2a90 	vmov	r2, s15
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	70fb      	strb	r3, [r7, #3]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f103 001c 	add.w	r0, r3, #28
 8002ad8:	1cba      	adds	r2, r7, #2
 8002ada:	78f9      	ldrb	r1, [r7, #3]
 8002adc:	2301      	movs	r3, #1
 8002ade:	f000 f99b 	bl	8002e18 <lsm6dsl_write_reg>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aec:	e000      	b.n	8002af0 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	331c      	adds	r3, #28
 8002b08:	f107 020c 	add.w	r2, r7, #12
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fc75 	bl	80033fe <lsm6dsl_pin_int1_route_get>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d002      	beq.n	8002b20 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8002b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1e:	e01b      	b.n	8002b58 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d811      	bhi.n	8002b4a <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	7b3b      	ldrb	r3, [r7, #12]
 8002b30:	f362 0300 	bfi	r3, r2, #0, #1
 8002b34:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	331c      	adds	r3, #28
 8002b3a:	68f9      	ldr	r1, [r7, #12]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 fafb 	bl	8003138 <lsm6dsl_pin_int1_route_set>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d006      	beq.n	8002b56 <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8002b48:	e002      	b.n	8002b50 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4e:	e003      	b.n	8002b58 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295
 8002b54:	e000      	b.n	8002b58 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3710      	adds	r7, #16
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002b6c:	edd7 7a00 	vldr	s15, [r7]
 8002b70:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002b74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7c:	d801      	bhi.n	8002b82 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e058      	b.n	8002c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002b82:	edd7 7a00 	vldr	s15, [r7]
 8002b86:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	d801      	bhi.n	8002b98 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e04d      	b.n	8002c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002b98:	edd7 7a00 	vldr	s15, [r7]
 8002b9c:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002c5c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8002ba0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba8:	d801      	bhi.n	8002bae <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e042      	b.n	8002c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002bae:	edd7 7a00 	vldr	s15, [r7]
 8002bb2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8002c60 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbe:	d801      	bhi.n	8002bc4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	e037      	b.n	8002c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002bc4:	edd7 7a00 	vldr	s15, [r7]
 8002bc8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002c64 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002bcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd4:	d801      	bhi.n	8002bda <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	e02c      	b.n	8002c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002bda:	edd7 7a00 	vldr	s15, [r7]
 8002bde:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002c68 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8002be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bea:	d801      	bhi.n	8002bf0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002bec:	2306      	movs	r3, #6
 8002bee:	e021      	b.n	8002c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002bf0:	edd7 7a00 	vldr	s15, [r7]
 8002bf4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002c6c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8002bf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c00:	d801      	bhi.n	8002c06 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8002c02:	2307      	movs	r3, #7
 8002c04:	e016      	b.n	8002c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002c06:	edd7 7a00 	vldr	s15, [r7]
 8002c0a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002c70 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8002c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c16:	d801      	bhi.n	8002c1c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002c18:	2308      	movs	r3, #8
 8002c1a:	e00b      	b.n	8002c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002c1c:	edd7 7a00 	vldr	s15, [r7]
 8002c20:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002c74 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8002c24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2c:	d801      	bhi.n	8002c32 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8002c2e:	2309      	movs	r3, #9
 8002c30:	e000      	b.n	8002c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002c32:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002c34:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	331c      	adds	r3, #28
 8002c3a:	7bfa      	ldrb	r2, [r7, #15]
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f960 	bl	8002f04 <lsm6dsl_xl_data_rate_set>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4e:	e000      	b.n	8002c52 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	42500000 	.word	0x42500000
 8002c60:	42d00000 	.word	0x42d00000
 8002c64:	43500000 	.word	0x43500000
 8002c68:	43d00000 	.word	0x43d00000
 8002c6c:	44504000 	.word	0x44504000
 8002c70:	44cf8000 	.word	0x44cf8000
 8002c74:	45502000 	.word	0x45502000

08002c78 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002c84:	edd7 7a00 	vldr	s15, [r7]
 8002c88:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8002c8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c94:	d801      	bhi.n	8002c9a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e058      	b.n	8002d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002c9a:	edd7 7a00 	vldr	s15, [r7]
 8002c9e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8002ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002caa:	d801      	bhi.n	8002cb0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002cac:	2302      	movs	r3, #2
 8002cae:	e04d      	b.n	8002d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002cb0:	edd7 7a00 	vldr	s15, [r7]
 8002cb4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002d60 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	d801      	bhi.n	8002cc6 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e042      	b.n	8002d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002cc6:	edd7 7a00 	vldr	s15, [r7]
 8002cca:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002d64 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8002cce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	d801      	bhi.n	8002cdc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	e037      	b.n	8002d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002cdc:	edd7 7a00 	vldr	s15, [r7]
 8002ce0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002d68 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8002ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cec:	d801      	bhi.n	8002cf2 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002cee:	2305      	movs	r3, #5
 8002cf0:	e02c      	b.n	8002d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002cf2:	edd7 7a00 	vldr	s15, [r7]
 8002cf6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8002d6c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	d801      	bhi.n	8002d08 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002d04:	2306      	movs	r3, #6
 8002d06:	e021      	b.n	8002d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002d08:	edd7 7a00 	vldr	s15, [r7]
 8002d0c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d70 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8002d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d18:	d801      	bhi.n	8002d1e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	e016      	b.n	8002d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002d1e:	edd7 7a00 	vldr	s15, [r7]
 8002d22:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002d74 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8002d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2e:	d801      	bhi.n	8002d34 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8002d30:	2308      	movs	r3, #8
 8002d32:	e00b      	b.n	8002d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002d34:	edd7 7a00 	vldr	s15, [r7]
 8002d38:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002d78 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8002d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d44:	d801      	bhi.n	8002d4a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8002d46:	2309      	movs	r3, #9
 8002d48:	e000      	b.n	8002d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002d4a:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	42500000 	.word	0x42500000
 8002d64:	42d00000 	.word	0x42d00000
 8002d68:	43500000 	.word	0x43500000
 8002d6c:	43d00000 	.word	0x43d00000
 8002d70:	44504000 	.word	0x44504000
 8002d74:	44cf8000 	.word	0x44cf8000
 8002d78:	45502000 	.word	0x45502000

08002d7c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002d7c:	b590      	push	{r4, r7, lr}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	461a      	mov	r2, r3
 8002d88:	460b      	mov	r3, r1
 8002d8a:	72fb      	strb	r3, [r7, #11]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	695c      	ldr	r4, [r3, #20]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	7b1b      	ldrb	r3, [r3, #12]
 8002d9c:	b298      	uxth	r0, r3
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	b299      	uxth	r1, r3
 8002da2:	893b      	ldrh	r3, [r7, #8]
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	47a0      	blx	r4
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	371c      	adds	r7, #28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd90      	pop	{r4, r7, pc}

08002db2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002db2:	b590      	push	{r4, r7, lr}
 8002db4:	b087      	sub	sp, #28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	72fb      	strb	r3, [r7, #11]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	691c      	ldr	r4, [r3, #16]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	7b1b      	ldrb	r3, [r3, #12]
 8002dd2:	b298      	uxth	r0, r3
 8002dd4:	7afb      	ldrb	r3, [r7, #11]
 8002dd6:	b299      	uxth	r1, r3
 8002dd8:	893b      	ldrh	r3, [r7, #8]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	47a0      	blx	r4
 8002dde:	4603      	mov	r3, r0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	371c      	adds	r7, #28
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	607a      	str	r2, [r7, #4]
 8002df2:	461a      	mov	r2, r3
 8002df4:	460b      	mov	r3, r1
 8002df6:	72fb      	strb	r3, [r7, #11]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685c      	ldr	r4, [r3, #4]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6898      	ldr	r0, [r3, #8]
 8002e04:	893b      	ldrh	r3, [r7, #8]
 8002e06:	7af9      	ldrb	r1, [r7, #11]
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	47a0      	blx	r4
 8002e0c:	6178      	str	r0, [r7, #20]

  return ret;
 8002e0e:	697b      	ldr	r3, [r7, #20]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	371c      	adds	r7, #28
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd90      	pop	{r4, r7, pc}

08002e18 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8002e18:	b590      	push	{r4, r7, lr}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	461a      	mov	r2, r3
 8002e24:	460b      	mov	r3, r1
 8002e26:	72fb      	strb	r3, [r7, #11]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681c      	ldr	r4, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6898      	ldr	r0, [r3, #8]
 8002e34:	893b      	ldrh	r3, [r7, #8]
 8002e36:	7af9      	ldrb	r1, [r7, #11]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	47a0      	blx	r4
 8002e3c:	6178      	str	r0, [r7, #20]

  return ret;
 8002e3e:	697b      	ldr	r3, [r7, #20]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002e54:	f107 0208 	add.w	r2, r7, #8
 8002e58:	2301      	movs	r3, #1
 8002e5a:	2110      	movs	r1, #16
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ffc3 	bl	8002de8 <lsm6dsl_read_reg>
 8002e62:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10f      	bne.n	8002e8a <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	7a3b      	ldrb	r3, [r7, #8]
 8002e74:	f362 0383 	bfi	r3, r2, #2, #2
 8002e78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002e7a:	f107 0208 	add.w	r2, r7, #8
 8002e7e:	2301      	movs	r3, #1
 8002e80:	2110      	movs	r1, #16
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ffc8 	bl	8002e18 <lsm6dsl_write_reg>
 8002e88:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3710      	adds	r7, #16
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002e9e:	f107 0208 	add.w	r2, r7, #8
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	2110      	movs	r1, #16
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff9e 	bl	8002de8 <lsm6dsl_read_reg>
 8002eac:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 8002eae:	7a3b      	ldrb	r3, [r7, #8]
 8002eb0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d81a      	bhi.n	8002ef0 <lsm6dsl_xl_full_scale_get+0x5c>
 8002eba:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <lsm6dsl_xl_full_scale_get+0x2c>)
 8002ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec0:	08002ed1 	.word	0x08002ed1
 8002ec4:	08002ed9 	.word	0x08002ed9
 8002ec8:	08002ee1 	.word	0x08002ee1
 8002ecc:	08002ee9 	.word	0x08002ee9
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
      break;
 8002ed6:	e00f      	b.n	8002ef8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
      break;
 8002ede:	e00b      	b.n	8002ef8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	701a      	strb	r2, [r3, #0]
      break;
 8002ee6:	e007      	b.n	8002ef8 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	2203      	movs	r2, #3
 8002eec:	701a      	strb	r2, [r3, #0]
      break;
 8002eee:	e003      	b.n	8002ef8 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	701a      	strb	r2, [r3, #0]
      break;
 8002ef6:	bf00      	nop
  }

  return ret;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop

08002f04 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002f10:	f107 0208 	add.w	r2, r7, #8
 8002f14:	2301      	movs	r3, #1
 8002f16:	2110      	movs	r1, #16
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ff65 	bl	8002de8 <lsm6dsl_read_reg>
 8002f1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002f26:	78fb      	ldrb	r3, [r7, #3]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	7a3b      	ldrb	r3, [r7, #8]
 8002f30:	f362 1307 	bfi	r3, r2, #4, #4
 8002f34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002f36:	f107 0208 	add.w	r2, r7, #8
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	2110      	movs	r1, #16
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff ff6a 	bl	8002e18 <lsm6dsl_write_reg>
 8002f44:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f46:	68fb      	ldr	r3, [r7, #12]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002f5c:	f107 0208 	add.w	r2, r7, #8
 8002f60:	2301      	movs	r3, #1
 8002f62:	2111      	movs	r1, #17
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f7ff ff3f 	bl	8002de8 <lsm6dsl_read_reg>
 8002f6a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10f      	bne.n	8002f92 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8002f72:	78fb      	ldrb	r3, [r7, #3]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	7a3b      	ldrb	r3, [r7, #8]
 8002f7c:	f362 0343 	bfi	r3, r2, #1, #3
 8002f80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002f82:	f107 0208 	add.w	r2, r7, #8
 8002f86:	2301      	movs	r3, #1
 8002f88:	2111      	movs	r1, #17
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ff44 	bl	8002e18 <lsm6dsl_write_reg>
 8002f90:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002f92:	68fb      	ldr	r3, [r7, #12]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002fa8:	f107 0208 	add.w	r2, r7, #8
 8002fac:	2301      	movs	r3, #1
 8002fae:	2111      	movs	r1, #17
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff ff19 	bl	8002de8 <lsm6dsl_read_reg>
 8002fb6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10f      	bne.n	8002fde <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8002fbe:	78fb      	ldrb	r3, [r7, #3]
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	7a3b      	ldrb	r3, [r7, #8]
 8002fc8:	f362 1307 	bfi	r3, r2, #4, #4
 8002fcc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002fce:	f107 0208 	add.w	r2, r7, #8
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	2111      	movs	r1, #17
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff ff1e 	bl	8002e18 <lsm6dsl_write_reg>
 8002fdc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002fde:	68fb      	ldr	r3, [r7, #12]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002ff4:	f107 0208 	add.w	r2, r7, #8
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	2112      	movs	r1, #18
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff fef3 	bl	8002de8 <lsm6dsl_read_reg>
 8003002:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10f      	bne.n	800302a <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	7a3b      	ldrb	r3, [r7, #8]
 8003014:	f362 1386 	bfi	r3, r2, #6, #1
 8003018:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800301a:	f107 0208 	add.w	r2, r7, #8
 800301e:	2301      	movs	r3, #1
 8003020:	2112      	movs	r1, #18
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7ff fef8 	bl	8002e18 <lsm6dsl_write_reg>
 8003028:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800302a:	68fb      	ldr	r3, [r7, #12]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 800303e:	f107 020c 	add.w	r2, r7, #12
 8003042:	2306      	movs	r3, #6
 8003044:	2128      	movs	r1, #40	; 0x28
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff fece 	bl	8002de8 <lsm6dsl_read_reg>
 800304c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800304e:	7b7b      	ldrb	r3, [r7, #13]
 8003050:	b21a      	sxth	r2, r3
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305c:	b29b      	uxth	r3, r3
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	b29a      	uxth	r2, r3
 8003062:	7b3b      	ldrb	r3, [r7, #12]
 8003064:	b29b      	uxth	r3, r3
 8003066:	4413      	add	r3, r2
 8003068:	b29b      	uxth	r3, r3
 800306a:	b21a      	sxth	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	3302      	adds	r3, #2
 8003076:	b212      	sxth	r2, r2
 8003078:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	3302      	adds	r3, #2
 800307e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003082:	b29b      	uxth	r3, r3
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	b29a      	uxth	r2, r3
 8003088:	7bbb      	ldrb	r3, [r7, #14]
 800308a:	b29b      	uxth	r3, r3
 800308c:	4413      	add	r3, r2
 800308e:	b29a      	uxth	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	3302      	adds	r3, #2
 8003094:	b212      	sxth	r2, r2
 8003096:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003098:	7c7a      	ldrb	r2, [r7, #17]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	3304      	adds	r3, #4
 800309e:	b212      	sxth	r2, r2
 80030a0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	3304      	adds	r3, #4
 80030a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	7c3b      	ldrb	r3, [r7, #16]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	3304      	adds	r3, #4
 80030bc:	b212      	sxth	r2, r2
 80030be:	801a      	strh	r2, [r3, #0]

  return ret;
 80030c0:	697b      	ldr	r3, [r7, #20]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80030d4:	2301      	movs	r3, #1
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	210f      	movs	r1, #15
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fe84 	bl	8002de8 <lsm6dsl_read_reg>
 80030e0:	60f8      	str	r0, [r7, #12]

  return ret;
 80030e2:	68fb      	ldr	r3, [r7, #12]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80030f8:	f107 0208 	add.w	r2, r7, #8
 80030fc:	2301      	movs	r3, #1
 80030fe:	2112      	movs	r1, #18
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7ff fe71 	bl	8002de8 <lsm6dsl_read_reg>
 8003106:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	b2da      	uxtb	r2, r3
 8003116:	7a3b      	ldrb	r3, [r7, #8]
 8003118:	f362 0382 	bfi	r3, r2, #2, #1
 800311c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800311e:	f107 0208 	add.w	r2, r7, #8
 8003122:	2301      	movs	r3, #1
 8003124:	2112      	movs	r1, #18
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fe76 	bl	8002e18 <lsm6dsl_write_reg>
 800312c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800312e:	68fb      	ldr	r3, [r7, #12]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003142:	f107 021c 	add.w	r2, r7, #28
 8003146:	2301      	movs	r3, #1
 8003148:	210d      	movs	r1, #13
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fe4c 	bl	8002de8 <lsm6dsl_read_reg>
 8003150:	6278      	str	r0, [r7, #36]	; 0x24

  if (ret == 0)
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d147      	bne.n	80031e8 <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 8003158:	783b      	ldrb	r3, [r7, #0]
 800315a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800315e:	b2da      	uxtb	r2, r3
 8003160:	7f3b      	ldrb	r3, [r7, #28]
 8003162:	f362 0300 	bfi	r3, r2, #0, #1
 8003166:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 8003168:	783b      	ldrb	r3, [r7, #0]
 800316a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800316e:	b2da      	uxtb	r2, r3
 8003170:	7f3b      	ldrb	r3, [r7, #28]
 8003172:	f362 0341 	bfi	r3, r2, #1, #1
 8003176:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 8003178:	783b      	ldrb	r3, [r7, #0]
 800317a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800317e:	b2da      	uxtb	r2, r3
 8003180:	7f3b      	ldrb	r3, [r7, #28]
 8003182:	f362 0382 	bfi	r3, r2, #2, #1
 8003186:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 8003188:	783b      	ldrb	r3, [r7, #0]
 800318a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800318e:	b2da      	uxtb	r2, r3
 8003190:	7f3b      	ldrb	r3, [r7, #28]
 8003192:	f362 03c3 	bfi	r3, r2, #3, #1
 8003196:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 8003198:	783b      	ldrb	r3, [r7, #0]
 800319a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800319e:	b2da      	uxtb	r2, r3
 80031a0:	7f3b      	ldrb	r3, [r7, #28]
 80031a2:	f362 1304 	bfi	r3, r2, #4, #1
 80031a6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80031a8:	783b      	ldrb	r3, [r7, #0]
 80031aa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	7f3b      	ldrb	r3, [r7, #28]
 80031b2:	f362 1345 	bfi	r3, r2, #5, #1
 80031b6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80031b8:	783b      	ldrb	r3, [r7, #0]
 80031ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	7f3b      	ldrb	r3, [r7, #28]
 80031c2:	f362 1386 	bfi	r3, r2, #6, #1
 80031c6:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80031c8:	783b      	ldrb	r3, [r7, #0]
 80031ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	7f3b      	ldrb	r3, [r7, #28]
 80031d2:	f362 13c7 	bfi	r3, r2, #7, #1
 80031d6:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80031d8:	f107 021c 	add.w	r2, r7, #28
 80031dc:	2301      	movs	r3, #1
 80031de:	210d      	movs	r1, #13
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff fe19 	bl	8002e18 <lsm6dsl_write_reg>
 80031e6:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d107      	bne.n	80031fe <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80031ee:	f107 0218 	add.w	r2, r7, #24
 80031f2:	2301      	movs	r3, #1
 80031f4:	215e      	movs	r1, #94	; 0x5e
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fdf6 	bl	8002de8 <lsm6dsl_read_reg>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	2b00      	cmp	r3, #0
 8003202:	d107      	bne.n	8003214 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8003204:	f107 0214 	add.w	r2, r7, #20
 8003208:	2301      	movs	r3, #1
 800320a:	215f      	movs	r1, #95	; 0x5f
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fdeb 	bl	8002de8 <lsm6dsl_read_reg>
 8003212:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	2b00      	cmp	r3, #0
 8003218:	d147      	bne.n	80032aa <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 800321a:	787b      	ldrb	r3, [r7, #1]
 800321c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003220:	b2da      	uxtb	r2, r3
 8003222:	7e3b      	ldrb	r3, [r7, #24]
 8003224:	f362 0300 	bfi	r3, r2, #0, #1
 8003228:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 800322a:	787b      	ldrb	r3, [r7, #1]
 800322c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	7e3b      	ldrb	r3, [r7, #24]
 8003234:	f362 0341 	bfi	r3, r2, #1, #1
 8003238:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 800323a:	787b      	ldrb	r3, [r7, #1]
 800323c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003240:	b2da      	uxtb	r2, r3
 8003242:	7e3b      	ldrb	r3, [r7, #24]
 8003244:	f362 0382 	bfi	r3, r2, #2, #1
 8003248:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 800324a:	787b      	ldrb	r3, [r7, #1]
 800324c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003250:	b2da      	uxtb	r2, r3
 8003252:	7e3b      	ldrb	r3, [r7, #24]
 8003254:	f362 03c3 	bfi	r3, r2, #3, #1
 8003258:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 800325a:	787b      	ldrb	r3, [r7, #1]
 800325c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003260:	b2da      	uxtb	r2, r3
 8003262:	7e3b      	ldrb	r3, [r7, #24]
 8003264:	f362 1304 	bfi	r3, r2, #4, #1
 8003268:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 800326a:	787b      	ldrb	r3, [r7, #1]
 800326c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003270:	b2da      	uxtb	r2, r3
 8003272:	7e3b      	ldrb	r3, [r7, #24]
 8003274:	f362 1345 	bfi	r3, r2, #5, #1
 8003278:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 800327a:	787b      	ldrb	r3, [r7, #1]
 800327c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003280:	b2da      	uxtb	r2, r3
 8003282:	7e3b      	ldrb	r3, [r7, #24]
 8003284:	f362 1386 	bfi	r3, r2, #6, #1
 8003288:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 800328a:	787b      	ldrb	r3, [r7, #1]
 800328c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003290:	b2da      	uxtb	r2, r3
 8003292:	7e3b      	ldrb	r3, [r7, #24]
 8003294:	f362 13c7 	bfi	r3, r2, #7, #1
 8003298:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800329a:	f107 0218 	add.w	r2, r7, #24
 800329e:	2301      	movs	r3, #1
 80032a0:	215e      	movs	r1, #94	; 0x5e
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fdb8 	bl	8002e18 <lsm6dsl_write_reg>
 80032a8:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d107      	bne.n	80032c0 <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80032b0:	f107 0210 	add.w	r2, r7, #16
 80032b4:	2301      	movs	r3, #1
 80032b6:	2113      	movs	r1, #19
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fd95 	bl	8002de8 <lsm6dsl_read_reg>
 80032be:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 80032c6:	78bb      	ldrb	r3, [r7, #2]
 80032c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	7c3b      	ldrb	r3, [r7, #16]
 80032d0:	f362 1304 	bfi	r3, r2, #4, #1
 80032d4:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80032d6:	f107 0210 	add.w	r2, r7, #16
 80032da:	2301      	movs	r3, #1
 80032dc:	2113      	movs	r1, #19
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fd9a 	bl	8002e18 <lsm6dsl_write_reg>
 80032e4:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0)
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80032ec:	f107 0220 	add.w	r2, r7, #32
 80032f0:	2301      	movs	r3, #1
 80032f2:	211a      	movs	r1, #26
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff fd77 	bl	8002de8 <lsm6dsl_read_reg>
 80032fa:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d111      	bne.n	8003326 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8003302:	78bb      	ldrb	r3, [r7, #2]
 8003304:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800330e:	f362 13c7 	bfi	r3, r2, #7, #1
 8003312:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003316:	f107 0220 	add.w	r2, r7, #32
 800331a:	2301      	movs	r3, #1
 800331c:	211a      	movs	r1, #26
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff fd7a 	bl	8002e18 <lsm6dsl_write_reg>
 8003324:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	2b00      	cmp	r3, #0
 800332a:	d158      	bne.n	80033de <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 800332c:	f107 020c 	add.w	r2, r7, #12
 8003330:	2301      	movs	r3, #1
 8003332:	2158      	movs	r1, #88	; 0x58
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7ff fd57 	bl	8002de8 <lsm6dsl_read_reg>
 800333a:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 800333c:	787b      	ldrb	r3, [r7, #1]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d141      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	f003 0310 	and.w	r3, r3, #16
 800334e:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8003350:	2b00      	cmp	r3, #0
 8003352:	d13b      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8003354:	787b      	ldrb	r3, [r7, #1]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800335c:	2b00      	cmp	r3, #0
 800335e:	d135      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8003360:	787b      	ldrb	r3, [r7, #1]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 8003368:	2b00      	cmp	r3, #0
 800336a:	d12f      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800336c:	787b      	ldrb	r3, [r7, #1]
 800336e:	f003 0308 	and.w	r3, r3, #8
 8003372:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8003374:	2b00      	cmp	r3, #0
 8003376:	d129      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 8003378:	787b      	ldrb	r3, [r7, #1]
 800337a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800337e:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8003380:	2b00      	cmp	r3, #0
 8003382:	d123      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8003384:	7d3b      	ldrb	r3, [r7, #20]
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11d      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8003390:	7d3b      	ldrb	r3, [r7, #20]
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 8003398:	2b00      	cmp	r3, #0
 800339a:	d117      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800339c:	7d3b      	ldrb	r3, [r7, #20]
 800339e:	f003 0320 	and.w	r3, r3, #32
 80033a2:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d111      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 80033a8:	7d3b      	ldrb	r3, [r7, #20]
 80033aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ae:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10b      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 80033b4:	7d3b      	ldrb	r3, [r7, #20]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 80033c0:	7d3b      	ldrb	r3, [r7, #20]
 80033c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80033c6:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d004      	beq.n	80033d6 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 80033cc:	7b3b      	ldrb	r3, [r7, #12]
 80033ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d2:	733b      	strb	r3, [r7, #12]
 80033d4:	e003      	b.n	80033de <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 80033d6:	7b3b      	ldrb	r3, [r7, #12]
 80033d8:	f36f 13c7 	bfc	r3, #7, #1
 80033dc:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d107      	bne.n	80033f4 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 80033e4:	f107 020c 	add.w	r2, r7, #12
 80033e8:	2301      	movs	r3, #1
 80033ea:	2158      	movs	r1, #88	; 0x58
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff fd13 	bl	8002e18 <lsm6dsl_write_reg>
 80033f2:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3728      	adds	r7, #40	; 0x28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b088      	sub	sp, #32
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003408:	f107 0214 	add.w	r2, r7, #20
 800340c:	2301      	movs	r3, #1
 800340e:	210d      	movs	r1, #13
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff fce9 	bl	8002de8 <lsm6dsl_read_reg>
 8003416:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	2b00      	cmp	r3, #0
 800341c:	f040 80c0 	bne.w	80035a0 <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8003420:	7d3b      	ldrb	r3, [r7, #20]
 8003422:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003426:	b2d9      	uxtb	r1, r3
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	7813      	ldrb	r3, [r2, #0]
 800342c:	f361 0300 	bfi	r3, r1, #0, #1
 8003430:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8003432:	7d3b      	ldrb	r3, [r7, #20]
 8003434:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003438:	b2d9      	uxtb	r1, r3
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	7813      	ldrb	r3, [r2, #0]
 800343e:	f361 0341 	bfi	r3, r1, #1, #1
 8003442:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8003444:	7d3b      	ldrb	r3, [r7, #20]
 8003446:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800344a:	b2d9      	uxtb	r1, r3
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	7813      	ldrb	r3, [r2, #0]
 8003450:	f361 0382 	bfi	r3, r1, #2, #1
 8003454:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8003456:	7d3b      	ldrb	r3, [r7, #20]
 8003458:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800345c:	b2d9      	uxtb	r1, r3
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	7813      	ldrb	r3, [r2, #0]
 8003462:	f361 03c3 	bfi	r3, r1, #3, #1
 8003466:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 8003468:	7d3b      	ldrb	r3, [r7, #20]
 800346a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800346e:	b2d9      	uxtb	r1, r3
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	7813      	ldrb	r3, [r2, #0]
 8003474:	f361 1304 	bfi	r3, r1, #4, #1
 8003478:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 800347a:	7d3b      	ldrb	r3, [r7, #20]
 800347c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003480:	b2d9      	uxtb	r1, r3
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	7813      	ldrb	r3, [r2, #0]
 8003486:	f361 1345 	bfi	r3, r1, #5, #1
 800348a:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800348c:	7d3b      	ldrb	r3, [r7, #20]
 800348e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003492:	b2d9      	uxtb	r1, r3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	7813      	ldrb	r3, [r2, #0]
 8003498:	f361 1386 	bfi	r3, r1, #6, #1
 800349c:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 800349e:	7d3b      	ldrb	r3, [r7, #20]
 80034a0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80034a4:	b2d9      	uxtb	r1, r3
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	7813      	ldrb	r3, [r2, #0]
 80034aa:	f361 13c7 	bfi	r3, r1, #7, #1
 80034ae:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80034b0:	f107 0210 	add.w	r2, r7, #16
 80034b4:	2301      	movs	r3, #1
 80034b6:	215e      	movs	r1, #94	; 0x5e
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff fc95 	bl	8002de8 <lsm6dsl_read_reg>
 80034be:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d16c      	bne.n	80035a0 <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 80034c6:	7c3b      	ldrb	r3, [r7, #16]
 80034c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034cc:	b2d9      	uxtb	r1, r3
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	7853      	ldrb	r3, [r2, #1]
 80034d2:	f361 0300 	bfi	r3, r1, #0, #1
 80034d6:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 80034d8:	7c3b      	ldrb	r3, [r7, #16]
 80034da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034de:	b2d9      	uxtb	r1, r3
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	7853      	ldrb	r3, [r2, #1]
 80034e4:	f361 0341 	bfi	r3, r1, #1, #1
 80034e8:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 80034ea:	7c3b      	ldrb	r3, [r7, #16]
 80034ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80034f0:	b2d9      	uxtb	r1, r3
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	7853      	ldrb	r3, [r2, #1]
 80034f6:	f361 0382 	bfi	r3, r1, #2, #1
 80034fa:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 80034fc:	7c3b      	ldrb	r3, [r7, #16]
 80034fe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003502:	b2d9      	uxtb	r1, r3
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	7853      	ldrb	r3, [r2, #1]
 8003508:	f361 03c3 	bfi	r3, r1, #3, #1
 800350c:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 800350e:	7c3b      	ldrb	r3, [r7, #16]
 8003510:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003514:	b2d9      	uxtb	r1, r3
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	7853      	ldrb	r3, [r2, #1]
 800351a:	f361 1304 	bfi	r3, r1, #4, #1
 800351e:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8003520:	7c3b      	ldrb	r3, [r7, #16]
 8003522:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003526:	b2d9      	uxtb	r1, r3
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	7853      	ldrb	r3, [r2, #1]
 800352c:	f361 1345 	bfi	r3, r1, #5, #1
 8003530:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8003532:	7c3b      	ldrb	r3, [r7, #16]
 8003534:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003538:	b2d9      	uxtb	r1, r3
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	7853      	ldrb	r3, [r2, #1]
 800353e:	f361 1386 	bfi	r3, r1, #6, #1
 8003542:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8003544:	7c3b      	ldrb	r3, [r7, #16]
 8003546:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800354a:	b2d9      	uxtb	r1, r3
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	7853      	ldrb	r3, [r2, #1]
 8003550:	f361 13c7 	bfi	r3, r1, #7, #1
 8003554:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003556:	f107 020c 	add.w	r2, r7, #12
 800355a:	2301      	movs	r3, #1
 800355c:	2113      	movs	r1, #19
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff fc42 	bl	8002de8 <lsm6dsl_read_reg>
 8003564:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d119      	bne.n	80035a0 <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800356c:	7b3b      	ldrb	r3, [r7, #12]
 800356e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003572:	b2d9      	uxtb	r1, r3
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	7893      	ldrb	r3, [r2, #2]
 8003578:	f361 0300 	bfi	r3, r1, #0, #1
 800357c:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800357e:	f107 0218 	add.w	r2, r7, #24
 8003582:	2301      	movs	r3, #1
 8003584:	211a      	movs	r1, #26
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff fc2e 	bl	8002de8 <lsm6dsl_read_reg>
 800358c:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 800358e:	7e3b      	ldrb	r3, [r7, #24]
 8003590:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003594:	b2d9      	uxtb	r1, r3
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	7893      	ldrb	r3, [r2, #2]
 800359a:	f361 0300 	bfi	r3, r1, #0, #1
 800359e:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 80035a0:	69fb      	ldr	r3, [r7, #28]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b084      	sub	sp, #16
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	460b      	mov	r3, r1
 80035b4:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80035b6:	f107 0208 	add.w	r2, r7, #8
 80035ba:	2301      	movs	r3, #1
 80035bc:	210a      	movs	r1, #10
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fc12 	bl	8002de8 <lsm6dsl_read_reg>
 80035c4:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d10f      	bne.n	80035ec <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	7a3b      	ldrb	r3, [r7, #8]
 80035d6:	f362 0302 	bfi	r3, r2, #0, #3
 80035da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80035dc:	f107 0208 	add.w	r2, r7, #8
 80035e0:	2301      	movs	r3, #1
 80035e2:	210a      	movs	r1, #10
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff fc17 	bl	8002e18 <lsm6dsl_write_reg>
 80035ea:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80035ec:	68fb      	ldr	r3, [r7, #12]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003600:	2003      	movs	r0, #3
 8003602:	f000 f961 	bl	80038c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003606:	2000      	movs	r0, #0
 8003608:	f000 f80e 	bl	8003628 <HAL_InitTick>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	71fb      	strb	r3, [r7, #7]
 8003616:	e001      	b.n	800361c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003618:	f7fe f976 	bl	8001908 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800361c:	79fb      	ldrb	r3, [r7, #7]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003634:	4b17      	ldr	r3, [pc, #92]	; (8003694 <HAL_InitTick+0x6c>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d023      	beq.n	8003684 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800363c:	4b16      	ldr	r3, [pc, #88]	; (8003698 <HAL_InitTick+0x70>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b14      	ldr	r3, [pc, #80]	; (8003694 <HAL_InitTick+0x6c>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	4619      	mov	r1, r3
 8003646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800364a:	fbb3 f3f1 	udiv	r3, r3, r1
 800364e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003652:	4618      	mov	r0, r3
 8003654:	f000 f96d 	bl	8003932 <HAL_SYSTICK_Config>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b0f      	cmp	r3, #15
 8003662:	d809      	bhi.n	8003678 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003664:	2200      	movs	r2, #0
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	f000 f937 	bl	80038de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003670:	4a0a      	ldr	r2, [pc, #40]	; (800369c <HAL_InitTick+0x74>)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e007      	b.n	8003688 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	e004      	b.n	8003688 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
 8003682:	e001      	b.n	8003688 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	20000024 	.word	0x20000024
 8003698:	2000000c 	.word	0x2000000c
 800369c:	20000020 	.word	0x20000020

080036a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036a4:	4b06      	ldr	r3, [pc, #24]	; (80036c0 <HAL_IncTick+0x20>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_IncTick+0x24>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4413      	add	r3, r2
 80036b0:	4a04      	ldr	r2, [pc, #16]	; (80036c4 <HAL_IncTick+0x24>)
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000024 	.word	0x20000024
 80036c4:	200019fc 	.word	0x200019fc

080036c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return uwTick;
 80036cc:	4b03      	ldr	r3, [pc, #12]	; (80036dc <HAL_GetTick+0x14>)
 80036ce:	681b      	ldr	r3, [r3, #0]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	200019fc 	.word	0x200019fc

080036e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036e8:	f7ff ffee 	bl	80036c8 <HAL_GetTick>
 80036ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d005      	beq.n	8003706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80036fa:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <HAL_Delay+0x44>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003706:	bf00      	nop
 8003708:	f7ff ffde 	bl	80036c8 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	429a      	cmp	r2, r3
 8003716:	d8f7      	bhi.n	8003708 <HAL_Delay+0x28>
  {
  }
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000024 	.word	0x20000024

08003728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f003 0307 	and.w	r3, r3, #7
 8003736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <__NVIC_SetPriorityGrouping+0x44>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003744:	4013      	ands	r3, r2
 8003746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375a:	4a04      	ldr	r2, [pc, #16]	; (800376c <__NVIC_SetPriorityGrouping+0x44>)
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	60d3      	str	r3, [r2, #12]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <__NVIC_GetPriorityGrouping+0x18>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	0a1b      	lsrs	r3, r3, #8
 800377a:	f003 0307 	and.w	r3, r3, #7
}
 800377e:	4618      	mov	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	e000ed00 	.word	0xe000ed00

0800378c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	4603      	mov	r3, r0
 8003794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	2b00      	cmp	r3, #0
 800379c:	db0b      	blt.n	80037b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	f003 021f 	and.w	r2, r3, #31
 80037a4:	4907      	ldr	r1, [pc, #28]	; (80037c4 <__NVIC_EnableIRQ+0x38>)
 80037a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2001      	movs	r0, #1
 80037ae:	fa00 f202 	lsl.w	r2, r0, r2
 80037b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000e100 	.word	0xe000e100

080037c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	6039      	str	r1, [r7, #0]
 80037d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	db0a      	blt.n	80037f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	490c      	ldr	r1, [pc, #48]	; (8003814 <__NVIC_SetPriority+0x4c>)
 80037e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e6:	0112      	lsls	r2, r2, #4
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	440b      	add	r3, r1
 80037ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f0:	e00a      	b.n	8003808 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4908      	ldr	r1, [pc, #32]	; (8003818 <__NVIC_SetPriority+0x50>)
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3b04      	subs	r3, #4
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	440b      	add	r3, r1
 8003806:	761a      	strb	r2, [r3, #24]
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000e100 	.word	0xe000e100
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800381c:	b480      	push	{r7}
 800381e:	b089      	sub	sp, #36	; 0x24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f1c3 0307 	rsb	r3, r3, #7
 8003836:	2b04      	cmp	r3, #4
 8003838:	bf28      	it	cs
 800383a:	2304      	movcs	r3, #4
 800383c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	3304      	adds	r3, #4
 8003842:	2b06      	cmp	r3, #6
 8003844:	d902      	bls.n	800384c <NVIC_EncodePriority+0x30>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	3b03      	subs	r3, #3
 800384a:	e000      	b.n	800384e <NVIC_EncodePriority+0x32>
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003850:	f04f 32ff 	mov.w	r2, #4294967295
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	fa02 f303 	lsl.w	r3, r2, r3
 800385a:	43da      	mvns	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	401a      	ands	r2, r3
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003864:	f04f 31ff 	mov.w	r1, #4294967295
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	fa01 f303 	lsl.w	r3, r1, r3
 800386e:	43d9      	mvns	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003874:	4313      	orrs	r3, r2
         );
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	; 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003894:	d301      	bcc.n	800389a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003896:	2301      	movs	r3, #1
 8003898:	e00f      	b.n	80038ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800389a:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <SysTick_Config+0x40>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3b01      	subs	r3, #1
 80038a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038a2:	210f      	movs	r1, #15
 80038a4:	f04f 30ff 	mov.w	r0, #4294967295
 80038a8:	f7ff ff8e 	bl	80037c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <SysTick_Config+0x40>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038b2:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <SysTick_Config+0x40>)
 80038b4:	2207      	movs	r2, #7
 80038b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	e000e010 	.word	0xe000e010

080038c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff ff29 	bl	8003728 <__NVIC_SetPriorityGrouping>
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b086      	sub	sp, #24
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	4603      	mov	r3, r0
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038ec:	2300      	movs	r3, #0
 80038ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038f0:	f7ff ff3e 	bl	8003770 <__NVIC_GetPriorityGrouping>
 80038f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	6978      	ldr	r0, [r7, #20]
 80038fc:	f7ff ff8e 	bl	800381c <NVIC_EncodePriority>
 8003900:	4602      	mov	r2, r0
 8003902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003906:	4611      	mov	r1, r2
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ff5d 	bl	80037c8 <__NVIC_SetPriority>
}
 800390e:	bf00      	nop
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	4603      	mov	r3, r0
 800391e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003924:	4618      	mov	r0, r3
 8003926:	f7ff ff31 	bl	800378c <__NVIC_EnableIRQ>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b082      	sub	sp, #8
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f7ff ffa2 	bl	8003884 <SysTick_Config>
 8003940:	4603      	mov	r3, r0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e054      	b.n	8003a08 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	7f5b      	ldrb	r3, [r3, #29]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7fd ffee 	bl	8001950 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2202      	movs	r2, #2
 8003978:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	791b      	ldrb	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10c      	bne.n	800399c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <HAL_CRC_Init+0xc4>)
 8003988:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 0218 	bic.w	r2, r2, #24
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	e00c      	b.n	80039b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6899      	ldr	r1, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	461a      	mov	r2, r3
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f834 	bl	8003a14 <HAL_CRCEx_Polynomial_Set>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e028      	b.n	8003a08 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	795b      	ldrb	r3, [r3, #5]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d105      	bne.n	80039ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f04f 32ff 	mov.w	r2, #4294967295
 80039c6:	611a      	str	r2, [r3, #16]
 80039c8:	e004      	b.n	80039d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6912      	ldr	r2, [r2, #16]
 80039d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	04c11db7 	.word	0x04c11db7

08003a14 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003a24:	231f      	movs	r3, #31
 8003a26:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003a28:	bf00      	nop
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1e5a      	subs	r2, r3, #1
 8003a2e:	613a      	str	r2, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d009      	beq.n	8003a48 <HAL_CRCEx_Polynomial_Set+0x34>
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b18      	cmp	r3, #24
 8003a4c:	d846      	bhi.n	8003adc <HAL_CRCEx_Polynomial_Set+0xc8>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003ae3 	.word	0x08003ae3
 8003a58:	08003add 	.word	0x08003add
 8003a5c:	08003add 	.word	0x08003add
 8003a60:	08003add 	.word	0x08003add
 8003a64:	08003add 	.word	0x08003add
 8003a68:	08003add 	.word	0x08003add
 8003a6c:	08003add 	.word	0x08003add
 8003a70:	08003add 	.word	0x08003add
 8003a74:	08003ad1 	.word	0x08003ad1
 8003a78:	08003add 	.word	0x08003add
 8003a7c:	08003add 	.word	0x08003add
 8003a80:	08003add 	.word	0x08003add
 8003a84:	08003add 	.word	0x08003add
 8003a88:	08003add 	.word	0x08003add
 8003a8c:	08003add 	.word	0x08003add
 8003a90:	08003add 	.word	0x08003add
 8003a94:	08003ac5 	.word	0x08003ac5
 8003a98:	08003add 	.word	0x08003add
 8003a9c:	08003add 	.word	0x08003add
 8003aa0:	08003add 	.word	0x08003add
 8003aa4:	08003add 	.word	0x08003add
 8003aa8:	08003add 	.word	0x08003add
 8003aac:	08003add 	.word	0x08003add
 8003ab0:	08003add 	.word	0x08003add
 8003ab4:	08003ab9 	.word	0x08003ab9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d913      	bls.n	8003ae6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ac2:	e010      	b.n	8003ae6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	2b07      	cmp	r3, #7
 8003ac8:	d90f      	bls.n	8003aea <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ace:	e00c      	b.n	8003aea <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	2b0f      	cmp	r3, #15
 8003ad4:	d90b      	bls.n	8003aee <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ada:	e008      	b.n	8003aee <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae0:	e006      	b.n	8003af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003aee:	bf00      	nop
  }
  if (status == HAL_OK)
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10d      	bne.n	8003b12 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 0118 	bic.w	r1, r3, #24
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	371c      	adds	r7, #28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e0ac      	b.n	8003c8c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f8b2 	bl	8003ca0 <DFSDM_GetChannelFromInstance>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4a55      	ldr	r2, [pc, #340]	; (8003c94 <HAL_DFSDM_ChannelInit+0x174>)
 8003b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e09f      	b.n	8003c8c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fd ff1f 	bl	8001990 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003b52:	4b51      	ldr	r3, [pc, #324]	; (8003c98 <HAL_DFSDM_ChannelInit+0x178>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3301      	adds	r3, #1
 8003b58:	4a4f      	ldr	r2, [pc, #316]	; (8003c98 <HAL_DFSDM_ChannelInit+0x178>)
 8003b5a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003b5c:	4b4e      	ldr	r3, [pc, #312]	; (8003c98 <HAL_DFSDM_ChannelInit+0x178>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d125      	bne.n	8003bb0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003b64:	4b4d      	ldr	r3, [pc, #308]	; (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a4c      	ldr	r2, [pc, #304]	; (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b6e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003b70:	4b4a      	ldr	r3, [pc, #296]	; (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4948      	ldr	r1, [pc, #288]	; (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003b7e:	4b47      	ldr	r3, [pc, #284]	; (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a46      	ldr	r2, [pc, #280]	; (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b84:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003b88:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	791b      	ldrb	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d108      	bne.n	8003ba4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003b92:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	493f      	ldr	r1, [pc, #252]	; (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003ba4:	4b3d      	ldr	r3, [pc, #244]	; (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a3c      	ldr	r2, [pc, #240]	; (8003c9c <HAL_DFSDM_ChannelInit+0x17c>)
 8003baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003bae:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003bbe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6819      	ldr	r1, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bce:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003bd4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 020f 	bic.w	r2, r2, #15
 8003bec:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6819      	ldr	r1, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003c14:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6899      	ldr	r1, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	3b01      	subs	r3, #1
 8003c26:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003c28:	431a      	orrs	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f002 0207 	and.w	r2, r2, #7
 8003c40:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 f810 	bl	8003ca0 <DFSDM_GetChannelFromInstance>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4904      	ldr	r1, [pc, #16]	; (8003c94 <HAL_DFSDM_ChannelInit+0x174>)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20001a04 	.word	0x20001a04
 8003c98:	20001a00 	.word	0x20001a00
 8003c9c:	40016000 	.word	0x40016000

08003ca0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <DFSDM_GetChannelFromInstance+0x7c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d102      	bne.n	8003cb6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	e02b      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a19      	ldr	r2, [pc, #100]	; (8003d20 <DFSDM_GetChannelFromInstance+0x80>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d102      	bne.n	8003cc4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	e024      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a17      	ldr	r2, [pc, #92]	; (8003d24 <DFSDM_GetChannelFromInstance+0x84>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d102      	bne.n	8003cd2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	e01d      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <DFSDM_GetChannelFromInstance+0x88>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d102      	bne.n	8003ce0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003cda:	2304      	movs	r3, #4
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	e016      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a12      	ldr	r2, [pc, #72]	; (8003d2c <DFSDM_GetChannelFromInstance+0x8c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d102      	bne.n	8003cee <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003ce8:	2305      	movs	r3, #5
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e00f      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a0f      	ldr	r2, [pc, #60]	; (8003d30 <DFSDM_GetChannelFromInstance+0x90>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d102      	bne.n	8003cfc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003cf6:	2306      	movs	r3, #6
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	e008      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <DFSDM_GetChannelFromInstance+0x94>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d102      	bne.n	8003d0a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003d04:	2307      	movs	r3, #7
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e001      	b.n	8003d0e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40016000 	.word	0x40016000
 8003d20:	40016020 	.word	0x40016020
 8003d24:	40016040 	.word	0x40016040
 8003d28:	40016080 	.word	0x40016080
 8003d2c:	400160a0 	.word	0x400160a0
 8003d30:	400160c0 	.word	0x400160c0
 8003d34:	400160e0 	.word	0x400160e0

08003d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b087      	sub	sp, #28
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d42:	2300      	movs	r3, #0
 8003d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d46:	e17f      	b.n	8004048 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	fa01 f303 	lsl.w	r3, r1, r3
 8003d54:	4013      	ands	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8171 	beq.w	8004042 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0303 	and.w	r3, r3, #3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d005      	beq.n	8003d78 <HAL_GPIO_Init+0x40>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d130      	bne.n	8003dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	2203      	movs	r2, #3
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003dae:	2201      	movs	r2, #1
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	fa02 f303 	lsl.w	r3, r2, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4013      	ands	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 0201 	and.w	r2, r3, #1
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d118      	bne.n	8003e18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003dec:	2201      	movs	r2, #1
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	08db      	lsrs	r3, r3, #3
 8003e02:	f003 0201 	and.w	r2, r3, #1
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 0303 	and.w	r3, r3, #3
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d017      	beq.n	8003e54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	2203      	movs	r2, #3
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	43db      	mvns	r3, r3
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4013      	ands	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0303 	and.w	r3, r3, #3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d123      	bne.n	8003ea8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	08da      	lsrs	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3208      	adds	r2, #8
 8003e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	220f      	movs	r2, #15
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4013      	ands	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	08da      	lsrs	r2, r3, #3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3208      	adds	r2, #8
 8003ea2:	6939      	ldr	r1, [r7, #16]
 8003ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	2203      	movs	r2, #3
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 0203 	and.w	r2, r3, #3
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80ac 	beq.w	8004042 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eea:	4b5f      	ldr	r3, [pc, #380]	; (8004068 <HAL_GPIO_Init+0x330>)
 8003eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eee:	4a5e      	ldr	r2, [pc, #376]	; (8004068 <HAL_GPIO_Init+0x330>)
 8003ef0:	f043 0301 	orr.w	r3, r3, #1
 8003ef4:	6613      	str	r3, [r2, #96]	; 0x60
 8003ef6:	4b5c      	ldr	r3, [pc, #368]	; (8004068 <HAL_GPIO_Init+0x330>)
 8003ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f02:	4a5a      	ldr	r2, [pc, #360]	; (800406c <HAL_GPIO_Init+0x334>)
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	089b      	lsrs	r3, r3, #2
 8003f08:	3302      	adds	r3, #2
 8003f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f003 0303 	and.w	r3, r3, #3
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	220f      	movs	r2, #15
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4013      	ands	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f2c:	d025      	beq.n	8003f7a <HAL_GPIO_Init+0x242>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a4f      	ldr	r2, [pc, #316]	; (8004070 <HAL_GPIO_Init+0x338>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d01f      	beq.n	8003f76 <HAL_GPIO_Init+0x23e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <HAL_GPIO_Init+0x33c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d019      	beq.n	8003f72 <HAL_GPIO_Init+0x23a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a4d      	ldr	r2, [pc, #308]	; (8004078 <HAL_GPIO_Init+0x340>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <HAL_GPIO_Init+0x236>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a4c      	ldr	r2, [pc, #304]	; (800407c <HAL_GPIO_Init+0x344>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00d      	beq.n	8003f6a <HAL_GPIO_Init+0x232>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a4b      	ldr	r2, [pc, #300]	; (8004080 <HAL_GPIO_Init+0x348>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <HAL_GPIO_Init+0x22e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a4a      	ldr	r2, [pc, #296]	; (8004084 <HAL_GPIO_Init+0x34c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <HAL_GPIO_Init+0x22a>
 8003f5e:	2306      	movs	r3, #6
 8003f60:	e00c      	b.n	8003f7c <HAL_GPIO_Init+0x244>
 8003f62:	2307      	movs	r3, #7
 8003f64:	e00a      	b.n	8003f7c <HAL_GPIO_Init+0x244>
 8003f66:	2305      	movs	r3, #5
 8003f68:	e008      	b.n	8003f7c <HAL_GPIO_Init+0x244>
 8003f6a:	2304      	movs	r3, #4
 8003f6c:	e006      	b.n	8003f7c <HAL_GPIO_Init+0x244>
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e004      	b.n	8003f7c <HAL_GPIO_Init+0x244>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e002      	b.n	8003f7c <HAL_GPIO_Init+0x244>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <HAL_GPIO_Init+0x244>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	f002 0203 	and.w	r2, r2, #3
 8003f82:	0092      	lsls	r2, r2, #2
 8003f84:	4093      	lsls	r3, r2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f8c:	4937      	ldr	r1, [pc, #220]	; (800406c <HAL_GPIO_Init+0x334>)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	089b      	lsrs	r3, r3, #2
 8003f92:	3302      	adds	r3, #2
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f9a:	4b3b      	ldr	r3, [pc, #236]	; (8004088 <HAL_GPIO_Init+0x350>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fbe:	4a32      	ldr	r2, [pc, #200]	; (8004088 <HAL_GPIO_Init+0x350>)
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fc4:	4b30      	ldr	r3, [pc, #192]	; (8004088 <HAL_GPIO_Init+0x350>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fe8:	4a27      	ldr	r2, [pc, #156]	; (8004088 <HAL_GPIO_Init+0x350>)
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003fee:	4b26      	ldr	r3, [pc, #152]	; (8004088 <HAL_GPIO_Init+0x350>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004012:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <HAL_GPIO_Init+0x350>)
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004018:	4b1b      	ldr	r3, [pc, #108]	; (8004088 <HAL_GPIO_Init+0x350>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	43db      	mvns	r3, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4013      	ands	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800403c:	4a12      	ldr	r2, [pc, #72]	; (8004088 <HAL_GPIO_Init+0x350>)
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	3301      	adds	r3, #1
 8004046:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	fa22 f303 	lsr.w	r3, r2, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	f47f ae78 	bne.w	8003d48 <HAL_GPIO_Init+0x10>
  }
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	40010000 	.word	0x40010000
 8004070:	48000400 	.word	0x48000400
 8004074:	48000800 	.word	0x48000800
 8004078:	48000c00 	.word	0x48000c00
 800407c:	48001000 	.word	0x48001000
 8004080:	48001400 	.word	0x48001400
 8004084:	48001800 	.word	0x48001800
 8004088:	40010400 	.word	0x40010400

0800408c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800409a:	e0cd      	b.n	8004238 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800409c:	2201      	movs	r2, #1
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	4013      	ands	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80c0 	beq.w	8004232 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80040b2:	4a68      	ldr	r2, [pc, #416]	; (8004254 <HAL_GPIO_DeInit+0x1c8>)
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	089b      	lsrs	r3, r3, #2
 80040b8:	3302      	adds	r3, #2
 80040ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f003 0303 	and.w	r3, r3, #3
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	220f      	movs	r2, #15
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80040da:	d025      	beq.n	8004128 <HAL_GPIO_DeInit+0x9c>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a5e      	ldr	r2, [pc, #376]	; (8004258 <HAL_GPIO_DeInit+0x1cc>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d01f      	beq.n	8004124 <HAL_GPIO_DeInit+0x98>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a5d      	ldr	r2, [pc, #372]	; (800425c <HAL_GPIO_DeInit+0x1d0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d019      	beq.n	8004120 <HAL_GPIO_DeInit+0x94>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a5c      	ldr	r2, [pc, #368]	; (8004260 <HAL_GPIO_DeInit+0x1d4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d013      	beq.n	800411c <HAL_GPIO_DeInit+0x90>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a5b      	ldr	r2, [pc, #364]	; (8004264 <HAL_GPIO_DeInit+0x1d8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00d      	beq.n	8004118 <HAL_GPIO_DeInit+0x8c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a5a      	ldr	r2, [pc, #360]	; (8004268 <HAL_GPIO_DeInit+0x1dc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <HAL_GPIO_DeInit+0x88>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a59      	ldr	r2, [pc, #356]	; (800426c <HAL_GPIO_DeInit+0x1e0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d101      	bne.n	8004110 <HAL_GPIO_DeInit+0x84>
 800410c:	2306      	movs	r3, #6
 800410e:	e00c      	b.n	800412a <HAL_GPIO_DeInit+0x9e>
 8004110:	2307      	movs	r3, #7
 8004112:	e00a      	b.n	800412a <HAL_GPIO_DeInit+0x9e>
 8004114:	2305      	movs	r3, #5
 8004116:	e008      	b.n	800412a <HAL_GPIO_DeInit+0x9e>
 8004118:	2304      	movs	r3, #4
 800411a:	e006      	b.n	800412a <HAL_GPIO_DeInit+0x9e>
 800411c:	2303      	movs	r3, #3
 800411e:	e004      	b.n	800412a <HAL_GPIO_DeInit+0x9e>
 8004120:	2302      	movs	r3, #2
 8004122:	e002      	b.n	800412a <HAL_GPIO_DeInit+0x9e>
 8004124:	2301      	movs	r3, #1
 8004126:	e000      	b.n	800412a <HAL_GPIO_DeInit+0x9e>
 8004128:	2300      	movs	r3, #0
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	f002 0203 	and.w	r2, r2, #3
 8004130:	0092      	lsls	r2, r2, #2
 8004132:	4093      	lsls	r3, r2
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	429a      	cmp	r2, r3
 8004138:	d132      	bne.n	80041a0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800413a:	4b4d      	ldr	r3, [pc, #308]	; (8004270 <HAL_GPIO_DeInit+0x1e4>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	43db      	mvns	r3, r3
 8004142:	494b      	ldr	r1, [pc, #300]	; (8004270 <HAL_GPIO_DeInit+0x1e4>)
 8004144:	4013      	ands	r3, r2
 8004146:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004148:	4b49      	ldr	r3, [pc, #292]	; (8004270 <HAL_GPIO_DeInit+0x1e4>)
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	4947      	ldr	r1, [pc, #284]	; (8004270 <HAL_GPIO_DeInit+0x1e4>)
 8004152:	4013      	ands	r3, r2
 8004154:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004156:	4b46      	ldr	r3, [pc, #280]	; (8004270 <HAL_GPIO_DeInit+0x1e4>)
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	43db      	mvns	r3, r3
 800415e:	4944      	ldr	r1, [pc, #272]	; (8004270 <HAL_GPIO_DeInit+0x1e4>)
 8004160:	4013      	ands	r3, r2
 8004162:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8004164:	4b42      	ldr	r3, [pc, #264]	; (8004270 <HAL_GPIO_DeInit+0x1e4>)
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	43db      	mvns	r3, r3
 800416c:	4940      	ldr	r1, [pc, #256]	; (8004270 <HAL_GPIO_DeInit+0x1e4>)
 800416e:	4013      	ands	r3, r2
 8004170:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	220f      	movs	r2, #15
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004182:	4a34      	ldr	r2, [pc, #208]	; (8004254 <HAL_GPIO_DeInit+0x1c8>)
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	089b      	lsrs	r3, r3, #2
 8004188:	3302      	adds	r3, #2
 800418a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	43da      	mvns	r2, r3
 8004192:	4830      	ldr	r0, [pc, #192]	; (8004254 <HAL_GPIO_DeInit+0x1c8>)
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	089b      	lsrs	r3, r3, #2
 8004198:	400a      	ands	r2, r1
 800419a:	3302      	adds	r3, #2
 800419c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2103      	movs	r1, #3
 80041aa:	fa01 f303 	lsl.w	r3, r1, r3
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	08da      	lsrs	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3208      	adds	r2, #8
 80041bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	220f      	movs	r2, #15
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	08d2      	lsrs	r2, r2, #3
 80041d4:	4019      	ands	r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3208      	adds	r2, #8
 80041da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2103      	movs	r1, #3
 80041e8:	fa01 f303 	lsl.w	r3, r1, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	401a      	ands	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	2101      	movs	r1, #1
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	2103      	movs	r1, #3
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	401a      	ands	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004222:	2101      	movs	r1, #1
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	401a      	ands	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	3301      	adds	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	f47f af2b 	bne.w	800409c <HAL_GPIO_DeInit+0x10>
  }
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	40010000 	.word	0x40010000
 8004258:	48000400 	.word	0x48000400
 800425c:	48000800 	.word	0x48000800
 8004260:	48000c00 	.word	0x48000c00
 8004264:	48001000 	.word	0x48001000
 8004268:	48001400 	.word	0x48001400
 800426c:	48001800 	.word	0x48001800
 8004270:	40010400 	.word	0x40010400

08004274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	807b      	strh	r3, [r7, #2]
 8004280:	4613      	mov	r3, r2
 8004282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004284:	787b      	ldrb	r3, [r7, #1]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800428a:	887a      	ldrh	r2, [r7, #2]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004290:	e002      	b.n	8004298 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004292:	887a      	ldrh	r2, [r7, #2]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042b6:	887a      	ldrh	r2, [r7, #2]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4013      	ands	r3, r2
 80042bc:	041a      	lsls	r2, r3, #16
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	43d9      	mvns	r1, r3
 80042c2:	887b      	ldrh	r3, [r7, #2]
 80042c4:	400b      	ands	r3, r1
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	619a      	str	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	4603      	mov	r3, r0
 80042e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042e2:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042e4:	695a      	ldr	r2, [r3, #20]
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d006      	beq.n	80042fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ee:	4a05      	ldr	r2, [pc, #20]	; (8004304 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fa26 	bl	8001748 <HAL_GPIO_EXTI_Callback>
  }
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40010400 	.word	0x40010400

08004308 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e081      	b.n	800441e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8a8 	bl	8004484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2224      	movs	r2, #36	; 0x24
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0201 	bic.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004358:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004368:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d107      	bne.n	8004382 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800437e:	609a      	str	r2, [r3, #8]
 8004380:	e006      	b.n	8004390 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800438e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d104      	bne.n	80043a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691a      	ldr	r2, [r3, #16]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	69d9      	ldr	r1, [r3, #28]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1a      	ldr	r2, [r3, #32]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e021      	b.n	800447c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2224      	movs	r2, #36	; 0x24
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f022 0201 	bic.w	r2, r2, #1
 800444e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f000 f821 	bl	8004498 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af02      	add	r7, sp, #8
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	4608      	mov	r0, r1
 80044b6:	4611      	mov	r1, r2
 80044b8:	461a      	mov	r2, r3
 80044ba:	4603      	mov	r3, r0
 80044bc:	817b      	strh	r3, [r7, #10]
 80044be:	460b      	mov	r3, r1
 80044c0:	813b      	strh	r3, [r7, #8]
 80044c2:	4613      	mov	r3, r2
 80044c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	f040 80f9 	bne.w	80046c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_I2C_Mem_Write+0x34>
 80044da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0ed      	b.n	80046c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Mem_Write+0x4e>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e0e6      	b.n	80046c8 <HAL_I2C_Mem_Write+0x21c>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004502:	f7ff f8e1 	bl	80036c8 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2319      	movs	r3, #25
 800450e:	2201      	movs	r2, #1
 8004510:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fadd 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0d1      	b.n	80046c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2221      	movs	r2, #33	; 0x21
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2240      	movs	r2, #64	; 0x40
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6a3a      	ldr	r2, [r7, #32]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004544:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800454c:	88f8      	ldrh	r0, [r7, #6]
 800454e:	893a      	ldrh	r2, [r7, #8]
 8004550:	8979      	ldrh	r1, [r7, #10]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	4603      	mov	r3, r0
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f9ed 	bl	800493c <I2C_RequestMemoryWrite>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0a9      	b.n	80046c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004578:	b29b      	uxth	r3, r3
 800457a:	2bff      	cmp	r3, #255	; 0xff
 800457c:	d90e      	bls.n	800459c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	22ff      	movs	r2, #255	; 0xff
 8004582:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004588:	b2da      	uxtb	r2, r3
 800458a:	8979      	ldrh	r1, [r7, #10]
 800458c:	2300      	movs	r3, #0
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fc45 	bl	8004e24 <I2C_TransferConfig>
 800459a:	e00f      	b.n	80045bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	8979      	ldrh	r1, [r7, #10]
 80045ae:	2300      	movs	r3, #0
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fc34 	bl	8004e24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fac7 	bl	8004b54 <I2C_WaitOnTXISFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e07b      	b.n	80046c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d034      	beq.n	8004674 <HAL_I2C_Mem_Write+0x1c8>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d130      	bne.n	8004674 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	2200      	movs	r2, #0
 800461a:	2180      	movs	r1, #128	; 0x80
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fa59 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e04d      	b.n	80046c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004630:	b29b      	uxth	r3, r3
 8004632:	2bff      	cmp	r3, #255	; 0xff
 8004634:	d90e      	bls.n	8004654 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	22ff      	movs	r2, #255	; 0xff
 800463a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	b2da      	uxtb	r2, r3
 8004642:	8979      	ldrh	r1, [r7, #10]
 8004644:	2300      	movs	r3, #0
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 fbe9 	bl	8004e24 <I2C_TransferConfig>
 8004652:	e00f      	b.n	8004674 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004662:	b2da      	uxtb	r2, r3
 8004664:	8979      	ldrh	r1, [r7, #10]
 8004666:	2300      	movs	r3, #0
 8004668:	9300      	str	r3, [sp, #0]
 800466a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fbd8 	bl	8004e24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d19e      	bne.n	80045bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 faa6 	bl	8004bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e01a      	b.n	80046c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2220      	movs	r2, #32
 8004698:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	4b0a      	ldr	r3, [pc, #40]	; (80046d0 <HAL_I2C_Mem_Write+0x224>)
 80046a6:	400b      	ands	r3, r1
 80046a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e000      	b.n	80046c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
  }
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	fe00e800 	.word	0xfe00e800

080046d4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af02      	add	r7, sp, #8
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	4608      	mov	r0, r1
 80046de:	4611      	mov	r1, r2
 80046e0:	461a      	mov	r2, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	817b      	strh	r3, [r7, #10]
 80046e6:	460b      	mov	r3, r1
 80046e8:	813b      	strh	r3, [r7, #8]
 80046ea:	4613      	mov	r3, r2
 80046ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	f040 80fd 	bne.w	80048f6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_I2C_Mem_Read+0x34>
 8004702:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004704:	2b00      	cmp	r3, #0
 8004706:	d105      	bne.n	8004714 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800470e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0f1      	b.n	80048f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_I2C_Mem_Read+0x4e>
 800471e:	2302      	movs	r3, #2
 8004720:	e0ea      	b.n	80048f8 <HAL_I2C_Mem_Read+0x224>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800472a:	f7fe ffcd 	bl	80036c8 <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	2319      	movs	r3, #25
 8004736:	2201      	movs	r2, #1
 8004738:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f9c9 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0d5      	b.n	80048f8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2222      	movs	r2, #34	; 0x22
 8004750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2240      	movs	r2, #64	; 0x40
 8004758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a3a      	ldr	r2, [r7, #32]
 8004766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800476c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004774:	88f8      	ldrh	r0, [r7, #6]
 8004776:	893a      	ldrh	r2, [r7, #8]
 8004778:	8979      	ldrh	r1, [r7, #10]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	9301      	str	r3, [sp, #4]
 800477e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	4603      	mov	r3, r0
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f92d 	bl	80049e4 <I2C_RequestMemoryRead>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d005      	beq.n	800479c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0ad      	b.n	80048f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	2bff      	cmp	r3, #255	; 0xff
 80047a4:	d90e      	bls.n	80047c4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	22ff      	movs	r2, #255	; 0xff
 80047aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	8979      	ldrh	r1, [r7, #10]
 80047b4:	4b52      	ldr	r3, [pc, #328]	; (8004900 <HAL_I2C_Mem_Read+0x22c>)
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fb31 	bl	8004e24 <I2C_TransferConfig>
 80047c2:	e00f      	b.n	80047e4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d2:	b2da      	uxtb	r2, r3
 80047d4:	8979      	ldrh	r1, [r7, #10]
 80047d6:	4b4a      	ldr	r3, [pc, #296]	; (8004900 <HAL_I2C_Mem_Read+0x22c>)
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fb20 	bl	8004e24 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	2200      	movs	r2, #0
 80047ec:	2104      	movs	r1, #4
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f000 f970 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e07c      	b.n	80048f8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004826:	b29b      	uxth	r3, r3
 8004828:	3b01      	subs	r3, #1
 800482a:	b29a      	uxth	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d034      	beq.n	80048a4 <HAL_I2C_Mem_Read+0x1d0>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483e:	2b00      	cmp	r3, #0
 8004840:	d130      	bne.n	80048a4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	2200      	movs	r2, #0
 800484a:	2180      	movs	r1, #128	; 0x80
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f941 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e04d      	b.n	80048f8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	2bff      	cmp	r3, #255	; 0xff
 8004864:	d90e      	bls.n	8004884 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	22ff      	movs	r2, #255	; 0xff
 800486a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	b2da      	uxtb	r2, r3
 8004872:	8979      	ldrh	r1, [r7, #10]
 8004874:	2300      	movs	r3, #0
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 fad1 	bl	8004e24 <I2C_TransferConfig>
 8004882:	e00f      	b.n	80048a4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004892:	b2da      	uxtb	r2, r3
 8004894:	8979      	ldrh	r1, [r7, #10]
 8004896:	2300      	movs	r3, #0
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 fac0 	bl	8004e24 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d19a      	bne.n	80047e4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f98e 	bl	8004bd4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e01a      	b.n	80048f8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2220      	movs	r2, #32
 80048c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6859      	ldr	r1, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <HAL_I2C_Mem_Read+0x230>)
 80048d6:	400b      	ands	r3, r1
 80048d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	e000      	b.n	80048f8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80048f6:	2302      	movs	r3, #2
  }
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	80002400 	.word	0x80002400
 8004904:	fe00e800 	.word	0xfe00e800

08004908 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004916:	b2db      	uxtb	r3, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af02      	add	r7, sp, #8
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	4608      	mov	r0, r1
 8004946:	4611      	mov	r1, r2
 8004948:	461a      	mov	r2, r3
 800494a:	4603      	mov	r3, r0
 800494c:	817b      	strh	r3, [r7, #10]
 800494e:	460b      	mov	r3, r1
 8004950:	813b      	strh	r3, [r7, #8]
 8004952:	4613      	mov	r3, r2
 8004954:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	b2da      	uxtb	r2, r3
 800495a:	8979      	ldrh	r1, [r7, #10]
 800495c:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <I2C_RequestMemoryWrite+0xa4>)
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fa5d 	bl	8004e24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	69b9      	ldr	r1, [r7, #24]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f8f0 	bl	8004b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e02c      	b.n	80049d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d105      	bne.n	8004990 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004984:	893b      	ldrh	r3, [r7, #8]
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	629a      	str	r2, [r3, #40]	; 0x28
 800498e:	e015      	b.n	80049bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004990:	893b      	ldrh	r3, [r7, #8]
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	b29b      	uxth	r3, r3
 8004996:	b2da      	uxtb	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	69b9      	ldr	r1, [r7, #24]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f8d6 	bl	8004b54 <I2C_WaitOnTXISFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d001      	beq.n	80049b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e012      	b.n	80049d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049b2:	893b      	ldrh	r3, [r7, #8]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	9300      	str	r3, [sp, #0]
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	2200      	movs	r2, #0
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f884 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	80002000 	.word	0x80002000

080049e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	817b      	strh	r3, [r7, #10]
 80049f6:	460b      	mov	r3, r1
 80049f8:	813b      	strh	r3, [r7, #8]
 80049fa:	4613      	mov	r3, r2
 80049fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	8979      	ldrh	r1, [r7, #10]
 8004a04:	4b20      	ldr	r3, [pc, #128]	; (8004a88 <I2C_RequestMemoryRead+0xa4>)
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	2300      	movs	r3, #0
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fa0a 	bl	8004e24 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a10:	69fa      	ldr	r2, [r7, #28]
 8004a12:	69b9      	ldr	r1, [r7, #24]
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f89d 	bl	8004b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e02c      	b.n	8004a7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a24:	88fb      	ldrh	r3, [r7, #6]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d105      	bne.n	8004a36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a2a:	893b      	ldrh	r3, [r7, #8]
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28
 8004a34:	e015      	b.n	8004a62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a36:	893b      	ldrh	r3, [r7, #8]
 8004a38:	0a1b      	lsrs	r3, r3, #8
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a44:	69fa      	ldr	r2, [r7, #28]
 8004a46:	69b9      	ldr	r1, [r7, #24]
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f883 	bl	8004b54 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e012      	b.n	8004a7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a58:	893b      	ldrh	r3, [r7, #8]
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2140      	movs	r1, #64	; 0x40
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f831 	bl	8004ad4 <I2C_WaitOnFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e000      	b.n	8004a7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	80002000 	.word	0x80002000

08004a8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d103      	bne.n	8004aaa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d007      	beq.n	8004ac8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	619a      	str	r2, [r3, #24]
  }
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae4:	e022      	b.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aec:	d01e      	beq.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aee:	f7fe fdeb 	bl	80036c8 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d302      	bcc.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d113      	bne.n	8004b2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b08:	f043 0220 	orr.w	r2, r3, #32
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e00f      	b.n	8004b4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4013      	ands	r3, r2
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d0cd      	beq.n	8004ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b60:	e02c      	b.n	8004bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f870 	bl	8004c4c <I2C_IsErrorOccurred>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e02a      	b.n	8004bcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d01e      	beq.n	8004bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7e:	f7fe fda3 	bl	80036c8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d302      	bcc.n	8004b94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d113      	bne.n	8004bbc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e007      	b.n	8004bcc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d1cb      	bne.n	8004b62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b084      	sub	sp, #16
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004be0:	e028      	b.n	8004c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68b9      	ldr	r1, [r7, #8]
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f830 	bl	8004c4c <I2C_IsErrorOccurred>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e026      	b.n	8004c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf6:	f7fe fd67 	bl	80036c8 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d302      	bcc.n	8004c0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d113      	bne.n	8004c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e007      	b.n	8004c44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d1cf      	bne.n	8004be2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d075      	beq.n	8004d64 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c80:	e056      	b.n	8004d30 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d052      	beq.n	8004d30 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c8a:	f7fe fd1d 	bl	80036c8 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <I2C_IsErrorOccurred+0x54>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d147      	bne.n	8004d30 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004caa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cb2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc2:	d12e      	bne.n	8004d22 <I2C_IsErrorOccurred+0xd6>
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cca:	d02a      	beq.n	8004d22 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004ccc:	7cfb      	ldrb	r3, [r7, #19]
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	d027      	beq.n	8004d22 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004ce2:	f7fe fcf1 	bl	80036c8 <HAL_GetTick>
 8004ce6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce8:	e01b      	b.n	8004d22 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004cea:	f7fe fced 	bl	80036c8 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b19      	cmp	r3, #25
 8004cf6:	d914      	bls.n	8004d22 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	f043 0220 	orr.w	r2, r3, #32
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d1dc      	bne.n	8004cea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f003 0320 	and.w	r3, r3, #32
 8004d3a:	2b20      	cmp	r3, #32
 8004d3c:	d003      	beq.n	8004d46 <I2C_IsErrorOccurred+0xfa>
 8004d3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d09d      	beq.n	8004c82 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2220      	movs	r2, #32
 8004d54:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	f043 0304 	orr.w	r3, r3, #4
 8004d5c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00b      	beq.n	8004db0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	f043 0308 	orr.w	r3, r3, #8
 8004d9e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004da8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	f043 0302 	orr.w	r3, r3, #2
 8004dc0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01c      	beq.n	8004e14 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff fe56 	bl	8004a8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <I2C_IsErrorOccurred+0x1d4>)
 8004dec:	400b      	ands	r3, r1
 8004dee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	fe00e800 	.word	0xfe00e800

08004e24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607b      	str	r3, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	817b      	strh	r3, [r7, #10]
 8004e32:	4613      	mov	r3, r2
 8004e34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e36:	897b      	ldrh	r3, [r7, #10]
 8004e38:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e3c:	7a7b      	ldrb	r3, [r7, #9]
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e44:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e52:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	0d5b      	lsrs	r3, r3, #21
 8004e5e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004e62:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <I2C_TransferConfig+0x60>)
 8004e64:	430b      	orrs	r3, r1
 8004e66:	43db      	mvns	r3, r3
 8004e68:	ea02 0103 	and.w	r1, r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	03ff63ff 	.word	0x03ff63ff

08004e88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	d138      	bne.n	8004f10 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e032      	b.n	8004f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	; 0x24
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0201 	bic.w	r2, r2, #1
 8004eca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004eda:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6819      	ldr	r1, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b20      	cmp	r3, #32
 8004f32:	d139      	bne.n	8004fa8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e033      	b.n	8004faa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2224      	movs	r2, #36	; 0x24
 8004f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f70:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f042 0201 	orr.w	r2, r2, #1
 8004f92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fb8:	b08f      	sub	sp, #60	; 0x3c
 8004fba:	af0a      	add	r7, sp, #40	; 0x28
 8004fbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e116      	b.n	80051f6 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fc fe64 	bl	8001cb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2203      	movs	r2, #3
 8004fec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f002 fb43 	bl	8007692 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	687e      	ldr	r6, [r7, #4]
 8005014:	466d      	mov	r5, sp
 8005016:	f106 0410 	add.w	r4, r6, #16
 800501a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800501c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800501e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005020:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005022:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005026:	e885 0003 	stmia.w	r5, {r0, r1}
 800502a:	1d33      	adds	r3, r6, #4
 800502c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800502e:	6838      	ldr	r0, [r7, #0]
 8005030:	f002 fb03 	bl	800763a <USB_CoreInit>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d005      	beq.n	8005046 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2202      	movs	r2, #2
 800503e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e0d7      	b.n	80051f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2100      	movs	r1, #0
 800504c:	4618      	mov	r0, r3
 800504e:	f002 fb31 	bl	80076b4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005052:	2300      	movs	r3, #0
 8005054:	73fb      	strb	r3, [r7, #15]
 8005056:	e04a      	b.n	80050ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005058:	7bfa      	ldrb	r2, [r7, #15]
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	333d      	adds	r3, #61	; 0x3d
 8005068:	2201      	movs	r2, #1
 800506a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800506c:	7bfa      	ldrb	r2, [r7, #15]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	333c      	adds	r3, #60	; 0x3c
 800507c:	7bfa      	ldrb	r2, [r7, #15]
 800507e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005080:	7bfa      	ldrb	r2, [r7, #15]
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	b298      	uxth	r0, r3
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	3344      	adds	r3, #68	; 0x44
 8005094:	4602      	mov	r2, r0
 8005096:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005098:	7bfa      	ldrb	r2, [r7, #15]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	3340      	adds	r3, #64	; 0x40
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050ac:	7bfa      	ldrb	r2, [r7, #15]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	3348      	adds	r3, #72	; 0x48
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050c0:	7bfa      	ldrb	r2, [r7, #15]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	440b      	add	r3, r1
 80050ce:	334c      	adds	r3, #76	; 0x4c
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80050d4:	7bfa      	ldrb	r2, [r7, #15]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	3354      	adds	r3, #84	; 0x54
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	3301      	adds	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
 80050ee:	7bfa      	ldrb	r2, [r7, #15]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d3af      	bcc.n	8005058 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]
 80050fc:	e044      	b.n	8005188 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80050fe:	7bfa      	ldrb	r2, [r7, #15]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005114:	7bfa      	ldrb	r2, [r7, #15]
 8005116:	6879      	ldr	r1, [r7, #4]
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	4413      	add	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	440b      	add	r3, r1
 8005122:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005126:	7bfa      	ldrb	r2, [r7, #15]
 8005128:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800512a:	7bfa      	ldrb	r2, [r7, #15]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800513c:	2200      	movs	r2, #0
 800513e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005140:	7bfa      	ldrb	r2, [r7, #15]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005156:	7bfa      	ldrb	r2, [r7, #15]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005168:	2200      	movs	r2, #0
 800516a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800516c:	7bfa      	ldrb	r2, [r7, #15]
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	3301      	adds	r3, #1
 8005186:	73fb      	strb	r3, [r7, #15]
 8005188:	7bfa      	ldrb	r2, [r7, #15]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	429a      	cmp	r2, r3
 8005190:	d3b5      	bcc.n	80050fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	603b      	str	r3, [r7, #0]
 8005198:	687e      	ldr	r6, [r7, #4]
 800519a:	466d      	mov	r5, sp
 800519c:	f106 0410 	add.w	r4, r6, #16
 80051a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80051b0:	1d33      	adds	r3, r6, #4
 80051b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051b4:	6838      	ldr	r0, [r7, #0]
 80051b6:	f002 fac9 	bl	800774c <USB_DevInit>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e014      	b.n	80051f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d102      	bne.n	80051ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f80a 	bl	80051fe <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f002 fc75 	bl	8007ade <USB_DevDisconnect>

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051fe <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005230:	f043 0303 	orr.w	r3, r3, #3
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005248:	b480      	push	{r7}
 800524a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a04      	ldr	r2, [pc, #16]	; (8005264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005256:	6013      	str	r3, [r2, #0]
}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40007000 	.word	0x40007000

08005268 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800526c:	4b04      	ldr	r3, [pc, #16]	; (8005280 <HAL_PWREx_GetVoltageRange+0x18>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40007000 	.word	0x40007000

08005284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005292:	d130      	bne.n	80052f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005294:	4b23      	ldr	r3, [pc, #140]	; (8005324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800529c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a0:	d038      	beq.n	8005314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052a2:	4b20      	ldr	r3, [pc, #128]	; (8005324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052aa:	4a1e      	ldr	r2, [pc, #120]	; (8005324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052b2:	4b1d      	ldr	r3, [pc, #116]	; (8005328 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2232      	movs	r2, #50	; 0x32
 80052b8:	fb02 f303 	mul.w	r3, r2, r3
 80052bc:	4a1b      	ldr	r2, [pc, #108]	; (800532c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	0c9b      	lsrs	r3, r3, #18
 80052c4:	3301      	adds	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052c8:	e002      	b.n	80052d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3b01      	subs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052d0:	4b14      	ldr	r3, [pc, #80]	; (8005324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052dc:	d102      	bne.n	80052e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d1f2      	bne.n	80052ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052e4:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f0:	d110      	bne.n	8005314 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e00f      	b.n	8005316 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80052f6:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005302:	d007      	beq.n	8005314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005304:	4b07      	ldr	r3, [pc, #28]	; (8005324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800530c:	4a05      	ldr	r2, [pc, #20]	; (8005324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800530e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005312:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3714      	adds	r7, #20
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	40007000 	.word	0x40007000
 8005328:	2000000c 	.word	0x2000000c
 800532c:	431bde83 	.word	0x431bde83

08005330 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_PWREx_EnableVddUSB+0x1c>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4a04      	ldr	r2, [pc, #16]	; (800534c <HAL_PWREx_EnableVddUSB+0x1c>)
 800533a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800533e:	6053      	str	r3, [r2, #4]
}
 8005340:	bf00      	nop
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40007000 	.word	0x40007000

08005350 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af02      	add	r7, sp, #8
 8005356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005358:	f7fe f9b6 	bl	80036c8 <HAL_GetTick>
 800535c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e063      	b.n	8005430 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fc fb6b 	bl	8001a58 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005382:	f241 3188 	movw	r1, #5000	; 0x1388
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f858 	bl	800543c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	3b01      	subs	r3, #1
 800539c:	021a      	lsls	r2, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	2120      	movs	r1, #32
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f850 	bl	8005458 <QSPI_WaitFlagStateUntilTimeout>
 80053b8:	4603      	mov	r3, r0
 80053ba:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80053bc:	7afb      	ldrb	r3, [r7, #11]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d131      	bne.n	8005426 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80053cc:	f023 0310 	bic.w	r3, r3, #16
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	6852      	ldr	r2, [r2, #4]
 80053d4:	0611      	lsls	r1, r2, #24
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68d2      	ldr	r2, [r2, #12]
 80053da:	4311      	orrs	r1, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	4b13      	ldr	r3, [pc, #76]	; (8005438 <HAL_QSPI_Init+0xe8>)
 80053ec:	4013      	ands	r3, r2
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	6912      	ldr	r2, [r2, #16]
 80053f2:	0411      	lsls	r1, r2, #16
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6952      	ldr	r2, [r2, #20]
 80053f8:	4311      	orrs	r1, r2
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	6992      	ldr	r2, [r2, #24]
 80053fe:	4311      	orrs	r1, r2
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	430b      	orrs	r3, r1
 8005406:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800542e:	7afb      	ldrb	r3, [r7, #11]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	ffe0f8fe 	.word	0xffe0f8fe

0800543c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005468:	e01a      	b.n	80054a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d016      	beq.n	80054a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005472:	f7fe f929 	bl	80036c8 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10b      	bne.n	80054a0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2204      	movs	r2, #4
 800548c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	f043 0201 	orr.w	r2, r3, #1
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e00e      	b.n	80054be <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689a      	ldr	r2, [r3, #8]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bf14      	ite	ne
 80054ae:	2301      	movne	r3, #1
 80054b0:	2300      	moveq	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	461a      	mov	r2, r3
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d1d6      	bne.n	800546a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e3ca      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054da:	4b97      	ldr	r3, [pc, #604]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 030c 	and.w	r3, r3, #12
 80054e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054e4:	4b94      	ldr	r3, [pc, #592]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f003 0303 	and.w	r3, r3, #3
 80054ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	f000 80e4 	beq.w	80056c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d007      	beq.n	8005512 <HAL_RCC_OscConfig+0x4a>
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b0c      	cmp	r3, #12
 8005506:	f040 808b 	bne.w	8005620 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	2b01      	cmp	r3, #1
 800550e:	f040 8087 	bne.w	8005620 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005512:	4b89      	ldr	r3, [pc, #548]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d005      	beq.n	800552a <HAL_RCC_OscConfig+0x62>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e3a2      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	4b82      	ldr	r3, [pc, #520]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <HAL_RCC_OscConfig+0x7c>
 800553a:	4b7f      	ldr	r3, [pc, #508]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005542:	e005      	b.n	8005550 <HAL_RCC_OscConfig+0x88>
 8005544:	4b7c      	ldr	r3, [pc, #496]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800554a:	091b      	lsrs	r3, r3, #4
 800554c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005550:	4293      	cmp	r3, r2
 8005552:	d223      	bcs.n	800559c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fd55 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e383      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005568:	4b73      	ldr	r3, [pc, #460]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a72      	ldr	r2, [pc, #456]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800556e:	f043 0308 	orr.w	r3, r3, #8
 8005572:	6013      	str	r3, [r2, #0]
 8005574:	4b70      	ldr	r3, [pc, #448]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	496d      	ldr	r1, [pc, #436]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005582:	4313      	orrs	r3, r2
 8005584:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005586:	4b6c      	ldr	r3, [pc, #432]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	4968      	ldr	r1, [pc, #416]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005596:	4313      	orrs	r3, r2
 8005598:	604b      	str	r3, [r1, #4]
 800559a:	e025      	b.n	80055e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800559c:	4b66      	ldr	r3, [pc, #408]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a65      	ldr	r2, [pc, #404]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 80055a2:	f043 0308 	orr.w	r3, r3, #8
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	4b63      	ldr	r3, [pc, #396]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a1b      	ldr	r3, [r3, #32]
 80055b4:	4960      	ldr	r1, [pc, #384]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055ba:	4b5f      	ldr	r3, [pc, #380]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	495b      	ldr	r1, [pc, #364]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d109      	bne.n	80055e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	4618      	mov	r0, r3
 80055da:	f000 fd15 	bl	8006008 <RCC_SetFlashLatencyFromMSIRange>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e343      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055e8:	f000 fc4a 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 80055ec:	4602      	mov	r2, r0
 80055ee:	4b52      	ldr	r3, [pc, #328]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	4950      	ldr	r1, [pc, #320]	; (800573c <HAL_RCC_OscConfig+0x274>)
 80055fa:	5ccb      	ldrb	r3, [r1, r3]
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
 8005604:	4a4e      	ldr	r2, [pc, #312]	; (8005740 <HAL_RCC_OscConfig+0x278>)
 8005606:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005608:	4b4e      	ldr	r3, [pc, #312]	; (8005744 <HAL_RCC_OscConfig+0x27c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4618      	mov	r0, r3
 800560e:	f7fe f80b 	bl	8003628 <HAL_InitTick>
 8005612:	4603      	mov	r3, r0
 8005614:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d052      	beq.n	80056c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	e327      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d032      	beq.n	800568e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005628:	4b43      	ldr	r3, [pc, #268]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a42      	ldr	r2, [pc, #264]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005634:	f7fe f848 	bl	80036c8 <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800563c:	f7fe f844 	bl	80036c8 <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b02      	cmp	r3, #2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e310      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800564e:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0f0      	beq.n	800563c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800565a:	4b37      	ldr	r3, [pc, #220]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a36      	ldr	r2, [pc, #216]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005660:	f043 0308 	orr.w	r3, r3, #8
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	4b34      	ldr	r3, [pc, #208]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	4931      	ldr	r1, [pc, #196]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005674:	4313      	orrs	r3, r2
 8005676:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005678:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	492c      	ldr	r1, [pc, #176]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005688:	4313      	orrs	r3, r2
 800568a:	604b      	str	r3, [r1, #4]
 800568c:	e01a      	b.n	80056c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800568e:	4b2a      	ldr	r3, [pc, #168]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a29      	ldr	r2, [pc, #164]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800569a:	f7fe f815 	bl	80036c8 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056a2:	f7fe f811 	bl	80036c8 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e2dd      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056b4:	4b20      	ldr	r3, [pc, #128]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1f0      	bne.n	80056a2 <HAL_RCC_OscConfig+0x1da>
 80056c0:	e000      	b.n	80056c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d074      	beq.n	80057ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d005      	beq.n	80056e2 <HAL_RCC_OscConfig+0x21a>
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	2b0c      	cmp	r3, #12
 80056da:	d10e      	bne.n	80056fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d10b      	bne.n	80056fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e2:	4b15      	ldr	r3, [pc, #84]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d064      	beq.n	80057b8 <HAL_RCC_OscConfig+0x2f0>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d160      	bne.n	80057b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e2ba      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005702:	d106      	bne.n	8005712 <HAL_RCC_OscConfig+0x24a>
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a0b      	ldr	r2, [pc, #44]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800570a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e026      	b.n	8005760 <HAL_RCC_OscConfig+0x298>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800571a:	d115      	bne.n	8005748 <HAL_RCC_OscConfig+0x280>
 800571c:	4b06      	ldr	r3, [pc, #24]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a05      	ldr	r2, [pc, #20]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 8005722:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	4b03      	ldr	r3, [pc, #12]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a02      	ldr	r2, [pc, #8]	; (8005738 <HAL_RCC_OscConfig+0x270>)
 800572e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	e014      	b.n	8005760 <HAL_RCC_OscConfig+0x298>
 8005736:	bf00      	nop
 8005738:	40021000 	.word	0x40021000
 800573c:	0800ddfc 	.word	0x0800ddfc
 8005740:	2000000c 	.word	0x2000000c
 8005744:	20000020 	.word	0x20000020
 8005748:	4ba0      	ldr	r3, [pc, #640]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a9f      	ldr	r2, [pc, #636]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 800574e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	4b9d      	ldr	r3, [pc, #628]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a9c      	ldr	r2, [pc, #624]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 800575a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800575e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d013      	beq.n	8005790 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005768:	f7fd ffae 	bl	80036c8 <HAL_GetTick>
 800576c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005770:	f7fd ffaa 	bl	80036c8 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b64      	cmp	r3, #100	; 0x64
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e276      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005782:	4b92      	ldr	r3, [pc, #584]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0f0      	beq.n	8005770 <HAL_RCC_OscConfig+0x2a8>
 800578e:	e014      	b.n	80057ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fd ff9a 	bl	80036c8 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005798:	f7fd ff96 	bl	80036c8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b64      	cmp	r3, #100	; 0x64
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e262      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057aa:	4b88      	ldr	r3, [pc, #544]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f0      	bne.n	8005798 <HAL_RCC_OscConfig+0x2d0>
 80057b6:	e000      	b.n	80057ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d060      	beq.n	8005888 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d005      	beq.n	80057d8 <HAL_RCC_OscConfig+0x310>
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	2b0c      	cmp	r3, #12
 80057d0:	d119      	bne.n	8005806 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d116      	bne.n	8005806 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057d8:	4b7c      	ldr	r3, [pc, #496]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_RCC_OscConfig+0x328>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e23f      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f0:	4b76      	ldr	r3, [pc, #472]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	061b      	lsls	r3, r3, #24
 80057fe:	4973      	ldr	r1, [pc, #460]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005800:	4313      	orrs	r3, r2
 8005802:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005804:	e040      	b.n	8005888 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d023      	beq.n	8005856 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800580e:	4b6f      	ldr	r3, [pc, #444]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a6e      	ldr	r2, [pc, #440]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fd ff55 	bl	80036c8 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005822:	f7fd ff51 	bl	80036c8 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e21d      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005834:	4b65      	ldr	r3, [pc, #404]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005840:	4b62      	ldr	r3, [pc, #392]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	061b      	lsls	r3, r3, #24
 800584e:	495f      	ldr	r1, [pc, #380]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005850:	4313      	orrs	r3, r2
 8005852:	604b      	str	r3, [r1, #4]
 8005854:	e018      	b.n	8005888 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005856:	4b5d      	ldr	r3, [pc, #372]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a5c      	ldr	r2, [pc, #368]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 800585c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005862:	f7fd ff31 	bl	80036c8 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800586a:	f7fd ff2d 	bl	80036c8 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e1f9      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800587c:	4b53      	ldr	r3, [pc, #332]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f0      	bne.n	800586a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d03c      	beq.n	800590e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01c      	beq.n	80058d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800589c:	4b4b      	ldr	r3, [pc, #300]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 800589e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a2:	4a4a      	ldr	r2, [pc, #296]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80058a4:	f043 0301 	orr.w	r3, r3, #1
 80058a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ac:	f7fd ff0c 	bl	80036c8 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058b4:	f7fd ff08 	bl	80036c8 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e1d4      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058c6:	4b41      	ldr	r3, [pc, #260]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80058c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d0ef      	beq.n	80058b4 <HAL_RCC_OscConfig+0x3ec>
 80058d4:	e01b      	b.n	800590e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058d6:	4b3d      	ldr	r3, [pc, #244]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80058d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058dc:	4a3b      	ldr	r2, [pc, #236]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e6:	f7fd feef 	bl	80036c8 <HAL_GetTick>
 80058ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058ec:	e008      	b.n	8005900 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058ee:	f7fd feeb 	bl	80036c8 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e1b7      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005900:	4b32      	ldr	r3, [pc, #200]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1ef      	bne.n	80058ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 80a6 	beq.w	8005a68 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591c:	2300      	movs	r3, #0
 800591e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005920:	4b2a      	ldr	r3, [pc, #168]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10d      	bne.n	8005948 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592c:	4b27      	ldr	r3, [pc, #156]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 800592e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005930:	4a26      	ldr	r2, [pc, #152]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005936:	6593      	str	r3, [r2, #88]	; 0x58
 8005938:	4b24      	ldr	r3, [pc, #144]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 800593a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005940:	60bb      	str	r3, [r7, #8]
 8005942:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005944:	2301      	movs	r3, #1
 8005946:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005948:	4b21      	ldr	r3, [pc, #132]	; (80059d0 <HAL_RCC_OscConfig+0x508>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d118      	bne.n	8005986 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005954:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <HAL_RCC_OscConfig+0x508>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a1d      	ldr	r2, [pc, #116]	; (80059d0 <HAL_RCC_OscConfig+0x508>)
 800595a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005960:	f7fd feb2 	bl	80036c8 <HAL_GetTick>
 8005964:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005966:	e008      	b.n	800597a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005968:	f7fd feae 	bl	80036c8 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d901      	bls.n	800597a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e17a      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <HAL_RCC_OscConfig+0x508>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f0      	beq.n	8005968 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d108      	bne.n	80059a0 <HAL_RCC_OscConfig+0x4d8>
 800598e:	4b0f      	ldr	r3, [pc, #60]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005994:	4a0d      	ldr	r2, [pc, #52]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800599e:	e029      	b.n	80059f4 <HAL_RCC_OscConfig+0x52c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b05      	cmp	r3, #5
 80059a6:	d115      	bne.n	80059d4 <HAL_RCC_OscConfig+0x50c>
 80059a8:	4b08      	ldr	r3, [pc, #32]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	4a07      	ldr	r2, [pc, #28]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80059b0:	f043 0304 	orr.w	r3, r3, #4
 80059b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059be:	4a03      	ldr	r2, [pc, #12]	; (80059cc <HAL_RCC_OscConfig+0x504>)
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059c8:	e014      	b.n	80059f4 <HAL_RCC_OscConfig+0x52c>
 80059ca:	bf00      	nop
 80059cc:	40021000 	.word	0x40021000
 80059d0:	40007000 	.word	0x40007000
 80059d4:	4b9c      	ldr	r3, [pc, #624]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	4a9b      	ldr	r2, [pc, #620]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 80059dc:	f023 0301 	bic.w	r3, r3, #1
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059e4:	4b98      	ldr	r3, [pc, #608]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ea:	4a97      	ldr	r2, [pc, #604]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 80059ec:	f023 0304 	bic.w	r3, r3, #4
 80059f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d016      	beq.n	8005a2a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7fd fe64 	bl	80036c8 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a04:	f7fd fe60 	bl	80036c8 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e12a      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a1a:	4b8b      	ldr	r3, [pc, #556]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ed      	beq.n	8005a04 <HAL_RCC_OscConfig+0x53c>
 8005a28:	e015      	b.n	8005a56 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a2a:	f7fd fe4d 	bl	80036c8 <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a30:	e00a      	b.n	8005a48 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a32:	f7fd fe49 	bl	80036c8 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e113      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a48:	4b7f      	ldr	r3, [pc, #508]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1ed      	bne.n	8005a32 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a56:	7ffb      	ldrb	r3, [r7, #31]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d105      	bne.n	8005a68 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5c:	4b7a      	ldr	r3, [pc, #488]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a60:	4a79      	ldr	r2, [pc, #484]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a66:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80fe 	beq.w	8005c6e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	f040 80d0 	bne.w	8005c1c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005a7c:	4b72      	ldr	r3, [pc, #456]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	f003 0203 	and.w	r2, r3, #3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d130      	bne.n	8005af2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d127      	bne.n	8005af2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d11f      	bne.n	8005af2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005abc:	2a07      	cmp	r2, #7
 8005abe:	bf14      	ite	ne
 8005ac0:	2201      	movne	r2, #1
 8005ac2:	2200      	moveq	r2, #0
 8005ac4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d113      	bne.n	8005af2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d109      	bne.n	8005af2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	3b01      	subs	r3, #1
 8005aec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d06e      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	d069      	beq.n	8005bcc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005af8:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005b04:	4b50      	ldr	r3, [pc, #320]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0ad      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b14:	4b4c      	ldr	r3, [pc, #304]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a4b      	ldr	r2, [pc, #300]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b1e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b20:	f7fd fdd2 	bl	80036c8 <HAL_GetTick>
 8005b24:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b26:	e008      	b.n	8005b3a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b28:	f7fd fdce 	bl	80036c8 <HAL_GetTick>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e09a      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b3a:	4b43      	ldr	r3, [pc, #268]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d1f0      	bne.n	8005b28 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b46:	4b40      	ldr	r3, [pc, #256]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	4b40      	ldr	r3, [pc, #256]	; (8005c4c <HAL_RCC_OscConfig+0x784>)
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005b56:	3a01      	subs	r2, #1
 8005b58:	0112      	lsls	r2, r2, #4
 8005b5a:	4311      	orrs	r1, r2
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b60:	0212      	lsls	r2, r2, #8
 8005b62:	4311      	orrs	r1, r2
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b68:	0852      	lsrs	r2, r2, #1
 8005b6a:	3a01      	subs	r2, #1
 8005b6c:	0552      	lsls	r2, r2, #21
 8005b6e:	4311      	orrs	r1, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005b74:	0852      	lsrs	r2, r2, #1
 8005b76:	3a01      	subs	r2, #1
 8005b78:	0652      	lsls	r2, r2, #25
 8005b7a:	4311      	orrs	r1, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b80:	0912      	lsrs	r2, r2, #4
 8005b82:	0452      	lsls	r2, r2, #17
 8005b84:	430a      	orrs	r2, r1
 8005b86:	4930      	ldr	r1, [pc, #192]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b8c:	4b2e      	ldr	r3, [pc, #184]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2d      	ldr	r2, [pc, #180]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b96:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b98:	4b2b      	ldr	r3, [pc, #172]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	4a2a      	ldr	r2, [pc, #168]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ba2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ba4:	f7fd fd90 	bl	80036c8 <HAL_GetTick>
 8005ba8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005baa:	e008      	b.n	8005bbe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bac:	f7fd fd8c 	bl	80036c8 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e058      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bbe:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0f0      	beq.n	8005bac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005bca:	e050      	b.n	8005c6e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e04f      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bd0:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d148      	bne.n	8005c6e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a19      	ldr	r2, [pc, #100]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005be2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005be6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005be8:	4b17      	ldr	r3, [pc, #92]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a16      	ldr	r2, [pc, #88]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005bee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bf2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bf4:	f7fd fd68 	bl	80036c8 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bfc:	f7fd fd64 	bl	80036c8 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e030      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0x734>
 8005c1a:	e028      	b.n	8005c6e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	2b0c      	cmp	r3, #12
 8005c20:	d023      	beq.n	8005c6a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c22:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a08      	ldr	r2, [pc, #32]	; (8005c48 <HAL_RCC_OscConfig+0x780>)
 8005c28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2e:	f7fd fd4b 	bl	80036c8 <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c34:	e00c      	b.n	8005c50 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c36:	f7fd fd47 	bl	80036c8 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d905      	bls.n	8005c50 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e013      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c50:	4b09      	ldr	r3, [pc, #36]	; (8005c78 <HAL_RCC_OscConfig+0x7b0>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1ec      	bne.n	8005c36 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005c5c:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <HAL_RCC_OscConfig+0x7b0>)
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	4905      	ldr	r1, [pc, #20]	; (8005c78 <HAL_RCC_OscConfig+0x7b0>)
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_RCC_OscConfig+0x7b4>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	60cb      	str	r3, [r1, #12]
 8005c68:	e001      	b.n	8005c6e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3720      	adds	r7, #32
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	feeefffc 	.word	0xfeeefffc

08005c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0e7      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c94:	4b75      	ldr	r3, [pc, #468]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d910      	bls.n	8005cc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ca2:	4b72      	ldr	r3, [pc, #456]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f023 0207 	bic.w	r2, r3, #7
 8005caa:	4970      	ldr	r1, [pc, #448]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cb2:	4b6e      	ldr	r3, [pc, #440]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d001      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e0cf      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d010      	beq.n	8005cf2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	4b66      	ldr	r3, [pc, #408]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d908      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce0:	4b63      	ldr	r3, [pc, #396]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	4960      	ldr	r1, [pc, #384]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 0301 	and.w	r3, r3, #1
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d04c      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d107      	bne.n	8005d16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d06:	4b5a      	ldr	r3, [pc, #360]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d121      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e0a6      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d107      	bne.n	8005d2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d1e:	4b54      	ldr	r3, [pc, #336]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d115      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e09a      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d107      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d36:	4b4e      	ldr	r3, [pc, #312]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d109      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e08e      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d46:	4b4a      	ldr	r3, [pc, #296]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e086      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d56:	4b46      	ldr	r3, [pc, #280]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f023 0203 	bic.w	r2, r3, #3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4943      	ldr	r1, [pc, #268]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d64:	4313      	orrs	r3, r2
 8005d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d68:	f7fd fcae 	bl	80036c8 <HAL_GetTick>
 8005d6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d70:	f7fd fcaa 	bl	80036c8 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e06e      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	4b3a      	ldr	r3, [pc, #232]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f003 020c 	and.w	r2, r3, #12
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d1eb      	bne.n	8005d70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689a      	ldr	r2, [r3, #8]
 8005da8:	4b31      	ldr	r3, [pc, #196]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d208      	bcs.n	8005dc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005db4:	4b2e      	ldr	r3, [pc, #184]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	492b      	ldr	r1, [pc, #172]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc6:	4b29      	ldr	r3, [pc, #164]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d210      	bcs.n	8005df6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd4:	4b25      	ldr	r3, [pc, #148]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f023 0207 	bic.w	r2, r3, #7
 8005ddc:	4923      	ldr	r1, [pc, #140]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de4:	4b21      	ldr	r3, [pc, #132]	; (8005e6c <HAL_RCC_ClockConfig+0x1ec>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0307 	and.w	r3, r3, #7
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d001      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e036      	b.n	8005e64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d008      	beq.n	8005e14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e02:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	4918      	ldr	r1, [pc, #96]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0308 	and.w	r3, r3, #8
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e20:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4910      	ldr	r1, [pc, #64]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e34:	f000 f824 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <HAL_RCC_ClockConfig+0x1f0>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	091b      	lsrs	r3, r3, #4
 8005e40:	f003 030f 	and.w	r3, r3, #15
 8005e44:	490b      	ldr	r1, [pc, #44]	; (8005e74 <HAL_RCC_ClockConfig+0x1f4>)
 8005e46:	5ccb      	ldrb	r3, [r1, r3]
 8005e48:	f003 031f 	and.w	r3, r3, #31
 8005e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e50:	4a09      	ldr	r2, [pc, #36]	; (8005e78 <HAL_RCC_ClockConfig+0x1f8>)
 8005e52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005e54:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_RCC_ClockConfig+0x1fc>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fd fbe5 	bl	8003628 <HAL_InitTick>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	72fb      	strb	r3, [r7, #11]

  return status;
 8005e62:	7afb      	ldrb	r3, [r7, #11]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	40022000 	.word	0x40022000
 8005e70:	40021000 	.word	0x40021000
 8005e74:	0800ddfc 	.word	0x0800ddfc
 8005e78:	2000000c 	.word	0x2000000c
 8005e7c:	20000020 	.word	0x20000020

08005e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b089      	sub	sp, #36	; 0x24
 8005e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e8e:	4b3e      	ldr	r3, [pc, #248]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	f003 030c 	and.w	r3, r3, #12
 8005e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e98:	4b3b      	ldr	r3, [pc, #236]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2b0c      	cmp	r3, #12
 8005eac:	d121      	bne.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d11e      	bne.n	8005ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005eb4:	4b34      	ldr	r3, [pc, #208]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ec0:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec6:	0a1b      	lsrs	r3, r3, #8
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	e005      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	091b      	lsrs	r3, r3, #4
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005edc:	4a2b      	ldr	r2, [pc, #172]	; (8005f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10d      	bne.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ef0:	e00a      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d102      	bne.n	8005efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8005efa:	61bb      	str	r3, [r7, #24]
 8005efc:	e004      	b.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d101      	bne.n	8005f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f04:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d134      	bne.n	8005f78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f0e:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	2b03      	cmp	r3, #3
 8005f22:	d003      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0xac>
 8005f24:	e005      	b.n	8005f32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f26:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f28:	617b      	str	r3, [r7, #20]
      break;
 8005f2a:	e005      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f2c:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f2e:	617b      	str	r3, [r7, #20]
      break;
 8005f30:	e002      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	617b      	str	r3, [r7, #20]
      break;
 8005f36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f38:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	3301      	adds	r3, #1
 8005f44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005f46:	4b10      	ldr	r3, [pc, #64]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	0a1b      	lsrs	r3, r3, #8
 8005f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	fb03 f202 	mul.w	r2, r3, r2
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	0e5b      	lsrs	r3, r3, #25
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	3301      	adds	r3, #1
 8005f6a:	005b      	lsls	r3, r3, #1
 8005f6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005f78:	69bb      	ldr	r3, [r7, #24]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3724      	adds	r7, #36	; 0x24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000
 8005f8c:	0800de14 	.word	0x0800de14
 8005f90:	00f42400 	.word	0x00f42400
 8005f94:	007a1200 	.word	0x007a1200

08005f98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f9c:	4b03      	ldr	r3, [pc, #12]	; (8005fac <HAL_RCC_GetHCLKFreq+0x14>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	2000000c 	.word	0x2000000c

08005fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005fb4:	f7ff fff0 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4904      	ldr	r1, [pc, #16]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	0800de0c 	.word	0x0800de0c

08005fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005fe0:	f7ff ffda 	bl	8005f98 <HAL_RCC_GetHCLKFreq>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	0adb      	lsrs	r3, r3, #11
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	4904      	ldr	r1, [pc, #16]	; (8006004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ff2:	5ccb      	ldrb	r3, [r1, r3]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	40021000 	.word	0x40021000
 8006004:	0800de0c 	.word	0x0800de0c

08006008 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006010:	2300      	movs	r3, #0
 8006012:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006014:	4b2a      	ldr	r3, [pc, #168]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006020:	f7ff f922 	bl	8005268 <HAL_PWREx_GetVoltageRange>
 8006024:	6178      	str	r0, [r7, #20]
 8006026:	e014      	b.n	8006052 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006028:	4b25      	ldr	r3, [pc, #148]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	4a24      	ldr	r2, [pc, #144]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800602e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006032:	6593      	str	r3, [r2, #88]	; 0x58
 8006034:	4b22      	ldr	r3, [pc, #136]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006040:	f7ff f912 	bl	8005268 <HAL_PWREx_GetVoltageRange>
 8006044:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006046:	4b1e      	ldr	r3, [pc, #120]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006050:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006058:	d10b      	bne.n	8006072 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b80      	cmp	r3, #128	; 0x80
 800605e:	d919      	bls.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2ba0      	cmp	r3, #160	; 0xa0
 8006064:	d902      	bls.n	800606c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006066:	2302      	movs	r3, #2
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e013      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800606c:	2301      	movs	r3, #1
 800606e:	613b      	str	r3, [r7, #16]
 8006070:	e010      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b80      	cmp	r3, #128	; 0x80
 8006076:	d902      	bls.n	800607e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006078:	2303      	movs	r3, #3
 800607a:	613b      	str	r3, [r7, #16]
 800607c:	e00a      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b80      	cmp	r3, #128	; 0x80
 8006082:	d102      	bne.n	800608a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006084:	2302      	movs	r3, #2
 8006086:	613b      	str	r3, [r7, #16]
 8006088:	e004      	b.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b70      	cmp	r3, #112	; 0x70
 800608e:	d101      	bne.n	8006094 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006090:	2301      	movs	r3, #1
 8006092:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006094:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f023 0207 	bic.w	r2, r3, #7
 800609c:	4909      	ldr	r1, [pc, #36]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0307 	and.w	r3, r3, #7
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d001      	beq.n	80060b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40022000 	.word	0x40022000

080060c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80060d0:	2300      	movs	r3, #0
 80060d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060d4:	2300      	movs	r3, #0
 80060d6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d041      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060ec:	d02a      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80060ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80060f2:	d824      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80060f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060f8:	d008      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x44>
 80060fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060fe:	d81e      	bhi.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006108:	d010      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800610a:	e018      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800610c:	4b86      	ldr	r3, [pc, #536]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	4a85      	ldr	r2, [pc, #532]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006116:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006118:	e015      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3304      	adds	r3, #4
 800611e:	2100      	movs	r1, #0
 8006120:	4618      	mov	r0, r3
 8006122:	f000 facb 	bl	80066bc <RCCEx_PLLSAI1_Config>
 8006126:	4603      	mov	r3, r0
 8006128:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800612a:	e00c      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3320      	adds	r3, #32
 8006130:	2100      	movs	r1, #0
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fbb6 	bl	80068a4 <RCCEx_PLLSAI2_Config>
 8006138:	4603      	mov	r3, r0
 800613a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800613c:	e003      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	74fb      	strb	r3, [r7, #19]
      break;
 8006142:	e000      	b.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006146:	7cfb      	ldrb	r3, [r7, #19]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800614c:	4b76      	ldr	r3, [pc, #472]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006152:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800615a:	4973      	ldr	r1, [pc, #460]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006162:	e001      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006164:	7cfb      	ldrb	r3, [r7, #19]
 8006166:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d041      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006178:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800617c:	d02a      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800617e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006182:	d824      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006184:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006188:	d008      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800618a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800618e:	d81e      	bhi.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006198:	d010      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800619a:	e018      	b.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800619c:	4b62      	ldr	r3, [pc, #392]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4a61      	ldr	r2, [pc, #388]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061a8:	e015      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3304      	adds	r3, #4
 80061ae:	2100      	movs	r1, #0
 80061b0:	4618      	mov	r0, r3
 80061b2:	f000 fa83 	bl	80066bc <RCCEx_PLLSAI1_Config>
 80061b6:	4603      	mov	r3, r0
 80061b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061ba:	e00c      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3320      	adds	r3, #32
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fb6e 	bl	80068a4 <RCCEx_PLLSAI2_Config>
 80061c8:	4603      	mov	r3, r0
 80061ca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80061cc:	e003      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	74fb      	strb	r3, [r7, #19]
      break;
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80061d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d6:	7cfb      	ldrb	r3, [r7, #19]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80061dc:	4b52      	ldr	r3, [pc, #328]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061ea:	494f      	ldr	r1, [pc, #316]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061f2:	e001      	b.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f4:	7cfb      	ldrb	r3, [r7, #19]
 80061f6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80a0 	beq.w	8006346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006206:	2300      	movs	r3, #0
 8006208:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800620a:	4b47      	ldr	r3, [pc, #284]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800620c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800621a:	2300      	movs	r3, #0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00d      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006220:	4b41      	ldr	r3, [pc, #260]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006224:	4a40      	ldr	r2, [pc, #256]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622a:	6593      	str	r3, [r2, #88]	; 0x58
 800622c:	4b3e      	ldr	r3, [pc, #248]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800622e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006234:	60bb      	str	r3, [r7, #8]
 8006236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006238:	2301      	movs	r3, #1
 800623a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800623c:	4b3b      	ldr	r3, [pc, #236]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a3a      	ldr	r2, [pc, #232]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006246:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006248:	f7fd fa3e 	bl	80036c8 <HAL_GetTick>
 800624c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800624e:	e009      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006250:	f7fd fa3a 	bl	80036c8 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b02      	cmp	r3, #2
 800625c:	d902      	bls.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	74fb      	strb	r3, [r7, #19]
        break;
 8006262:	e005      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006264:	4b31      	ldr	r3, [pc, #196]	; (800632c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0ef      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006270:	7cfb      	ldrb	r3, [r7, #19]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d15c      	bne.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006276:	4b2c      	ldr	r3, [pc, #176]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800627c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006280:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d01f      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	429a      	cmp	r2, r3
 8006292:	d019      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006294:	4b24      	ldr	r3, [pc, #144]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800629e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80062a0:	4b21      	ldr	r3, [pc, #132]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	4a20      	ldr	r2, [pc, #128]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80062b0:	4b1d      	ldr	r3, [pc, #116]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	4a1c      	ldr	r2, [pc, #112]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80062c0:	4a19      	ldr	r2, [pc, #100]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	f003 0301 	and.w	r3, r3, #1
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d016      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d2:	f7fd f9f9 	bl	80036c8 <HAL_GetTick>
 80062d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062d8:	e00b      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062da:	f7fd f9f5 	bl	80036c8 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d902      	bls.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	74fb      	strb	r3, [r7, #19]
            break;
 80062f0:	e006      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062f2:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d0ec      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10c      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006306:	4b08      	ldr	r3, [pc, #32]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800630c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006316:	4904      	ldr	r1, [pc, #16]	; (8006328 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006318:	4313      	orrs	r3, r2
 800631a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800631e:	e009      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006320:	7cfb      	ldrb	r3, [r7, #19]
 8006322:	74bb      	strb	r3, [r7, #18]
 8006324:	e006      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006326:	bf00      	nop
 8006328:	40021000 	.word	0x40021000
 800632c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006330:	7cfb      	ldrb	r3, [r7, #19]
 8006332:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006334:	7c7b      	ldrb	r3, [r7, #17]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d105      	bne.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633a:	4b9e      	ldr	r3, [pc, #632]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633e:	4a9d      	ldr	r2, [pc, #628]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006344:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00a      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006352:	4b98      	ldr	r3, [pc, #608]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006358:	f023 0203 	bic.w	r2, r3, #3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	4994      	ldr	r1, [pc, #592]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006362:	4313      	orrs	r3, r2
 8006364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d00a      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006374:	4b8f      	ldr	r3, [pc, #572]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637a:	f023 020c 	bic.w	r2, r3, #12
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006382:	498c      	ldr	r1, [pc, #560]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f003 0304 	and.w	r3, r3, #4
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00a      	beq.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006396:	4b87      	ldr	r3, [pc, #540]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	4983      	ldr	r1, [pc, #524]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00a      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80063b8:	4b7e      	ldr	r3, [pc, #504]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063c6:	497b      	ldr	r1, [pc, #492]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063c8:	4313      	orrs	r3, r2
 80063ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80063da:	4b76      	ldr	r3, [pc, #472]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e8:	4972      	ldr	r1, [pc, #456]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0320 	and.w	r3, r3, #32
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063fc:	4b6d      	ldr	r3, [pc, #436]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800640a:	496a      	ldr	r1, [pc, #424]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800641e:	4b65      	ldr	r3, [pc, #404]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800642c:	4961      	ldr	r1, [pc, #388]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800642e:	4313      	orrs	r3, r2
 8006430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00a      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006440:	4b5c      	ldr	r3, [pc, #368]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006446:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800644e:	4959      	ldr	r1, [pc, #356]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006450:	4313      	orrs	r3, r2
 8006452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00a      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006462:	4b54      	ldr	r3, [pc, #336]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006468:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006470:	4950      	ldr	r1, [pc, #320]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006484:	4b4b      	ldr	r3, [pc, #300]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006492:	4948      	ldr	r1, [pc, #288]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006494:	4313      	orrs	r3, r2
 8006496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80064a6:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b4:	493f      	ldr	r1, [pc, #252]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d028      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064c8:	4b3a      	ldr	r3, [pc, #232]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064d6:	4937      	ldr	r1, [pc, #220]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064e6:	d106      	bne.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80064e8:	4b32      	ldr	r3, [pc, #200]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a31      	ldr	r2, [pc, #196]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f2:	60d3      	str	r3, [r2, #12]
 80064f4:	e011      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064fe:	d10c      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3304      	adds	r3, #4
 8006504:	2101      	movs	r1, #1
 8006506:	4618      	mov	r0, r3
 8006508:	f000 f8d8 	bl	80066bc <RCCEx_PLLSAI1_Config>
 800650c:	4603      	mov	r3, r0
 800650e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006510:	7cfb      	ldrb	r3, [r7, #19]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006516:	7cfb      	ldrb	r3, [r7, #19]
 8006518:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d028      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006526:	4b23      	ldr	r3, [pc, #140]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800652c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	491f      	ldr	r1, [pc, #124]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006536:	4313      	orrs	r3, r2
 8006538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006540:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006544:	d106      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800654c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006550:	60d3      	str	r3, [r2, #12]
 8006552:	e011      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800655c:	d10c      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3304      	adds	r3, #4
 8006562:	2101      	movs	r1, #1
 8006564:	4618      	mov	r0, r3
 8006566:	f000 f8a9 	bl	80066bc <RCCEx_PLLSAI1_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800656e:	7cfb      	ldrb	r3, [r7, #19]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006574:	7cfb      	ldrb	r3, [r7, #19]
 8006576:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d02b      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006584:	4b0b      	ldr	r3, [pc, #44]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006592:	4908      	ldr	r1, [pc, #32]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006594:	4313      	orrs	r3, r2
 8006596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800659e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065a2:	d109      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065a4:	4b03      	ldr	r3, [pc, #12]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	4a02      	ldr	r2, [pc, #8]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065ae:	60d3      	str	r3, [r2, #12]
 80065b0:	e014      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065c0:	d10c      	bne.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	2101      	movs	r1, #1
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f877 	bl	80066bc <RCCEx_PLLSAI1_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80065d2:	7cfb      	ldrb	r3, [r7, #19]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80065d8:	7cfb      	ldrb	r3, [r7, #19]
 80065da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d02f      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065e8:	4b2b      	ldr	r3, [pc, #172]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065f6:	4928      	ldr	r1, [pc, #160]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006602:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006606:	d10d      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	3304      	adds	r3, #4
 800660c:	2102      	movs	r1, #2
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f854 	bl	80066bc <RCCEx_PLLSAI1_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006618:	7cfb      	ldrb	r3, [r7, #19]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d014      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800661e:	7cfb      	ldrb	r3, [r7, #19]
 8006620:	74bb      	strb	r3, [r7, #18]
 8006622:	e011      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006628:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800662c:	d10c      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3320      	adds	r3, #32
 8006632:	2102      	movs	r1, #2
 8006634:	4618      	mov	r0, r3
 8006636:	f000 f935 	bl	80068a4 <RCCEx_PLLSAI2_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800663e:	7cfb      	ldrb	r3, [r7, #19]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006644:	7cfb      	ldrb	r3, [r7, #19]
 8006646:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006654:	4b10      	ldr	r3, [pc, #64]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800665a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006662:	490d      	ldr	r1, [pc, #52]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00b      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006686:	4904      	ldr	r1, [pc, #16]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800668e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	40021000 	.word	0x40021000

0800669c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800669c:	b480      	push	{r7}
 800669e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80066a0:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a04      	ldr	r2, [pc, #16]	; (80066b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80066a6:	f043 0304 	orr.w	r3, r3, #4
 80066aa:	6013      	str	r3, [r2, #0]
}
 80066ac:	bf00      	nop
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40021000 	.word	0x40021000

080066bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80066ca:	4b75      	ldr	r3, [pc, #468]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d018      	beq.n	8006708 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80066d6:	4b72      	ldr	r3, [pc, #456]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f003 0203 	and.w	r2, r3, #3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d10d      	bne.n	8006702 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
       ||
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d009      	beq.n	8006702 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80066ee:	4b6c      	ldr	r3, [pc, #432]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	091b      	lsrs	r3, r3, #4
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	1c5a      	adds	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
       ||
 80066fe:	429a      	cmp	r2, r3
 8006700:	d047      	beq.n	8006792 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	73fb      	strb	r3, [r7, #15]
 8006706:	e044      	b.n	8006792 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d018      	beq.n	8006742 <RCCEx_PLLSAI1_Config+0x86>
 8006710:	2b03      	cmp	r3, #3
 8006712:	d825      	bhi.n	8006760 <RCCEx_PLLSAI1_Config+0xa4>
 8006714:	2b01      	cmp	r3, #1
 8006716:	d002      	beq.n	800671e <RCCEx_PLLSAI1_Config+0x62>
 8006718:	2b02      	cmp	r3, #2
 800671a:	d009      	beq.n	8006730 <RCCEx_PLLSAI1_Config+0x74>
 800671c:	e020      	b.n	8006760 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800671e:	4b60      	ldr	r3, [pc, #384]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d11d      	bne.n	8006766 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800672e:	e01a      	b.n	8006766 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006730:	4b5b      	ldr	r3, [pc, #364]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006738:	2b00      	cmp	r3, #0
 800673a:	d116      	bne.n	800676a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006740:	e013      	b.n	800676a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006742:	4b57      	ldr	r3, [pc, #348]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10f      	bne.n	800676e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800674e:	4b54      	ldr	r3, [pc, #336]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d109      	bne.n	800676e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800675e:	e006      	b.n	800676e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	73fb      	strb	r3, [r7, #15]
      break;
 8006764:	e004      	b.n	8006770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006766:	bf00      	nop
 8006768:	e002      	b.n	8006770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800676e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10d      	bne.n	8006792 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006776:	4b4a      	ldr	r3, [pc, #296]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6819      	ldr	r1, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	3b01      	subs	r3, #1
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	430b      	orrs	r3, r1
 800678c:	4944      	ldr	r1, [pc, #272]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800678e:	4313      	orrs	r3, r2
 8006790:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006792:	7bfb      	ldrb	r3, [r7, #15]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d17d      	bne.n	8006894 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006798:	4b41      	ldr	r3, [pc, #260]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a40      	ldr	r2, [pc, #256]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800679e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067a4:	f7fc ff90 	bl	80036c8 <HAL_GetTick>
 80067a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067aa:	e009      	b.n	80067c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067ac:	f7fc ff8c 	bl	80036c8 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d902      	bls.n	80067c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	73fb      	strb	r3, [r7, #15]
        break;
 80067be:	e005      	b.n	80067cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80067c0:	4b37      	ldr	r3, [pc, #220]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1ef      	bne.n	80067ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d160      	bne.n	8006894 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d111      	bne.n	80067fc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80067d8:	4b31      	ldr	r3, [pc, #196]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80067e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6892      	ldr	r2, [r2, #8]
 80067e8:	0211      	lsls	r1, r2, #8
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68d2      	ldr	r2, [r2, #12]
 80067ee:	0912      	lsrs	r2, r2, #4
 80067f0:	0452      	lsls	r2, r2, #17
 80067f2:	430a      	orrs	r2, r1
 80067f4:	492a      	ldr	r1, [pc, #168]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067f6:	4313      	orrs	r3, r2
 80067f8:	610b      	str	r3, [r1, #16]
 80067fa:	e027      	b.n	800684c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d112      	bne.n	8006828 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006802:	4b27      	ldr	r3, [pc, #156]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800680a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6892      	ldr	r2, [r2, #8]
 8006812:	0211      	lsls	r1, r2, #8
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	6912      	ldr	r2, [r2, #16]
 8006818:	0852      	lsrs	r2, r2, #1
 800681a:	3a01      	subs	r2, #1
 800681c:	0552      	lsls	r2, r2, #21
 800681e:	430a      	orrs	r2, r1
 8006820:	491f      	ldr	r1, [pc, #124]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006822:	4313      	orrs	r3, r2
 8006824:	610b      	str	r3, [r1, #16]
 8006826:	e011      	b.n	800684c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006828:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006830:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6892      	ldr	r2, [r2, #8]
 8006838:	0211      	lsls	r1, r2, #8
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6952      	ldr	r2, [r2, #20]
 800683e:	0852      	lsrs	r2, r2, #1
 8006840:	3a01      	subs	r2, #1
 8006842:	0652      	lsls	r2, r2, #25
 8006844:	430a      	orrs	r2, r1
 8006846:	4916      	ldr	r1, [pc, #88]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006848:	4313      	orrs	r3, r2
 800684a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800684c:	4b14      	ldr	r3, [pc, #80]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006852:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006856:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006858:	f7fc ff36 	bl	80036c8 <HAL_GetTick>
 800685c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800685e:	e009      	b.n	8006874 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006860:	f7fc ff32 	bl	80036c8 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d902      	bls.n	8006874 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	73fb      	strb	r3, [r7, #15]
          break;
 8006872:	e005      	b.n	8006880 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006874:	4b0a      	ldr	r3, [pc, #40]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d0ef      	beq.n	8006860 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006880:	7bfb      	ldrb	r3, [r7, #15]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006886:	4b06      	ldr	r3, [pc, #24]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	4904      	ldr	r1, [pc, #16]	; (80068a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006890:	4313      	orrs	r3, r2
 8006892:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006894:	7bfb      	ldrb	r3, [r7, #15]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40021000 	.word	0x40021000

080068a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068b2:	4b6a      	ldr	r3, [pc, #424]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d018      	beq.n	80068f0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80068be:	4b67      	ldr	r3, [pc, #412]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f003 0203 	and.w	r2, r3, #3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d10d      	bne.n	80068ea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
       ||
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d009      	beq.n	80068ea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80068d6:	4b61      	ldr	r3, [pc, #388]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	091b      	lsrs	r3, r3, #4
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	1c5a      	adds	r2, r3, #1
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	685b      	ldr	r3, [r3, #4]
       ||
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d047      	beq.n	800697a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	73fb      	strb	r3, [r7, #15]
 80068ee:	e044      	b.n	800697a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d018      	beq.n	800692a <RCCEx_PLLSAI2_Config+0x86>
 80068f8:	2b03      	cmp	r3, #3
 80068fa:	d825      	bhi.n	8006948 <RCCEx_PLLSAI2_Config+0xa4>
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d002      	beq.n	8006906 <RCCEx_PLLSAI2_Config+0x62>
 8006900:	2b02      	cmp	r3, #2
 8006902:	d009      	beq.n	8006918 <RCCEx_PLLSAI2_Config+0x74>
 8006904:	e020      	b.n	8006948 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006906:	4b55      	ldr	r3, [pc, #340]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	2b00      	cmp	r3, #0
 8006910:	d11d      	bne.n	800694e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006916:	e01a      	b.n	800694e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006918:	4b50      	ldr	r3, [pc, #320]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006920:	2b00      	cmp	r3, #0
 8006922:	d116      	bne.n	8006952 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006928:	e013      	b.n	8006952 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800692a:	4b4c      	ldr	r3, [pc, #304]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10f      	bne.n	8006956 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006936:	4b49      	ldr	r3, [pc, #292]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006946:	e006      	b.n	8006956 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
      break;
 800694c:	e004      	b.n	8006958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800694e:	bf00      	nop
 8006950:	e002      	b.n	8006958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006952:	bf00      	nop
 8006954:	e000      	b.n	8006958 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006956:	bf00      	nop
    }

    if(status == HAL_OK)
 8006958:	7bfb      	ldrb	r3, [r7, #15]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10d      	bne.n	800697a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800695e:	4b3f      	ldr	r3, [pc, #252]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6819      	ldr	r1, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	3b01      	subs	r3, #1
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	430b      	orrs	r3, r1
 8006974:	4939      	ldr	r1, [pc, #228]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006976:	4313      	orrs	r3, r2
 8006978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800697a:	7bfb      	ldrb	r3, [r7, #15]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d167      	bne.n	8006a50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006980:	4b36      	ldr	r3, [pc, #216]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a35      	ldr	r2, [pc, #212]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800698a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800698c:	f7fc fe9c 	bl	80036c8 <HAL_GetTick>
 8006990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006992:	e009      	b.n	80069a8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006994:	f7fc fe98 	bl	80036c8 <HAL_GetTick>
 8006998:	4602      	mov	r2, r0
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d902      	bls.n	80069a8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	73fb      	strb	r3, [r7, #15]
        break;
 80069a6:	e005      	b.n	80069b4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80069a8:	4b2c      	ldr	r3, [pc, #176]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d1ef      	bne.n	8006994 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d14a      	bne.n	8006a50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d111      	bne.n	80069e4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069c0:	4b26      	ldr	r3, [pc, #152]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80069c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	6892      	ldr	r2, [r2, #8]
 80069d0:	0211      	lsls	r1, r2, #8
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68d2      	ldr	r2, [r2, #12]
 80069d6:	0912      	lsrs	r2, r2, #4
 80069d8:	0452      	lsls	r2, r2, #17
 80069da:	430a      	orrs	r2, r1
 80069dc:	491f      	ldr	r1, [pc, #124]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	614b      	str	r3, [r1, #20]
 80069e2:	e011      	b.n	8006a08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80069e4:	4b1d      	ldr	r3, [pc, #116]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80069ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6892      	ldr	r2, [r2, #8]
 80069f4:	0211      	lsls	r1, r2, #8
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6912      	ldr	r2, [r2, #16]
 80069fa:	0852      	lsrs	r2, r2, #1
 80069fc:	3a01      	subs	r2, #1
 80069fe:	0652      	lsls	r2, r2, #25
 8006a00:	430a      	orrs	r2, r1
 8006a02:	4916      	ldr	r1, [pc, #88]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a04:	4313      	orrs	r3, r2
 8006a06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006a08:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a13      	ldr	r2, [pc, #76]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a14:	f7fc fe58 	bl	80036c8 <HAL_GetTick>
 8006a18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a1a:	e009      	b.n	8006a30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a1c:	f7fc fe54 	bl	80036c8 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d902      	bls.n	8006a30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	73fb      	strb	r3, [r7, #15]
          break;
 8006a2e:	e005      	b.n	8006a3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006a30:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0ef      	beq.n	8006a1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d106      	bne.n	8006a50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006a42:	4b06      	ldr	r3, [pc, #24]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a44:	695a      	ldr	r2, [r3, #20]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	4904      	ldr	r1, [pc, #16]	; (8006a5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	40021000 	.word	0x40021000

08006a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e095      	b.n	8006b9e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d108      	bne.n	8006a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a82:	d009      	beq.n	8006a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	61da      	str	r2, [r3, #28]
 8006a8a:	e005      	b.n	8006a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fb f814 	bl	8001ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ace:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006ad8:	d902      	bls.n	8006ae0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e002      	b.n	8006ae6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ae4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006aee:	d007      	beq.n	8006b00 <HAL_SPI_Init+0xa0>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006af8:	d002      	beq.n	8006b00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	431a      	orrs	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	f003 0301 	and.w	r3, r3, #1
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b42:	ea42 0103 	orr.w	r1, r2, r3
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	0c1b      	lsrs	r3, r3, #16
 8006b5c:	f003 0204 	and.w	r2, r3, #4
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6e:	f003 0308 	and.w	r3, r3, #8
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006b7c:	ea42 0103 	orr.w	r1, r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	430a      	orrs	r2, r1
 8006b8c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}

08006ba6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ba6:	b580      	push	{r7, lr}
 8006ba8:	b082      	sub	sp, #8
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e040      	b.n	8006c3a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d106      	bne.n	8006bce <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7fa ffcd 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2224      	movs	r2, #36	; 0x24
 8006bd2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0201 	bic.w	r2, r2, #1
 8006be2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f8c1 	bl	8006d6c <UART_SetConfig>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e022      	b.n	8006c3a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d002      	beq.n	8006c02 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fb6d 	bl	80072dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0201 	orr.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 fbf4 	bl	8007420 <UART_CheckIdleState>
 8006c38:	4603      	mov	r3, r0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b08a      	sub	sp, #40	; 0x28
 8006c46:	af02      	add	r7, sp, #8
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	603b      	str	r3, [r7, #0]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c56:	2b20      	cmp	r3, #32
 8006c58:	f040 8082 	bne.w	8006d60 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <HAL_UART_Transmit+0x26>
 8006c62:	88fb      	ldrh	r3, [r7, #6]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d101      	bne.n	8006c6c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e07a      	b.n	8006d62 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Transmit+0x38>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e073      	b.n	8006d62 <HAL_UART_Transmit+0x120>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2221      	movs	r2, #33	; 0x21
 8006c8e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c90:	f7fc fd1a 	bl	80036c8 <HAL_GetTick>
 8006c94:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	88fa      	ldrh	r2, [r7, #6]
 8006ca2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cae:	d108      	bne.n	8006cc2 <HAL_UART_Transmit+0x80>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d104      	bne.n	8006cc2 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	e003      	b.n	8006cca <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006cd2:	e02d      	b.n	8006d30 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2180      	movs	r1, #128	; 0x80
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 fbe7 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e039      	b.n	8006d62 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10b      	bne.n	8006d0c <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	881a      	ldrh	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d00:	b292      	uxth	r2, r2
 8006d02:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	3302      	adds	r3, #2
 8006d08:	61bb      	str	r3, [r7, #24]
 8006d0a:	e008      	b.n	8006d1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	781a      	ldrb	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	b292      	uxth	r2, r2
 8006d16:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1cb      	bne.n	8006cd4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2200      	movs	r2, #0
 8006d44:	2140      	movs	r1, #64	; 0x40
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fbb3 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d001      	beq.n	8006d56 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e005      	b.n	8006d62 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
  }
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d70:	b08a      	sub	sp, #40	; 0x28
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	689a      	ldr	r2, [r3, #8]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	4ba4      	ldr	r3, [pc, #656]	; (800702c <UART_SetConfig+0x2c0>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006da4:	430b      	orrs	r3, r1
 8006da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	430a      	orrs	r2, r1
 8006dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a99      	ldr	r2, [pc, #612]	; (8007030 <UART_SetConfig+0x2c4>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d004      	beq.n	8006dd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de8:	430a      	orrs	r2, r1
 8006dea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a90      	ldr	r2, [pc, #576]	; (8007034 <UART_SetConfig+0x2c8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d126      	bne.n	8006e44 <UART_SetConfig+0xd8>
 8006df6:	4b90      	ldr	r3, [pc, #576]	; (8007038 <UART_SetConfig+0x2cc>)
 8006df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dfc:	f003 0303 	and.w	r3, r3, #3
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d81b      	bhi.n	8006e3c <UART_SetConfig+0xd0>
 8006e04:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <UART_SetConfig+0xa0>)
 8006e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0a:	bf00      	nop
 8006e0c:	08006e1d 	.word	0x08006e1d
 8006e10:	08006e2d 	.word	0x08006e2d
 8006e14:	08006e25 	.word	0x08006e25
 8006e18:	08006e35 	.word	0x08006e35
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e22:	e116      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006e24:	2302      	movs	r3, #2
 8006e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e2a:	e112      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e32:	e10e      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006e34:	2308      	movs	r3, #8
 8006e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3a:	e10a      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e42:	e106      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a7c      	ldr	r2, [pc, #496]	; (800703c <UART_SetConfig+0x2d0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d138      	bne.n	8006ec0 <UART_SetConfig+0x154>
 8006e4e:	4b7a      	ldr	r3, [pc, #488]	; (8007038 <UART_SetConfig+0x2cc>)
 8006e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e54:	f003 030c 	and.w	r3, r3, #12
 8006e58:	2b0c      	cmp	r3, #12
 8006e5a:	d82d      	bhi.n	8006eb8 <UART_SetConfig+0x14c>
 8006e5c:	a201      	add	r2, pc, #4	; (adr r2, 8006e64 <UART_SetConfig+0xf8>)
 8006e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e62:	bf00      	nop
 8006e64:	08006e99 	.word	0x08006e99
 8006e68:	08006eb9 	.word	0x08006eb9
 8006e6c:	08006eb9 	.word	0x08006eb9
 8006e70:	08006eb9 	.word	0x08006eb9
 8006e74:	08006ea9 	.word	0x08006ea9
 8006e78:	08006eb9 	.word	0x08006eb9
 8006e7c:	08006eb9 	.word	0x08006eb9
 8006e80:	08006eb9 	.word	0x08006eb9
 8006e84:	08006ea1 	.word	0x08006ea1
 8006e88:	08006eb9 	.word	0x08006eb9
 8006e8c:	08006eb9 	.word	0x08006eb9
 8006e90:	08006eb9 	.word	0x08006eb9
 8006e94:	08006eb1 	.word	0x08006eb1
 8006e98:	2300      	movs	r3, #0
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e9e:	e0d8      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ea6:	e0d4      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006ea8:	2304      	movs	r3, #4
 8006eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eae:	e0d0      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eb6:	e0cc      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006eb8:	2310      	movs	r3, #16
 8006eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ebe:	e0c8      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a5e      	ldr	r2, [pc, #376]	; (8007040 <UART_SetConfig+0x2d4>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d125      	bne.n	8006f16 <UART_SetConfig+0x1aa>
 8006eca:	4b5b      	ldr	r3, [pc, #364]	; (8007038 <UART_SetConfig+0x2cc>)
 8006ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006ed4:	2b30      	cmp	r3, #48	; 0x30
 8006ed6:	d016      	beq.n	8006f06 <UART_SetConfig+0x19a>
 8006ed8:	2b30      	cmp	r3, #48	; 0x30
 8006eda:	d818      	bhi.n	8006f0e <UART_SetConfig+0x1a2>
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d00a      	beq.n	8006ef6 <UART_SetConfig+0x18a>
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d814      	bhi.n	8006f0e <UART_SetConfig+0x1a2>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <UART_SetConfig+0x182>
 8006ee8:	2b10      	cmp	r3, #16
 8006eea:	d008      	beq.n	8006efe <UART_SetConfig+0x192>
 8006eec:	e00f      	b.n	8006f0e <UART_SetConfig+0x1a2>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef4:	e0ad      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006efc:	e0a9      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006efe:	2304      	movs	r3, #4
 8006f00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f04:	e0a5      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006f06:	2308      	movs	r3, #8
 8006f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f0c:	e0a1      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006f0e:	2310      	movs	r3, #16
 8006f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f14:	e09d      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a4a      	ldr	r2, [pc, #296]	; (8007044 <UART_SetConfig+0x2d8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d125      	bne.n	8006f6c <UART_SetConfig+0x200>
 8006f20:	4b45      	ldr	r3, [pc, #276]	; (8007038 <UART_SetConfig+0x2cc>)
 8006f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f2a:	2bc0      	cmp	r3, #192	; 0xc0
 8006f2c:	d016      	beq.n	8006f5c <UART_SetConfig+0x1f0>
 8006f2e:	2bc0      	cmp	r3, #192	; 0xc0
 8006f30:	d818      	bhi.n	8006f64 <UART_SetConfig+0x1f8>
 8006f32:	2b80      	cmp	r3, #128	; 0x80
 8006f34:	d00a      	beq.n	8006f4c <UART_SetConfig+0x1e0>
 8006f36:	2b80      	cmp	r3, #128	; 0x80
 8006f38:	d814      	bhi.n	8006f64 <UART_SetConfig+0x1f8>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <UART_SetConfig+0x1d8>
 8006f3e:	2b40      	cmp	r3, #64	; 0x40
 8006f40:	d008      	beq.n	8006f54 <UART_SetConfig+0x1e8>
 8006f42:	e00f      	b.n	8006f64 <UART_SetConfig+0x1f8>
 8006f44:	2300      	movs	r3, #0
 8006f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f4a:	e082      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f52:	e07e      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006f54:	2304      	movs	r3, #4
 8006f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f5a:	e07a      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006f5c:	2308      	movs	r3, #8
 8006f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f62:	e076      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006f64:	2310      	movs	r3, #16
 8006f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f6a:	e072      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a35      	ldr	r2, [pc, #212]	; (8007048 <UART_SetConfig+0x2dc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d12a      	bne.n	8006fcc <UART_SetConfig+0x260>
 8006f76:	4b30      	ldr	r3, [pc, #192]	; (8007038 <UART_SetConfig+0x2cc>)
 8006f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f84:	d01a      	beq.n	8006fbc <UART_SetConfig+0x250>
 8006f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f8a:	d81b      	bhi.n	8006fc4 <UART_SetConfig+0x258>
 8006f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f90:	d00c      	beq.n	8006fac <UART_SetConfig+0x240>
 8006f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f96:	d815      	bhi.n	8006fc4 <UART_SetConfig+0x258>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <UART_SetConfig+0x238>
 8006f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa0:	d008      	beq.n	8006fb4 <UART_SetConfig+0x248>
 8006fa2:	e00f      	b.n	8006fc4 <UART_SetConfig+0x258>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006faa:	e052      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006fac:	2302      	movs	r3, #2
 8006fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fb2:	e04e      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006fb4:	2304      	movs	r3, #4
 8006fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fba:	e04a      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006fbc:	2308      	movs	r3, #8
 8006fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fc2:	e046      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006fc4:	2310      	movs	r3, #16
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006fca:	e042      	b.n	8007052 <UART_SetConfig+0x2e6>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a17      	ldr	r2, [pc, #92]	; (8007030 <UART_SetConfig+0x2c4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d13a      	bne.n	800704c <UART_SetConfig+0x2e0>
 8006fd6:	4b18      	ldr	r3, [pc, #96]	; (8007038 <UART_SetConfig+0x2cc>)
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006fe0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fe4:	d01a      	beq.n	800701c <UART_SetConfig+0x2b0>
 8006fe6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006fea:	d81b      	bhi.n	8007024 <UART_SetConfig+0x2b8>
 8006fec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff0:	d00c      	beq.n	800700c <UART_SetConfig+0x2a0>
 8006ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ff6:	d815      	bhi.n	8007024 <UART_SetConfig+0x2b8>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <UART_SetConfig+0x298>
 8006ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007000:	d008      	beq.n	8007014 <UART_SetConfig+0x2a8>
 8007002:	e00f      	b.n	8007024 <UART_SetConfig+0x2b8>
 8007004:	2300      	movs	r3, #0
 8007006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800700a:	e022      	b.n	8007052 <UART_SetConfig+0x2e6>
 800700c:	2302      	movs	r3, #2
 800700e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007012:	e01e      	b.n	8007052 <UART_SetConfig+0x2e6>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800701a:	e01a      	b.n	8007052 <UART_SetConfig+0x2e6>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007022:	e016      	b.n	8007052 <UART_SetConfig+0x2e6>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800702a:	e012      	b.n	8007052 <UART_SetConfig+0x2e6>
 800702c:	efff69f3 	.word	0xefff69f3
 8007030:	40008000 	.word	0x40008000
 8007034:	40013800 	.word	0x40013800
 8007038:	40021000 	.word	0x40021000
 800703c:	40004400 	.word	0x40004400
 8007040:	40004800 	.word	0x40004800
 8007044:	40004c00 	.word	0x40004c00
 8007048:	40005000 	.word	0x40005000
 800704c:	2310      	movs	r3, #16
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a9f      	ldr	r2, [pc, #636]	; (80072d4 <UART_SetConfig+0x568>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d17a      	bne.n	8007152 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800705c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007060:	2b08      	cmp	r3, #8
 8007062:	d824      	bhi.n	80070ae <UART_SetConfig+0x342>
 8007064:	a201      	add	r2, pc, #4	; (adr r2, 800706c <UART_SetConfig+0x300>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	08007091 	.word	0x08007091
 8007070:	080070af 	.word	0x080070af
 8007074:	08007099 	.word	0x08007099
 8007078:	080070af 	.word	0x080070af
 800707c:	0800709f 	.word	0x0800709f
 8007080:	080070af 	.word	0x080070af
 8007084:	080070af 	.word	0x080070af
 8007088:	080070af 	.word	0x080070af
 800708c:	080070a7 	.word	0x080070a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007090:	f7fe ff8e 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8007094:	61f8      	str	r0, [r7, #28]
        break;
 8007096:	e010      	b.n	80070ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007098:	4b8f      	ldr	r3, [pc, #572]	; (80072d8 <UART_SetConfig+0x56c>)
 800709a:	61fb      	str	r3, [r7, #28]
        break;
 800709c:	e00d      	b.n	80070ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800709e:	f7fe feef 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 80070a2:	61f8      	str	r0, [r7, #28]
        break;
 80070a4:	e009      	b.n	80070ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070aa:	61fb      	str	r3, [r7, #28]
        break;
 80070ac:	e005      	b.n	80070ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 80fb 	beq.w	80072b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4413      	add	r3, r2
 80070cc:	69fa      	ldr	r2, [r7, #28]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d305      	bcc.n	80070de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d903      	bls.n	80070e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070e4:	e0e8      	b.n	80072b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80070e6:	69fb      	ldr	r3, [r7, #28]
 80070e8:	2200      	movs	r2, #0
 80070ea:	461c      	mov	r4, r3
 80070ec:	4615      	mov	r5, r2
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	f04f 0300 	mov.w	r3, #0
 80070f6:	022b      	lsls	r3, r5, #8
 80070f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80070fc:	0222      	lsls	r2, r4, #8
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	6849      	ldr	r1, [r1, #4]
 8007102:	0849      	lsrs	r1, r1, #1
 8007104:	2000      	movs	r0, #0
 8007106:	4688      	mov	r8, r1
 8007108:	4681      	mov	r9, r0
 800710a:	eb12 0a08 	adds.w	sl, r2, r8
 800710e:	eb43 0b09 	adc.w	fp, r3, r9
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	603b      	str	r3, [r7, #0]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007120:	4650      	mov	r0, sl
 8007122:	4659      	mov	r1, fp
 8007124:	f7f9 fd40 	bl	8000ba8 <__aeabi_uldivmod>
 8007128:	4602      	mov	r2, r0
 800712a:	460b      	mov	r3, r1
 800712c:	4613      	mov	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007136:	d308      	bcc.n	800714a <UART_SetConfig+0x3de>
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800713e:	d204      	bcs.n	800714a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69ba      	ldr	r2, [r7, #24]
 8007146:	60da      	str	r2, [r3, #12]
 8007148:	e0b6      	b.n	80072b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007150:	e0b2      	b.n	80072b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800715a:	d15e      	bne.n	800721a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800715c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007160:	2b08      	cmp	r3, #8
 8007162:	d828      	bhi.n	80071b6 <UART_SetConfig+0x44a>
 8007164:	a201      	add	r2, pc, #4	; (adr r2, 800716c <UART_SetConfig+0x400>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	08007191 	.word	0x08007191
 8007170:	08007199 	.word	0x08007199
 8007174:	080071a1 	.word	0x080071a1
 8007178:	080071b7 	.word	0x080071b7
 800717c:	080071a7 	.word	0x080071a7
 8007180:	080071b7 	.word	0x080071b7
 8007184:	080071b7 	.word	0x080071b7
 8007188:	080071b7 	.word	0x080071b7
 800718c:	080071af 	.word	0x080071af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007190:	f7fe ff0e 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8007194:	61f8      	str	r0, [r7, #28]
        break;
 8007196:	e014      	b.n	80071c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007198:	f7fe ff20 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 800719c:	61f8      	str	r0, [r7, #28]
        break;
 800719e:	e010      	b.n	80071c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a0:	4b4d      	ldr	r3, [pc, #308]	; (80072d8 <UART_SetConfig+0x56c>)
 80071a2:	61fb      	str	r3, [r7, #28]
        break;
 80071a4:	e00d      	b.n	80071c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a6:	f7fe fe6b 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 80071aa:	61f8      	str	r0, [r7, #28]
        break;
 80071ac:	e009      	b.n	80071c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071b2:	61fb      	str	r3, [r7, #28]
        break;
 80071b4:	e005      	b.n	80071c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d077      	beq.n	80072b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	005a      	lsls	r2, r3, #1
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	085b      	lsrs	r3, r3, #1
 80071d2:	441a      	add	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b0f      	cmp	r3, #15
 80071e2:	d916      	bls.n	8007212 <UART_SetConfig+0x4a6>
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ea:	d212      	bcs.n	8007212 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f023 030f 	bic.w	r3, r3, #15
 80071f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	085b      	lsrs	r3, r3, #1
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f003 0307 	and.w	r3, r3, #7
 8007200:	b29a      	uxth	r2, r3
 8007202:	8afb      	ldrh	r3, [r7, #22]
 8007204:	4313      	orrs	r3, r2
 8007206:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	8afa      	ldrh	r2, [r7, #22]
 800720e:	60da      	str	r2, [r3, #12]
 8007210:	e052      	b.n	80072b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007218:	e04e      	b.n	80072b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800721a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800721e:	2b08      	cmp	r3, #8
 8007220:	d827      	bhi.n	8007272 <UART_SetConfig+0x506>
 8007222:	a201      	add	r2, pc, #4	; (adr r2, 8007228 <UART_SetConfig+0x4bc>)
 8007224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007228:	0800724d 	.word	0x0800724d
 800722c:	08007255 	.word	0x08007255
 8007230:	0800725d 	.word	0x0800725d
 8007234:	08007273 	.word	0x08007273
 8007238:	08007263 	.word	0x08007263
 800723c:	08007273 	.word	0x08007273
 8007240:	08007273 	.word	0x08007273
 8007244:	08007273 	.word	0x08007273
 8007248:	0800726b 	.word	0x0800726b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800724c:	f7fe feb0 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 8007250:	61f8      	str	r0, [r7, #28]
        break;
 8007252:	e014      	b.n	800727e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007254:	f7fe fec2 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8007258:	61f8      	str	r0, [r7, #28]
        break;
 800725a:	e010      	b.n	800727e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800725c:	4b1e      	ldr	r3, [pc, #120]	; (80072d8 <UART_SetConfig+0x56c>)
 800725e:	61fb      	str	r3, [r7, #28]
        break;
 8007260:	e00d      	b.n	800727e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007262:	f7fe fe0d 	bl	8005e80 <HAL_RCC_GetSysClockFreq>
 8007266:	61f8      	str	r0, [r7, #28]
        break;
 8007268:	e009      	b.n	800727e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800726e:	61fb      	str	r3, [r7, #28]
        break;
 8007270:	e005      	b.n	800727e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800727c:	bf00      	nop
    }

    if (pclk != 0U)
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d019      	beq.n	80072b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	085a      	lsrs	r2, r3, #1
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	441a      	add	r2, r3
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	fbb2 f3f3 	udiv	r3, r2, r3
 8007296:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b0f      	cmp	r3, #15
 800729c:	d909      	bls.n	80072b2 <UART_SetConfig+0x546>
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a4:	d205      	bcs.n	80072b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	b29a      	uxth	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60da      	str	r2, [r3, #12]
 80072b0:	e002      	b.n	80072b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80072c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3728      	adds	r7, #40	; 0x28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072d2:	bf00      	nop
 80072d4:	40008000 	.word	0x40008000
 80072d8:	00f42400 	.word	0x00f42400

080072dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01a      	beq.n	80073f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073da:	d10a      	bne.n	80073f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	605a      	str	r2, [r3, #4]
  }
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af02      	add	r7, sp, #8
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007430:	f7fc f94a 	bl	80036c8 <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b08      	cmp	r3, #8
 8007442:	d10e      	bne.n	8007462 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f82d 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e023      	b.n	80074aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 0304 	and.w	r3, r3, #4
 800746c:	2b04      	cmp	r3, #4
 800746e:	d10e      	bne.n	800748e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2200      	movs	r2, #0
 800747a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 f817 	bl	80074b2 <UART_WaitOnFlagUntilTimeout>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e00d      	b.n	80074aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2220      	movs	r2, #32
 8007492:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b09c      	sub	sp, #112	; 0x70
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	60f8      	str	r0, [r7, #12]
 80074ba:	60b9      	str	r1, [r7, #8]
 80074bc:	603b      	str	r3, [r7, #0]
 80074be:	4613      	mov	r3, r2
 80074c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074c2:	e0a5      	b.n	8007610 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ca:	f000 80a1 	beq.w	8007610 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ce:	f7fc f8fb 	bl	80036c8 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074da:	429a      	cmp	r2, r3
 80074dc:	d302      	bcc.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80074de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d13e      	bne.n	8007562 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ec:	e853 3f00 	ldrex	r3, [r3]
 80074f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074f8:	667b      	str	r3, [r7, #100]	; 0x64
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007504:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e6      	bne.n	80074e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007520:	e853 3f00 	ldrex	r3, [r3]
 8007524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	f023 0301 	bic.w	r3, r3, #1
 800752c:	663b      	str	r3, [r7, #96]	; 0x60
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007536:	64ba      	str	r2, [r7, #72]	; 0x48
 8007538:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800753c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e5      	bne.n	8007516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e067      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0304 	and.w	r3, r3, #4
 800756c:	2b00      	cmp	r3, #0
 800756e:	d04f      	beq.n	8007610 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	69db      	ldr	r3, [r3, #28]
 8007576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800757a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800757e:	d147      	bne.n	8007610 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007588:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800759e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075a8:	637b      	str	r3, [r7, #52]	; 0x34
 80075aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b0:	e841 2300 	strex	r3, r2, [r1]
 80075b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e6      	bne.n	800758a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3308      	adds	r3, #8
 80075c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	613b      	str	r3, [r7, #16]
   return(result);
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f023 0301 	bic.w	r3, r3, #1
 80075d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	3308      	adds	r3, #8
 80075da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075dc:	623a      	str	r2, [r7, #32]
 80075de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e0:	69f9      	ldr	r1, [r7, #28]
 80075e2:	6a3a      	ldr	r2, [r7, #32]
 80075e4:	e841 2300 	strex	r3, r2, [r1]
 80075e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1e5      	bne.n	80075bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2220      	movs	r2, #32
 80075f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2220      	movs	r2, #32
 80075fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2220      	movs	r2, #32
 8007600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e010      	b.n	8007632 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69da      	ldr	r2, [r3, #28]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	4013      	ands	r3, r2
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	429a      	cmp	r2, r3
 800761e:	bf0c      	ite	eq
 8007620:	2301      	moveq	r3, #1
 8007622:	2300      	movne	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	461a      	mov	r2, r3
 8007628:	79fb      	ldrb	r3, [r7, #7]
 800762a:	429a      	cmp	r2, r3
 800762c:	f43f af4a 	beq.w	80074c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3770      	adds	r7, #112	; 0x70
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800763a:	b084      	sub	sp, #16
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	f107 001c 	add.w	r0, r7, #28
 8007648:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fa6f 	bl	8007b3c <USB_CoreReset>
 800765e:	4603      	mov	r3, r0
 8007660:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800766c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	639a      	str	r2, [r3, #56]	; 0x38
 8007674:	e005      	b.n	8007682 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800768e:	b004      	add	sp, #16
 8007690:	4770      	bx	lr

08007692 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f023 0201 	bic.w	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80076a6:	2300      	movs	r3, #0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d115      	bne.n	8007702 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80076e2:	2001      	movs	r0, #1
 80076e4:	f7fb fffc 	bl	80036e0 <HAL_Delay>
      ms++;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fa16 	bl	8007b20 <USB_GetMode>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d01e      	beq.n	8007738 <USB_SetCurrentMode+0x84>
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2b31      	cmp	r3, #49	; 0x31
 80076fe:	d9f0      	bls.n	80076e2 <USB_SetCurrentMode+0x2e>
 8007700:	e01a      	b.n	8007738 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d115      	bne.n	8007734 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007714:	2001      	movs	r0, #1
 8007716:	f7fb ffe3 	bl	80036e0 <HAL_Delay>
      ms++;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3301      	adds	r3, #1
 800771e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f9fd 	bl	8007b20 <USB_GetMode>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d005      	beq.n	8007738 <USB_SetCurrentMode+0x84>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2b31      	cmp	r3, #49	; 0x31
 8007730:	d9f0      	bls.n	8007714 <USB_SetCurrentMode+0x60>
 8007732:	e001      	b.n	8007738 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e005      	b.n	8007744 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b32      	cmp	r3, #50	; 0x32
 800773c:	d101      	bne.n	8007742 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800774c:	b084      	sub	sp, #16
 800774e:	b580      	push	{r7, lr}
 8007750:	b086      	sub	sp, #24
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800775a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007766:	2300      	movs	r3, #0
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	e009      	b.n	8007780 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	3340      	adds	r3, #64	; 0x40
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	2200      	movs	r2, #0
 8007778:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	3301      	adds	r3, #1
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	2b0e      	cmp	r3, #14
 8007784:	d9f2      	bls.n	800776c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d11c      	bne.n	80077c6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800779a:	f043 0302 	orr.w	r3, r3, #2
 800779e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	601a      	str	r2, [r3, #0]
 80077c4:	e005      	b.n	80077d2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077d8:	461a      	mov	r2, r3
 80077da:	2300      	movs	r3, #0
 80077dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e4:	4619      	mov	r1, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ec:	461a      	mov	r2, r3
 80077ee:	680b      	ldr	r3, [r1, #0]
 80077f0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077f2:	2103      	movs	r1, #3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f959 	bl	8007aac <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077fa:	2110      	movs	r1, #16
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f8f1 	bl	80079e4 <USB_FlushTxFifo>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f000 f91d 	bl	8007a4c <USB_FlushRxFifo>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007822:	461a      	mov	r2, r3
 8007824:	2300      	movs	r3, #0
 8007826:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782e:	461a      	mov	r2, r3
 8007830:	2300      	movs	r3, #0
 8007832:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783a:	461a      	mov	r2, r3
 800783c:	2300      	movs	r3, #0
 800783e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007840:	2300      	movs	r3, #0
 8007842:	613b      	str	r3, [r7, #16]
 8007844:	e043      	b.n	80078ce <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	015a      	lsls	r2, r3, #5
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4413      	add	r3, r2
 800784e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007858:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800785c:	d118      	bne.n	8007890 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d10a      	bne.n	800787a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007870:	461a      	mov	r2, r3
 8007872:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	e013      	b.n	80078a2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	4413      	add	r3, r2
 8007882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007886:	461a      	mov	r2, r3
 8007888:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	e008      	b.n	80078a2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	461a      	mov	r2, r3
 800789e:	2300      	movs	r3, #0
 80078a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	015a      	lsls	r2, r3, #5
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ae:	461a      	mov	r2, r3
 80078b0:	2300      	movs	r3, #0
 80078b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c0:	461a      	mov	r2, r3
 80078c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	3301      	adds	r3, #1
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d3b7      	bcc.n	8007846 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	613b      	str	r3, [r7, #16]
 80078da:	e043      	b.n	8007964 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078f2:	d118      	bne.n	8007926 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10a      	bne.n	8007910 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007906:	461a      	mov	r2, r3
 8007908:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	e013      	b.n	8007938 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	4413      	add	r3, r2
 8007918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800791c:	461a      	mov	r2, r3
 800791e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007922:	6013      	str	r3, [r2, #0]
 8007924:	e008      	b.n	8007938 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	4413      	add	r3, r2
 800792e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007932:	461a      	mov	r2, r3
 8007934:	2300      	movs	r3, #0
 8007936:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007944:	461a      	mov	r2, r3
 8007946:	2300      	movs	r3, #0
 8007948:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	015a      	lsls	r2, r3, #5
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	4413      	add	r3, r2
 8007952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007956:	461a      	mov	r2, r3
 8007958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800795c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3301      	adds	r3, #1
 8007962:	613b      	str	r3, [r7, #16]
 8007964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	429a      	cmp	r2, r3
 800796a:	d3b7      	bcc.n	80078dc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800797a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800797e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800798c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	f043 0210 	orr.w	r2, r3, #16
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	699a      	ldr	r2, [r3, #24]
 800799e:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <USB_DevInit+0x294>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80079a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d005      	beq.n	80079b8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	f043 0208 	orr.w	r2, r3, #8
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d107      	bne.n	80079ce <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079c6:	f043 0304 	orr.w	r3, r3, #4
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3718      	adds	r7, #24
 80079d4:	46bd      	mov	sp, r7
 80079d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079da:	b004      	add	sp, #16
 80079dc:	4770      	bx	lr
 80079de:	bf00      	nop
 80079e0:	803c3800 	.word	0x803c3800

080079e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4a13      	ldr	r2, [pc, #76]	; (8007a48 <USB_FlushTxFifo+0x64>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d901      	bls.n	8007a04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e01b      	b.n	8007a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	daf2      	bge.n	80079f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	019b      	lsls	r3, r3, #6
 8007a14:	f043 0220 	orr.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	4a08      	ldr	r2, [pc, #32]	; (8007a48 <USB_FlushTxFifo+0x64>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d901      	bls.n	8007a2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e006      	b.n	8007a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b20      	cmp	r3, #32
 8007a38:	d0f0      	beq.n	8007a1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	00030d40 	.word	0x00030d40

08007a4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	4a11      	ldr	r2, [pc, #68]	; (8007aa8 <USB_FlushRxFifo+0x5c>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d901      	bls.n	8007a6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e018      	b.n	8007a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	691b      	ldr	r3, [r3, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	daf2      	bge.n	8007a58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2210      	movs	r2, #16
 8007a7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	4a08      	ldr	r2, [pc, #32]	; (8007aa8 <USB_FlushRxFifo+0x5c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d901      	bls.n	8007a8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e006      	b.n	8007a9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0310 	and.w	r3, r3, #16
 8007a96:	2b10      	cmp	r3, #16
 8007a98:	d0f0      	beq.n	8007a7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3714      	adds	r7, #20
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	00030d40 	.word	0x00030d40

08007aac <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007acc:	4313      	orrs	r3, r2
 8007ace:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b085      	sub	sp, #20
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007af8:	f023 0303 	bic.w	r3, r3, #3
 8007afc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b0c:	f043 0302 	orr.w	r3, r3, #2
 8007b10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	f003 0301 	and.w	r3, r3, #1
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <USB_CoreReset+0x64>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d901      	bls.n	8007b5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b56:	2303      	movs	r3, #3
 8007b58:	e01b      	b.n	8007b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	daf2      	bge.n	8007b48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f043 0201 	orr.w	r2, r3, #1
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3301      	adds	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <USB_CoreReset+0x64>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d901      	bls.n	8007b84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e006      	b.n	8007b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d0f0      	beq.n	8007b72 <USB_CoreReset+0x36>

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr
 8007b9e:	bf00      	nop
 8007ba0:	00030d40 	.word	0x00030d40

08007ba4 <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8007bb2:	f107 030c 	add.w	r3, r7, #12
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	2101      	movs	r1, #1
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fad0 	bl	8008160 <ai_platform_get_activations_map>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d029      	beq.n	8007c1a <network_configure_activations+0x76>
    /* Updating activations (byte) offsets */
    conv1d_conv2d_output_array.data = AI_PTR(activations_map[0] + 64);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	3340      	adds	r3, #64	; 0x40
 8007bca:	4a19      	ldr	r2, [pc, #100]	; (8007c30 <network_configure_activations+0x8c>)
 8007bcc:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 64);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	3340      	adds	r3, #64	; 0x40
 8007bd2:	4a17      	ldr	r2, [pc, #92]	; (8007c30 <network_configure_activations+0x8c>)
 8007bd4:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_output_array.data = AI_PTR(activations_map[0] + 0);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4a16      	ldr	r2, [pc, #88]	; (8007c34 <network_configure_activations+0x90>)
 8007bda:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4a15      	ldr	r2, [pc, #84]	; (8007c34 <network_configure_activations+0x90>)
 8007be0:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(activations_map[0] + 704);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8007be8:	4a13      	ldr	r2, [pc, #76]	; (8007c38 <network_configure_activations+0x94>)
 8007bea:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(activations_map[0] + 704);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8007bf2:	4a11      	ldr	r2, [pc, #68]	; (8007c38 <network_configure_activations+0x94>)
 8007bf4:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(activations_map[0] + 0);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4a10      	ldr	r2, [pc, #64]	; (8007c3c <network_configure_activations+0x98>)
 8007bfa:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4a0f      	ldr	r2, [pc, #60]	; (8007c3c <network_configure_activations+0x98>)
 8007c00:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(activations_map[0] + 256);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c08:	4a0d      	ldr	r2, [pc, #52]	; (8007c40 <network_configure_activations+0x9c>)
 8007c0a:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(activations_map[0] + 256);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007c12:	4a0b      	ldr	r2, [pc, #44]	; (8007c40 <network_configure_activations+0x9c>)
 8007c14:	60d3      	str	r3, [r2, #12]
    
    return true;
 8007c16:	2301      	movs	r3, #1
 8007c18:	e005      	b.n	8007c26 <network_configure_activations+0x82>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8007c1a:	2213      	movs	r2, #19
 8007c1c:	2130      	movs	r1, #48	; 0x30
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fb86 	bl	8008330 <ai_platform_network_set_error>
  return false;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	20000038 	.word	0x20000038
 8007c34:	20000048 	.word	0x20000048
 8007c38:	20000058 	.word	0x20000058
 8007c3c:	20000068 	.word	0x20000068
 8007c40:	20000078 	.word	0x20000078

08007c44 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8007c52:	f107 030c 	add.w	r3, r7, #12
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	2101      	movs	r1, #1
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 fa30 	bl	80080c0 <ai_platform_get_weights_map>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 8084 	beq.w	8007d70 <network_configure_weights+0x12c>
    /* Updating weights (byte) offsets */
    
    conv1d_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8007c68:	4b46      	ldr	r3, [pc, #280]	; (8007d84 <network_configure_weights+0x140>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c70:	4a44      	ldr	r2, [pc, #272]	; (8007d84 <network_configure_weights+0x140>)
 8007c72:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4a43      	ldr	r2, [pc, #268]	; (8007d84 <network_configure_weights+0x140>)
 8007c78:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4a41      	ldr	r2, [pc, #260]	; (8007d84 <network_configure_weights+0x140>)
 8007c7e:	60d3      	str	r3, [r2, #12]
    conv1d_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8007c80:	4b41      	ldr	r3, [pc, #260]	; (8007d88 <network_configure_weights+0x144>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c88:	4a3f      	ldr	r2, [pc, #252]	; (8007d88 <network_configure_weights+0x144>)
 8007c8a:	6013      	str	r3, [r2, #0]
    conv1d_conv2d_bias_array.data = AI_PTR(weights_map[0] + 576);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8007c92:	4a3d      	ldr	r2, [pc, #244]	; (8007d88 <network_configure_weights+0x144>)
 8007c94:	6093      	str	r3, [r2, #8]
    conv1d_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 576);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8007c9c:	4a3a      	ldr	r2, [pc, #232]	; (8007d88 <network_configure_weights+0x144>)
 8007c9e:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8007ca0:	4b3a      	ldr	r3, [pc, #232]	; (8007d8c <network_configure_weights+0x148>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ca8:	4a38      	ldr	r2, [pc, #224]	; (8007d8c <network_configure_weights+0x148>)
 8007caa:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_weights_array.data = AI_PTR(weights_map[0] + 640);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007cb2:	4a36      	ldr	r2, [pc, #216]	; (8007d8c <network_configure_weights+0x148>)
 8007cb4:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 640);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007cbc:	4a33      	ldr	r2, [pc, #204]	; (8007d8c <network_configure_weights+0x148>)
 8007cbe:	60d3      	str	r3, [r2, #12]
    conv1d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8007cc0:	4b33      	ldr	r3, [pc, #204]	; (8007d90 <network_configure_weights+0x14c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007cc8:	4a31      	ldr	r2, [pc, #196]	; (8007d90 <network_configure_weights+0x14c>)
 8007cca:	6013      	str	r3, [r2, #0]
    conv1d_1_conv2d_bias_array.data = AI_PTR(weights_map[0] + 2176);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8007cd2:	4a2f      	ldr	r2, [pc, #188]	; (8007d90 <network_configure_weights+0x14c>)
 8007cd4:	6093      	str	r3, [r2, #8]
    conv1d_1_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 2176);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 8007cdc:	4a2c      	ldr	r2, [pc, #176]	; (8007d90 <network_configure_weights+0x14c>)
 8007cde:	60d3      	str	r3, [r2, #12]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8007ce0:	4b2c      	ldr	r3, [pc, #176]	; (8007d94 <network_configure_weights+0x150>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ce8:	4a2a      	ldr	r2, [pc, #168]	; (8007d94 <network_configure_weights+0x150>)
 8007cea:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(weights_map[0] + 2208);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8007cf2:	4a28      	ldr	r2, [pc, #160]	; (8007d94 <network_configure_weights+0x150>)
 8007cf4:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(weights_map[0] + 2208);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 8007cfc:	4a25      	ldr	r2, [pc, #148]	; (8007d94 <network_configure_weights+0x150>)
 8007cfe:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8007d00:	4b25      	ldr	r3, [pc, #148]	; (8007d98 <network_configure_weights+0x154>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d08:	4a23      	ldr	r2, [pc, #140]	; (8007d98 <network_configure_weights+0x154>)
 8007d0a:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(weights_map[0] + 47264);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8007d12:	33a0      	adds	r3, #160	; 0xa0
 8007d14:	4a20      	ldr	r2, [pc, #128]	; (8007d98 <network_configure_weights+0x154>)
 8007d16:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(weights_map[0] + 47264);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f503 4338 	add.w	r3, r3, #47104	; 0xb800
 8007d1e:	33a0      	adds	r3, #160	; 0xa0
 8007d20:	4a1d      	ldr	r2, [pc, #116]	; (8007d98 <network_configure_weights+0x154>)
 8007d22:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8007d24:	4b1d      	ldr	r3, [pc, #116]	; (8007d9c <network_configure_weights+0x158>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d2c:	4a1b      	ldr	r2, [pc, #108]	; (8007d9c <network_configure_weights+0x158>)
 8007d2e:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(weights_map[0] + 47520);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 8007d36:	33a0      	adds	r3, #160	; 0xa0
 8007d38:	4a18      	ldr	r2, [pc, #96]	; (8007d9c <network_configure_weights+0x158>)
 8007d3a:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(weights_map[0] + 47520);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 4339 	add.w	r3, r3, #47360	; 0xb900
 8007d42:	33a0      	adds	r3, #160	; 0xa0
 8007d44:	4a15      	ldr	r2, [pc, #84]	; (8007d9c <network_configure_weights+0x158>)
 8007d46:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8007d48:	4b15      	ldr	r3, [pc, #84]	; (8007da0 <network_configure_weights+0x15c>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d50:	4a13      	ldr	r2, [pc, #76]	; (8007da0 <network_configure_weights+0x15c>)
 8007d52:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(weights_map[0] + 48288);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8007d5a:	33a0      	adds	r3, #160	; 0xa0
 8007d5c:	4a10      	ldr	r2, [pc, #64]	; (8007da0 <network_configure_weights+0x15c>)
 8007d5e:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(weights_map[0] + 48288);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8007d66:	33a0      	adds	r3, #160	; 0xa0
 8007d68:	4a0d      	ldr	r2, [pc, #52]	; (8007da0 <network_configure_weights+0x15c>)
 8007d6a:	60d3      	str	r3, [r2, #12]
    return true;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e005      	b.n	8007d7c <network_configure_weights+0x138>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8007d70:	2212      	movs	r2, #18
 8007d72:	2130      	movs	r1, #48	; 0x30
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fadb 	bl	8008330 <ai_platform_network_set_error>
  return false;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20000098 	.word	0x20000098
 8007d88:	200000a8 	.word	0x200000a8
 8007d8c:	200000b8 	.word	0x200000b8
 8007d90:	200000c8 	.word	0x200000c8
 8007d94:	200000d8 	.word	0x200000d8
 8007d98:	200000e8 	.word	0x200000e8
 8007d9c:	200000f8 	.word	0x200000f8
 8007da0:	20000108 	.word	0x20000108

08007da4 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa45 	bl	800823c <ai_platform_network_get_error>
 8007db2:	4603      	mov	r3, r0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3708      	adds	r7, #8
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af02      	add	r7, sp, #8
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9301      	str	r3, [sp, #4]
 8007dca:	2305      	movs	r3, #5
 8007dcc:	9300      	str	r3, [sp, #0]
 8007dce:	2301      	movs	r3, #1
 8007dd0:	4a04      	ldr	r2, [pc, #16]	; (8007de4 <ai_network_create+0x28>)
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fc9f 	bl	8008718 <ai_platform_network_create>
 8007dda:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	200007d8 	.word	0x200007d8

08007de8 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b096      	sub	sp, #88	; 0x58
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8007df4:	2100      	movs	r1, #0
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f7ff ffe0 	bl	8007dbc <ai_network_create>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8007e00:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <ai_network_create_and_init+0x24>
        return err;
 8007e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e0a:	e05d      	b.n	8007ec8 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8007e0c:	f107 0314 	add.w	r3, r7, #20
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 f8dd 	bl	8007fd0 <ai_network_data_params_get>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f083 0301 	eor.w	r3, r3, #1
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d008      	beq.n	8007e34 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff ffbc 	bl	8007da4 <ai_network_get_error>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8007e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e32:	e049      	b.n	8007ec8 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d016      	beq.n	8007e68 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	657b      	str	r3, [r7, #84]	; 0x54
 8007e3e:	e00e      	b.n	8007e5e <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8007e40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	4413      	add	r3, r2
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	330c      	adds	r3, #12
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 f91e 	bl	8008094 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8007e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	657b      	str	r3, [r7, #84]	; 0x54
 8007e5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e60:	461a      	mov	r2, r3
 8007e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e64:	4293      	cmp	r3, r2
 8007e66:	dbeb      	blt.n	8007e40 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d016      	beq.n	8007e9c <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	653b      	str	r3, [r7, #80]	; 0x50
 8007e72:	e00e      	b.n	8007e92 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8007e74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	f107 0314 	add.w	r3, r7, #20
 8007e84:	3304      	adds	r3, #4
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f904 	bl	8008094 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8007e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8e:	3301      	adds	r3, #1
 8007e90:	653b      	str	r3, [r7, #80]	; 0x50
 8007e92:	8b7b      	ldrh	r3, [r7, #26]
 8007e94:	461a      	mov	r2, r3
 8007e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	dbeb      	blt.n	8007e74 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f107 0214 	add.w	r2, r7, #20
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f846 	bl	8007f38 <ai_network_init>
 8007eac:	4603      	mov	r3, r0
 8007eae:	f083 0301 	eor.w	r3, r3, #1
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d006      	beq.n	8007ec6 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7ff ff71 	bl	8007da4 <ai_network_get_error>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8007ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3758      	adds	r7, #88	; 0x58
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d104      	bne.n	8007eea <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007ee0:	4b06      	ldr	r3, [pc, #24]	; (8007efc <ai_network_inputs_get+0x2c>)
 8007ee2:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a06      	ldr	r2, [pc, #24]	; (8007f00 <ai_network_inputs_get+0x30>)
 8007ee8:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fa25 	bl	800833c <ai_platform_inputs_get>
 8007ef2:	4603      	mov	r3, r0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	200007d8 	.word	0x200007d8
 8007f00:	a1c00100 	.word	0xa1c00100

08007f04 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d104      	bne.n	8007f1e <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007f14:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <ai_network_outputs_get+0x2c>)
 8007f16:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a06      	ldr	r2, [pc, #24]	; (8007f34 <ai_network_outputs_get+0x30>)
 8007f1c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 faff 	bl	8008524 <ai_platform_outputs_get>
 8007f26:	4603      	mov	r3, r0
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	200007d8 	.word	0x200007d8
 8007f34:	a1c00100 	.word	0xa1c00100

08007f38 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fcc7 	bl	80088d8 <ai_platform_network_init>
 8007f4a:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <ai_network_init+0x1e>
 8007f52:	2300      	movs	r3, #0
 8007f54:	e028      	b.n	8007fa8 <ai_network_init+0x70>

  ai_bool ok = true;
 8007f56:	2301      	movs	r3, #1
 8007f58:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f7ff fe71 	bl	8007c44 <network_configure_weights>
 8007f62:	4603      	mov	r3, r0
 8007f64:	461a      	mov	r2, r3
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	4013      	ands	r3, r2
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	bf14      	ite	ne
 8007f6e:	2301      	movne	r3, #1
 8007f70:	2300      	moveq	r3, #0
 8007f72:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f7ff fe14 	bl	8007ba4 <network_configure_activations>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	461a      	mov	r2, r3
 8007f80:	7afb      	ldrb	r3, [r7, #11]
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bf14      	ite	ne
 8007f88:	2301      	movne	r3, #1
 8007f8a:	2300      	moveq	r3, #0
 8007f8c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fdae 	bl	8008af0 <ai_platform_network_post_init>
 8007f94:	4603      	mov	r3, r0
 8007f96:	461a      	mov	r2, r3
 8007f98:	7afb      	ldrb	r3, [r7, #11]
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bf14      	ite	ne
 8007fa0:	2301      	movne	r3, #1
 8007fa2:	2300      	moveq	r3, #0
 8007fa4:	72fb      	strb	r3, [r7, #11]

  return ok;
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 fe29 	bl	8008c18 <ai_platform_network_process>
 8007fc6:	4603      	mov	r3, r0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3710      	adds	r7, #16
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <ai_network_data_params_get+0x12>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e016      	b.n	8008010 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8007fe2:	4a0d      	ldr	r2, [pc, #52]	; (8008018 <ai_network_data_params_get+0x48>)
 8007fe4:	f107 0310 	add.w	r3, r7, #16
 8007fe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007fec:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8007ff0:	4a0a      	ldr	r2, [pc, #40]	; (800801c <ai_network_data_params_get+0x4c>)
 8007ff2:	f107 0308 	add.w	r3, r7, #8
 8007ff6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007ffa:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8007ffe:	f107 0210 	add.w	r2, r7, #16
 8008002:	f107 0308 	add.w	r3, r7, #8
 8008006:	4619      	mov	r1, r3
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f8fb 	bl	8008204 <ai_platform_bind_network_params>
 800800e:	4603      	mov	r3, r0
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	0800dde8 	.word	0x0800dde8
 800801c:	0800ddf0 	.word	0x0800ddf0

08008020 <ai_buffer_get_size>:
 8008020:	b358      	cbz	r0, 800807a <ai_buffer_get_size+0x5a>
 8008022:	b430      	push	{r4, r5}
 8008024:	6803      	ldr	r3, [r0, #0]
 8008026:	4d15      	ldr	r5, [pc, #84]	; (800807c <ai_buffer_get_size+0x5c>)
 8008028:	6984      	ldr	r4, [r0, #24]
 800802a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800802e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008032:	42ab      	cmp	r3, r5
 8008034:	6862      	ldr	r2, [r4, #4]
 8008036:	d01a      	beq.n	800806e <ai_buffer_get_size+0x4e>
 8008038:	7d03      	ldrb	r3, [r0, #20]
 800803a:	6941      	ldr	r1, [r0, #20]
 800803c:	f1a3 0301 	sub.w	r3, r3, #1
 8008040:	fab3 f383 	clz	r3, r3
 8008044:	095b      	lsrs	r3, r3, #5
 8008046:	f3c1 2117 	ubfx	r1, r1, #8, #24
 800804a:	428b      	cmp	r3, r1
 800804c:	da0b      	bge.n	8008066 <ai_buffer_get_size+0x46>
 800804e:	2b01      	cmp	r3, #1
 8008050:	d102      	bne.n	8008058 <ai_buffer_get_size+0x38>
 8008052:	2902      	cmp	r1, #2
 8008054:	d007      	beq.n	8008066 <ai_buffer_get_size+0x46>
 8008056:	2302      	movs	r3, #2
 8008058:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800805c:	3301      	adds	r3, #1
 800805e:	428b      	cmp	r3, r1
 8008060:	fb00 f202 	mul.w	r2, r0, r2
 8008064:	d1f3      	bne.n	800804e <ai_buffer_get_size+0x2e>
 8008066:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800806a:	bc30      	pop	{r4, r5}
 800806c:	4770      	bx	lr
 800806e:	2900      	cmp	r1, #0
 8008070:	d0e2      	beq.n	8008038 <ai_buffer_get_size+0x18>
 8008072:	321f      	adds	r2, #31
 8008074:	f022 021f 	bic.w	r2, r2, #31
 8008078:	e7de      	b.n	8008038 <ai_buffer_get_size+0x18>
 800807a:	4770      	bx	lr
 800807c:	000400c0 	.word	0x000400c0

08008080 <ai_buffer_array_sane>:
 8008080:	b138      	cbz	r0, 8008092 <ai_buffer_array_sane+0x12>
 8008082:	6843      	ldr	r3, [r0, #4]
 8008084:	b123      	cbz	r3, 8008090 <ai_buffer_array_sane+0x10>
 8008086:	8840      	ldrh	r0, [r0, #2]
 8008088:	3000      	adds	r0, #0
 800808a:	bf18      	it	ne
 800808c:	2001      	movne	r0, #1
 800808e:	4770      	bx	lr
 8008090:	4618      	mov	r0, r3
 8008092:	4770      	bx	lr

08008094 <ai_buffer_array_item_set_address>:
 8008094:	b120      	cbz	r0, 80080a0 <ai_buffer_array_item_set_address+0xc>
 8008096:	6843      	ldr	r3, [r0, #4]
 8008098:	b11b      	cbz	r3, 80080a2 <ai_buffer_array_item_set_address+0xe>
 800809a:	8840      	ldrh	r0, [r0, #2]
 800809c:	b918      	cbnz	r0, 80080a6 <ai_buffer_array_item_set_address+0x12>
 800809e:	4770      	bx	lr
 80080a0:	4770      	bx	lr
 80080a2:	4618      	mov	r0, r3
 80080a4:	4770      	bx	lr
 80080a6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80080aa:	eb13 0081 	adds.w	r0, r3, r1, lsl #2
 80080ae:	d0f7      	beq.n	80080a0 <ai_buffer_array_item_set_address+0xc>
 80080b0:	6042      	str	r2, [r0, #4]
 80080b2:	2001      	movs	r0, #1
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop

080080b8 <_ai_platform_acquire_crc>:
 80080b8:	2001      	movs	r0, #1
 80080ba:	4770      	bx	lr

080080bc <_ai_platform_release_crc>:
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <ai_platform_get_weights_map>:
 80080c0:	b192      	cbz	r2, 80080e8 <ai_platform_get_weights_map+0x28>
 80080c2:	b188      	cbz	r0, 80080e8 <ai_platform_get_weights_map+0x28>
 80080c4:	b181      	cbz	r1, 80080e8 <ai_platform_get_weights_map+0x28>
 80080c6:	b570      	push	{r4, r5, r6, lr}
 80080c8:	4b24      	ldr	r3, [pc, #144]	; (800815c <ai_platform_get_weights_map+0x9c>)
 80080ca:	6814      	ldr	r4, [r2, #0]
 80080cc:	429c      	cmp	r4, r3
 80080ce:	d00d      	beq.n	80080ec <ai_platform_get_weights_map+0x2c>
 80080d0:	6854      	ldr	r4, [r2, #4]
 80080d2:	b194      	cbz	r4, 80080fa <ai_platform_get_weights_map+0x3a>
 80080d4:	6825      	ldr	r5, [r4, #0]
 80080d6:	429d      	cmp	r5, r3
 80080d8:	d027      	beq.n	800812a <ai_platform_get_weights_map+0x6a>
 80080da:	6004      	str	r4, [r0, #0]
 80080dc:	f1a1 0001 	sub.w	r0, r1, #1
 80080e0:	fab0 f080 	clz	r0, r0
 80080e4:	0940      	lsrs	r0, r0, #5
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	2000      	movs	r0, #0
 80080ea:	4770      	bx	lr
 80080ec:	4605      	mov	r5, r0
 80080ee:	1d10      	adds	r0, r2, #4
 80080f0:	4616      	mov	r6, r2
 80080f2:	460c      	mov	r4, r1
 80080f4:	f7ff ffc4 	bl	8008080 <ai_buffer_array_sane>
 80080f8:	b908      	cbnz	r0, 80080fe <ai_platform_get_weights_map+0x3e>
 80080fa:	2000      	movs	r0, #0
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
 80080fe:	88f3      	ldrh	r3, [r6, #6]
 8008100:	429c      	cmp	r4, r3
 8008102:	d1fa      	bne.n	80080fa <ai_platform_get_weights_map+0x3a>
 8008104:	2100      	movs	r1, #0
 8008106:	1f2b      	subs	r3, r5, #4
 8008108:	4608      	mov	r0, r1
 800810a:	68b2      	ldr	r2, [r6, #8]
 800810c:	440a      	add	r2, r1
 800810e:	311c      	adds	r1, #28
 8008110:	6852      	ldr	r2, [r2, #4]
 8008112:	b12a      	cbz	r2, 8008120 <ai_platform_get_weights_map+0x60>
 8008114:	3001      	adds	r0, #1
 8008116:	4284      	cmp	r4, r0
 8008118:	f843 2f04 	str.w	r2, [r3, #4]!
 800811c:	d1f5      	bne.n	800810a <ai_platform_get_weights_map+0x4a>
 800811e:	4620      	mov	r0, r4
 8008120:	1a20      	subs	r0, r4, r0
 8008122:	fab0 f080 	clz	r0, r0
 8008126:	0940      	lsrs	r0, r0, #5
 8008128:	bd70      	pop	{r4, r5, r6, pc}
 800812a:	6863      	ldr	r3, [r4, #4]
 800812c:	42ab      	cmp	r3, r5
 800812e:	f104 0404 	add.w	r4, r4, #4
 8008132:	d0e2      	beq.n	80080fa <ai_platform_get_weights_map+0x3a>
 8008134:	3804      	subs	r0, #4
 8008136:	4626      	mov	r6, r4
 8008138:	2200      	movs	r2, #0
 800813a:	e003      	b.n	8008144 <ai_platform_get_weights_map+0x84>
 800813c:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8008140:	42ab      	cmp	r3, r5
 8008142:	d0da      	beq.n	80080fa <ai_platform_get_weights_map+0x3a>
 8008144:	3201      	adds	r2, #1
 8008146:	4291      	cmp	r1, r2
 8008148:	f840 3f04 	str.w	r3, [r0, #4]!
 800814c:	d1f6      	bne.n	800813c <ai_platform_get_weights_map+0x7c>
 800814e:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 8008152:	4b02      	ldr	r3, [pc, #8]	; (800815c <ai_platform_get_weights_map+0x9c>)
 8008154:	429a      	cmp	r2, r3
 8008156:	d1d0      	bne.n	80080fa <ai_platform_get_weights_map+0x3a>
 8008158:	2001      	movs	r0, #1
 800815a:	bd70      	pop	{r4, r5, r6, pc}
 800815c:	a1facade 	.word	0xa1facade

08008160 <ai_platform_get_activations_map>:
 8008160:	b192      	cbz	r2, 8008188 <ai_platform_get_activations_map+0x28>
 8008162:	b188      	cbz	r0, 8008188 <ai_platform_get_activations_map+0x28>
 8008164:	b181      	cbz	r1, 8008188 <ai_platform_get_activations_map+0x28>
 8008166:	b570      	push	{r4, r5, r6, lr}
 8008168:	4b25      	ldr	r3, [pc, #148]	; (8008200 <ai_platform_get_activations_map+0xa0>)
 800816a:	6814      	ldr	r4, [r2, #0]
 800816c:	429c      	cmp	r4, r3
 800816e:	d00d      	beq.n	800818c <ai_platform_get_activations_map+0x2c>
 8008170:	6a14      	ldr	r4, [r2, #32]
 8008172:	b19c      	cbz	r4, 800819c <ai_platform_get_activations_map+0x3c>
 8008174:	6825      	ldr	r5, [r4, #0]
 8008176:	429d      	cmp	r5, r3
 8008178:	d028      	beq.n	80081cc <ai_platform_get_activations_map+0x6c>
 800817a:	6004      	str	r4, [r0, #0]
 800817c:	f1a1 0001 	sub.w	r0, r1, #1
 8008180:	fab0 f080 	clz	r0, r0
 8008184:	0940      	lsrs	r0, r0, #5
 8008186:	bd70      	pop	{r4, r5, r6, pc}
 8008188:	2000      	movs	r0, #0
 800818a:	4770      	bx	lr
 800818c:	4605      	mov	r5, r0
 800818e:	f102 000c 	add.w	r0, r2, #12
 8008192:	4616      	mov	r6, r2
 8008194:	460c      	mov	r4, r1
 8008196:	f7ff ff73 	bl	8008080 <ai_buffer_array_sane>
 800819a:	b908      	cbnz	r0, 80081a0 <ai_platform_get_activations_map+0x40>
 800819c:	2000      	movs	r0, #0
 800819e:	bd70      	pop	{r4, r5, r6, pc}
 80081a0:	89f3      	ldrh	r3, [r6, #14]
 80081a2:	429c      	cmp	r4, r3
 80081a4:	d1fa      	bne.n	800819c <ai_platform_get_activations_map+0x3c>
 80081a6:	2100      	movs	r1, #0
 80081a8:	1f2b      	subs	r3, r5, #4
 80081aa:	4608      	mov	r0, r1
 80081ac:	6932      	ldr	r2, [r6, #16]
 80081ae:	440a      	add	r2, r1
 80081b0:	311c      	adds	r1, #28
 80081b2:	6852      	ldr	r2, [r2, #4]
 80081b4:	b12a      	cbz	r2, 80081c2 <ai_platform_get_activations_map+0x62>
 80081b6:	3001      	adds	r0, #1
 80081b8:	4284      	cmp	r4, r0
 80081ba:	f843 2f04 	str.w	r2, [r3, #4]!
 80081be:	d1f5      	bne.n	80081ac <ai_platform_get_activations_map+0x4c>
 80081c0:	4620      	mov	r0, r4
 80081c2:	1a20      	subs	r0, r4, r0
 80081c4:	fab0 f080 	clz	r0, r0
 80081c8:	0940      	lsrs	r0, r0, #5
 80081ca:	bd70      	pop	{r4, r5, r6, pc}
 80081cc:	6863      	ldr	r3, [r4, #4]
 80081ce:	42ab      	cmp	r3, r5
 80081d0:	f104 0404 	add.w	r4, r4, #4
 80081d4:	d0e2      	beq.n	800819c <ai_platform_get_activations_map+0x3c>
 80081d6:	3804      	subs	r0, #4
 80081d8:	4626      	mov	r6, r4
 80081da:	2200      	movs	r2, #0
 80081dc:	e003      	b.n	80081e6 <ai_platform_get_activations_map+0x86>
 80081de:	f856 3f04 	ldr.w	r3, [r6, #4]!
 80081e2:	42ab      	cmp	r3, r5
 80081e4:	d0da      	beq.n	800819c <ai_platform_get_activations_map+0x3c>
 80081e6:	3201      	adds	r2, #1
 80081e8:	4291      	cmp	r1, r2
 80081ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80081ee:	d1f6      	bne.n	80081de <ai_platform_get_activations_map+0x7e>
 80081f0:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <ai_platform_get_activations_map+0xa0>)
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d1d0      	bne.n	800819c <ai_platform_get_activations_map+0x3c>
 80081fa:	2001      	movs	r0, #1
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
 80081fe:	bf00      	nop
 8008200:	a1facade 	.word	0xa1facade

08008204 <ai_platform_bind_network_params>:
 8008204:	4603      	mov	r3, r0
 8008206:	b190      	cbz	r0, 800822e <ai_platform_bind_network_params+0x2a>
 8008208:	b1a1      	cbz	r1, 8008234 <ai_platform_bind_network_params+0x30>
 800820a:	b18a      	cbz	r2, 8008230 <ai_platform_bind_network_params+0x2c>
 800820c:	b410      	push	{r4}
 800820e:	4604      	mov	r4, r0
 8008210:	4809      	ldr	r0, [pc, #36]	; (8008238 <ai_platform_bind_network_params+0x34>)
 8008212:	f844 0b04 	str.w	r0, [r4], #4
 8008216:	c903      	ldmia	r1, {r0, r1}
 8008218:	e884 0003 	stmia.w	r4, {r0, r1}
 800821c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008220:	330c      	adds	r3, #12
 8008222:	e883 0003 	stmia.w	r3, {r0, r1}
 8008226:	2001      	movs	r0, #1
 8008228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800822c:	4770      	bx	lr
 800822e:	4770      	bx	lr
 8008230:	4610      	mov	r0, r2
 8008232:	4770      	bx	lr
 8008234:	4608      	mov	r0, r1
 8008236:	4770      	bx	lr
 8008238:	a1facade 	.word	0xa1facade

0800823c <ai_platform_network_get_error>:
 800823c:	b510      	push	{r4, lr}
 800823e:	b120      	cbz	r0, 800824a <ai_platform_network_get_error+0xe>
 8008240:	4b32      	ldr	r3, [pc, #200]	; (800830c <ai_platform_network_get_error+0xd0>)
 8008242:	6802      	ldr	r2, [r0, #0]
 8008244:	429a      	cmp	r2, r3
 8008246:	4604      	mov	r4, r0
 8008248:	d02e      	beq.n	80082a8 <ai_platform_network_get_error+0x6c>
 800824a:	4a31      	ldr	r2, [pc, #196]	; (8008310 <ai_platform_network_get_error+0xd4>)
 800824c:	6813      	ldr	r3, [r2, #0]
 800824e:	f023 0301 	bic.w	r3, r3, #1
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	f7ff ff30 	bl	80080b8 <_ai_platform_acquire_crc>
 8008258:	4b2e      	ldr	r3, [pc, #184]	; (8008314 <ai_platform_network_get_error+0xd8>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008264:	d00d      	beq.n	8008282 <ai_platform_network_get_error+0x46>
 8008266:	4b2c      	ldr	r3, [pc, #176]	; (8008318 <ai_platform_network_get_error+0xdc>)
 8008268:	2201      	movs	r2, #1
 800826a:	601a      	str	r2, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	2a00      	cmp	r2, #0
 8008270:	d1fc      	bne.n	800826c <ai_platform_network_get_error+0x30>
 8008272:	4b2a      	ldr	r3, [pc, #168]	; (800831c <ai_platform_network_get_error+0xe0>)
 8008274:	4a2a      	ldr	r2, [pc, #168]	; (8008320 <ai_platform_network_get_error+0xe4>)
 8008276:	601a      	str	r2, [r3, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	4b2a      	ldr	r3, [pc, #168]	; (8008324 <ai_platform_network_get_error+0xe8>)
 800827c:	429a      	cmp	r2, r3
 800827e:	d00d      	beq.n	800829c <ai_platform_network_get_error+0x60>
 8008280:	e7fe      	b.n	8008280 <ai_platform_network_get_error+0x44>
 8008282:	4b29      	ldr	r3, [pc, #164]	; (8008328 <ai_platform_network_get_error+0xec>)
 8008284:	2201      	movs	r2, #1
 8008286:	601a      	str	r2, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	2a00      	cmp	r2, #0
 800828c:	d1fc      	bne.n	8008288 <ai_platform_network_get_error+0x4c>
 800828e:	4b27      	ldr	r3, [pc, #156]	; (800832c <ai_platform_network_get_error+0xf0>)
 8008290:	4a23      	ldr	r2, [pc, #140]	; (8008320 <ai_platform_network_get_error+0xe4>)
 8008292:	601a      	str	r2, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	4b23      	ldr	r3, [pc, #140]	; (8008324 <ai_platform_network_get_error+0xe8>)
 8008298:	429a      	cmp	r2, r3
 800829a:	d104      	bne.n	80082a6 <ai_platform_network_get_error+0x6a>
 800829c:	f7ff ff0e 	bl	80080bc <_ai_platform_release_crc>
 80082a0:	f241 0010 	movw	r0, #4112	; 0x1010
 80082a4:	bd10      	pop	{r4, pc}
 80082a6:	e7fe      	b.n	80082a6 <ai_platform_network_get_error+0x6a>
 80082a8:	4a19      	ldr	r2, [pc, #100]	; (8008310 <ai_platform_network_get_error+0xd4>)
 80082aa:	6813      	ldr	r3, [r2, #0]
 80082ac:	f023 0301 	bic.w	r3, r3, #1
 80082b0:	6013      	str	r3, [r2, #0]
 80082b2:	f7ff ff01 	bl	80080b8 <_ai_platform_acquire_crc>
 80082b6:	4b17      	ldr	r3, [pc, #92]	; (8008314 <ai_platform_network_get_error+0xd8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c2:	d00d      	beq.n	80082e0 <ai_platform_network_get_error+0xa4>
 80082c4:	4b14      	ldr	r3, [pc, #80]	; (8008318 <ai_platform_network_get_error+0xdc>)
 80082c6:	2201      	movs	r2, #1
 80082c8:	601a      	str	r2, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	2a00      	cmp	r2, #0
 80082ce:	d1fc      	bne.n	80082ca <ai_platform_network_get_error+0x8e>
 80082d0:	4b12      	ldr	r3, [pc, #72]	; (800831c <ai_platform_network_get_error+0xe0>)
 80082d2:	4a13      	ldr	r2, [pc, #76]	; (8008320 <ai_platform_network_get_error+0xe4>)
 80082d4:	601a      	str	r2, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	4b12      	ldr	r3, [pc, #72]	; (8008324 <ai_platform_network_get_error+0xe8>)
 80082da:	429a      	cmp	r2, r3
 80082dc:	d00e      	beq.n	80082fc <ai_platform_network_get_error+0xc0>
 80082de:	e7fe      	b.n	80082de <ai_platform_network_get_error+0xa2>
 80082e0:	4b11      	ldr	r3, [pc, #68]	; (8008328 <ai_platform_network_get_error+0xec>)
 80082e2:	2201      	movs	r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	d1fc      	bne.n	80082e6 <ai_platform_network_get_error+0xaa>
 80082ec:	4b0f      	ldr	r3, [pc, #60]	; (800832c <ai_platform_network_get_error+0xf0>)
 80082ee:	4a0c      	ldr	r2, [pc, #48]	; (8008320 <ai_platform_network_get_error+0xe4>)
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <ai_platform_network_get_error+0xe8>)
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d000      	beq.n	80082fc <ai_platform_network_get_error+0xc0>
 80082fa:	e7fe      	b.n	80082fa <ai_platform_network_get_error+0xbe>
 80082fc:	f7ff fede 	bl	80080bc <_ai_platform_release_crc>
 8008300:	f104 0010 	add.w	r0, r4, #16
 8008304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008308:	f000 bef4 	b.w	80090f4 <core_get_error>
 800830c:	a1c00100 	.word	0xa1c00100
 8008310:	e0002000 	.word	0xe0002000
 8008314:	e0042000 	.word	0xe0042000
 8008318:	58024c08 	.word	0x58024c08
 800831c:	58024c00 	.word	0x58024c00
 8008320:	f407a5c2 	.word	0xf407a5c2
 8008324:	b5e8b5cd 	.word	0xb5e8b5cd
 8008328:	40023008 	.word	0x40023008
 800832c:	40023000 	.word	0x40023000

08008330 <ai_platform_network_set_error>:
 8008330:	b110      	cbz	r0, 8008338 <ai_platform_network_set_error+0x8>
 8008332:	3010      	adds	r0, #16
 8008334:	f000 bee4 	b.w	8009100 <core_set_error>
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop

0800833c <ai_platform_inputs_get>:
 800833c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008340:	b085      	sub	sp, #20
 8008342:	2800      	cmp	r0, #0
 8008344:	f000 80a1 	beq.w	800848a <ai_platform_inputs_get+0x14e>
 8008348:	4b6d      	ldr	r3, [pc, #436]	; (8008500 <ai_platform_inputs_get+0x1c4>)
 800834a:	6802      	ldr	r2, [r0, #0]
 800834c:	429a      	cmp	r2, r3
 800834e:	4607      	mov	r7, r0
 8008350:	f040 809b 	bne.w	800848a <ai_platform_inputs_get+0x14e>
 8008354:	4a6b      	ldr	r2, [pc, #428]	; (8008504 <ai_platform_inputs_get+0x1c8>)
 8008356:	6813      	ldr	r3, [r2, #0]
 8008358:	f023 0301 	bic.w	r3, r3, #1
 800835c:	6013      	str	r3, [r2, #0]
 800835e:	468b      	mov	fp, r1
 8008360:	f7ff feaa 	bl	80080b8 <_ai_platform_acquire_crc>
 8008364:	4b68      	ldr	r3, [pc, #416]	; (8008508 <ai_platform_inputs_get+0x1cc>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800836c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008370:	d00d      	beq.n	800838e <ai_platform_inputs_get+0x52>
 8008372:	4b66      	ldr	r3, [pc, #408]	; (800850c <ai_platform_inputs_get+0x1d0>)
 8008374:	2201      	movs	r2, #1
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	2a00      	cmp	r2, #0
 800837c:	d1fc      	bne.n	8008378 <ai_platform_inputs_get+0x3c>
 800837e:	4b64      	ldr	r3, [pc, #400]	; (8008510 <ai_platform_inputs_get+0x1d4>)
 8008380:	4a64      	ldr	r2, [pc, #400]	; (8008514 <ai_platform_inputs_get+0x1d8>)
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4b64      	ldr	r3, [pc, #400]	; (8008518 <ai_platform_inputs_get+0x1dc>)
 8008388:	429a      	cmp	r2, r3
 800838a:	d00d      	beq.n	80083a8 <ai_platform_inputs_get+0x6c>
 800838c:	e7fe      	b.n	800838c <ai_platform_inputs_get+0x50>
 800838e:	4b63      	ldr	r3, [pc, #396]	; (800851c <ai_platform_inputs_get+0x1e0>)
 8008390:	2201      	movs	r2, #1
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	2a00      	cmp	r2, #0
 8008398:	d1fc      	bne.n	8008394 <ai_platform_inputs_get+0x58>
 800839a:	4b61      	ldr	r3, [pc, #388]	; (8008520 <ai_platform_inputs_get+0x1e4>)
 800839c:	4a5d      	ldr	r2, [pc, #372]	; (8008514 <ai_platform_inputs_get+0x1d8>)
 800839e:	601a      	str	r2, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	4b5d      	ldr	r3, [pc, #372]	; (8008518 <ai_platform_inputs_get+0x1dc>)
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d16f      	bne.n	8008488 <ai_platform_inputs_get+0x14c>
 80083a8:	f7ff fe88 	bl	80080bc <_ai_platform_release_crc>
 80083ac:	f1bb 0f00 	cmp.w	fp, #0
 80083b0:	d002      	beq.n	80083b8 <ai_platform_inputs_get+0x7c>
 80083b2:	2300      	movs	r3, #0
 80083b4:	f8ab 3000 	strh.w	r3, [fp]
 80083b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f000 8081 	beq.w	80084c2 <ai_platform_inputs_get+0x186>
 80083c0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80083c2:	2e00      	cmp	r6, #0
 80083c4:	d07d      	beq.n	80084c2 <ai_platform_inputs_get+0x186>
 80083c6:	8833      	ldrh	r3, [r6, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d07a      	beq.n	80084c2 <ai_platform_inputs_get+0x186>
 80083cc:	6873      	ldr	r3, [r6, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d077      	beq.n	80084c2 <ai_platform_inputs_get+0x186>
 80083d2:	681d      	ldr	r5, [r3, #0]
 80083d4:	2d00      	cmp	r5, #0
 80083d6:	d074      	beq.n	80084c2 <ai_platform_inputs_get+0x186>
 80083d8:	f04f 0800 	mov.w	r8, #0
 80083dc:	f8cd b008 	str.w	fp, [sp, #8]
 80083e0:	46c1      	mov	r9, r8
 80083e2:	46bb      	mov	fp, r7
 80083e4:	68b0      	ldr	r0, [r6, #8]
 80083e6:	69aa      	ldr	r2, [r5, #24]
 80083e8:	68ab      	ldr	r3, [r5, #8]
 80083ea:	6844      	ldr	r4, [r0, #4]
 80083ec:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80083f0:	6810      	ldr	r0, [r2, #0]
 80083f2:	68ef      	ldr	r7, [r5, #12]
 80083f4:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80083f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80083fc:	9301      	str	r3, [sp, #4]
 80083fe:	9203      	str	r2, [sp, #12]
 8008400:	f002 fd32 	bl	800ae68 <ai_array_to_buffer_fmt>
 8008404:	9a03      	ldr	r2, [sp, #12]
 8008406:	4601      	mov	r1, r0
 8008408:	69a8      	ldr	r0, [r5, #24]
 800840a:	eb0a 0302 	add.w	r3, sl, r2
 800840e:	4444      	add	r4, r8
 8008410:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8008414:	b16b      	cbz	r3, 8008432 <ai_platform_inputs_get+0xf6>
 8008416:	2000      	movs	r0, #0
 8008418:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800841c:	6828      	ldr	r0, [r5, #0]
 800841e:	6058      	str	r0, [r3, #4]
 8008420:	2800      	cmp	r0, #0
 8008422:	d058      	beq.n	80084d6 <ai_platform_inputs_get+0x19a>
 8008424:	8840      	ldrh	r0, [r0, #2]
 8008426:	2800      	cmp	r0, #0
 8008428:	d055      	beq.n	80084d6 <ai_platform_inputs_get+0x19a>
 800842a:	2001      	movs	r0, #1
 800842c:	f84a 0002 	str.w	r0, [sl, r2]
 8008430:	69a8      	ldr	r0, [r5, #24]
 8008432:	6842      	ldr	r2, [r0, #4]
 8008434:	6122      	str	r2, [r4, #16]
 8008436:	f04f 0001 	mov.w	r0, #1
 800843a:	7520      	strb	r0, [r4, #20]
 800843c:	9a01      	ldr	r2, [sp, #4]
 800843e:	6960      	ldr	r0, [r4, #20]
 8008440:	60a3      	str	r3, [r4, #8]
 8008442:	f362 201f 	bfi	r0, r2, #8, #24
 8008446:	e9c4 1e00 	strd	r1, lr, [r4]
 800844a:	e9c4 0705 	strd	r0, r7, [r4, #20]
 800844e:	2300      	movs	r3, #0
 8008450:	60e3      	str	r3, [r4, #12]
 8008452:	8830      	ldrh	r0, [r6, #0]
 8008454:	f109 0301 	add.w	r3, r9, #1
 8008458:	4283      	cmp	r3, r0
 800845a:	4699      	mov	r9, r3
 800845c:	b29a      	uxth	r2, r3
 800845e:	d207      	bcs.n	8008470 <ai_platform_inputs_get+0x134>
 8008460:	6870      	ldr	r0, [r6, #4]
 8008462:	b128      	cbz	r0, 8008470 <ai_platform_inputs_get+0x134>
 8008464:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8008468:	f108 081c 	add.w	r8, r8, #28
 800846c:	2d00      	cmp	r5, #0
 800846e:	d1b9      	bne.n	80083e4 <ai_platform_inputs_get+0xa8>
 8008470:	465f      	mov	r7, fp
 8008472:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008476:	b322      	cbz	r2, 80084c2 <ai_platform_inputs_get+0x186>
 8008478:	68b3      	ldr	r3, [r6, #8]
 800847a:	6858      	ldr	r0, [r3, #4]
 800847c:	f1bb 0f00 	cmp.w	fp, #0
 8008480:	d026      	beq.n	80084d0 <ai_platform_inputs_get+0x194>
 8008482:	f8ab 2000 	strh.w	r2, [fp]
 8008486:	e023      	b.n	80084d0 <ai_platform_inputs_get+0x194>
 8008488:	e7fe      	b.n	8008488 <ai_platform_inputs_get+0x14c>
 800848a:	4a1e      	ldr	r2, [pc, #120]	; (8008504 <ai_platform_inputs_get+0x1c8>)
 800848c:	6813      	ldr	r3, [r2, #0]
 800848e:	f023 0301 	bic.w	r3, r3, #1
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	f7ff fe10 	bl	80080b8 <_ai_platform_acquire_crc>
 8008498:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <ai_platform_inputs_get+0x1cc>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a4:	d01a      	beq.n	80084dc <ai_platform_inputs_get+0x1a0>
 80084a6:	4b19      	ldr	r3, [pc, #100]	; (800850c <ai_platform_inputs_get+0x1d0>)
 80084a8:	2201      	movs	r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	2a00      	cmp	r2, #0
 80084b0:	d1fc      	bne.n	80084ac <ai_platform_inputs_get+0x170>
 80084b2:	4b17      	ldr	r3, [pc, #92]	; (8008510 <ai_platform_inputs_get+0x1d4>)
 80084b4:	4a17      	ldr	r2, [pc, #92]	; (8008514 <ai_platform_inputs_get+0x1d8>)
 80084b6:	601a      	str	r2, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	4b17      	ldr	r3, [pc, #92]	; (8008518 <ai_platform_inputs_get+0x1dc>)
 80084bc:	429a      	cmp	r2, r3
 80084be:	d01b      	beq.n	80084f8 <ai_platform_inputs_get+0x1bc>
 80084c0:	e7fe      	b.n	80084c0 <ai_platform_inputs_get+0x184>
 80084c2:	f107 0010 	add.w	r0, r7, #16
 80084c6:	2218      	movs	r2, #24
 80084c8:	2111      	movs	r1, #17
 80084ca:	f000 fe19 	bl	8009100 <core_set_error>
 80084ce:	2000      	movs	r0, #0
 80084d0:	b005      	add	sp, #20
 80084d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d6:	69a8      	ldr	r0, [r5, #24]
 80084d8:	2300      	movs	r3, #0
 80084da:	e7aa      	b.n	8008432 <ai_platform_inputs_get+0xf6>
 80084dc:	4b0f      	ldr	r3, [pc, #60]	; (800851c <ai_platform_inputs_get+0x1e0>)
 80084de:	2201      	movs	r2, #1
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	2a00      	cmp	r2, #0
 80084e6:	d1fc      	bne.n	80084e2 <ai_platform_inputs_get+0x1a6>
 80084e8:	4b0d      	ldr	r3, [pc, #52]	; (8008520 <ai_platform_inputs_get+0x1e4>)
 80084ea:	4a0a      	ldr	r2, [pc, #40]	; (8008514 <ai_platform_inputs_get+0x1d8>)
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	4b09      	ldr	r3, [pc, #36]	; (8008518 <ai_platform_inputs_get+0x1dc>)
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d000      	beq.n	80084f8 <ai_platform_inputs_get+0x1bc>
 80084f6:	e7fe      	b.n	80084f6 <ai_platform_inputs_get+0x1ba>
 80084f8:	f7ff fde0 	bl	80080bc <_ai_platform_release_crc>
 80084fc:	2000      	movs	r0, #0
 80084fe:	e7e7      	b.n	80084d0 <ai_platform_inputs_get+0x194>
 8008500:	a1c00100 	.word	0xa1c00100
 8008504:	e0002000 	.word	0xe0002000
 8008508:	e0042000 	.word	0xe0042000
 800850c:	58024c08 	.word	0x58024c08
 8008510:	58024c00 	.word	0x58024c00
 8008514:	f407a5c2 	.word	0xf407a5c2
 8008518:	b5e8b5cd 	.word	0xb5e8b5cd
 800851c:	40023008 	.word	0x40023008
 8008520:	40023000 	.word	0x40023000

08008524 <ai_platform_outputs_get>:
 8008524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008528:	b085      	sub	sp, #20
 800852a:	2800      	cmp	r0, #0
 800852c:	f000 80a9 	beq.w	8008682 <ai_platform_outputs_get+0x15e>
 8008530:	4b70      	ldr	r3, [pc, #448]	; (80086f4 <ai_platform_outputs_get+0x1d0>)
 8008532:	6802      	ldr	r2, [r0, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	4607      	mov	r7, r0
 8008538:	f040 80a3 	bne.w	8008682 <ai_platform_outputs_get+0x15e>
 800853c:	4a6e      	ldr	r2, [pc, #440]	; (80086f8 <ai_platform_outputs_get+0x1d4>)
 800853e:	6813      	ldr	r3, [r2, #0]
 8008540:	f023 0301 	bic.w	r3, r3, #1
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	468b      	mov	fp, r1
 8008548:	f7ff fdb6 	bl	80080b8 <_ai_platform_acquire_crc>
 800854c:	4b6b      	ldr	r3, [pc, #428]	; (80086fc <ai_platform_outputs_get+0x1d8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008558:	d00d      	beq.n	8008576 <ai_platform_outputs_get+0x52>
 800855a:	4b69      	ldr	r3, [pc, #420]	; (8008700 <ai_platform_outputs_get+0x1dc>)
 800855c:	2201      	movs	r2, #1
 800855e:	601a      	str	r2, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	2a00      	cmp	r2, #0
 8008564:	d1fc      	bne.n	8008560 <ai_platform_outputs_get+0x3c>
 8008566:	4b67      	ldr	r3, [pc, #412]	; (8008704 <ai_platform_outputs_get+0x1e0>)
 8008568:	4a67      	ldr	r2, [pc, #412]	; (8008708 <ai_platform_outputs_get+0x1e4>)
 800856a:	601a      	str	r2, [r3, #0]
 800856c:	681a      	ldr	r2, [r3, #0]
 800856e:	4b67      	ldr	r3, [pc, #412]	; (800870c <ai_platform_outputs_get+0x1e8>)
 8008570:	429a      	cmp	r2, r3
 8008572:	d00d      	beq.n	8008590 <ai_platform_outputs_get+0x6c>
 8008574:	e7fe      	b.n	8008574 <ai_platform_outputs_get+0x50>
 8008576:	4b66      	ldr	r3, [pc, #408]	; (8008710 <ai_platform_outputs_get+0x1ec>)
 8008578:	2201      	movs	r2, #1
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	2a00      	cmp	r2, #0
 8008580:	d1fc      	bne.n	800857c <ai_platform_outputs_get+0x58>
 8008582:	4b64      	ldr	r3, [pc, #400]	; (8008714 <ai_platform_outputs_get+0x1f0>)
 8008584:	4a60      	ldr	r2, [pc, #384]	; (8008708 <ai_platform_outputs_get+0x1e4>)
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	4b60      	ldr	r3, [pc, #384]	; (800870c <ai_platform_outputs_get+0x1e8>)
 800858c:	429a      	cmp	r2, r3
 800858e:	d177      	bne.n	8008680 <ai_platform_outputs_get+0x15c>
 8008590:	f7ff fd94 	bl	80080bc <_ai_platform_release_crc>
 8008594:	f1bb 0f00 	cmp.w	fp, #0
 8008598:	d002      	beq.n	80085a0 <ai_platform_outputs_get+0x7c>
 800859a:	2300      	movs	r3, #0
 800859c:	f8ab 3000 	strh.w	r3, [fp]
 80085a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	f240 809a 	bls.w	80086dc <ai_platform_outputs_get+0x1b8>
 80085a8:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80085aa:	f116 0f0c 	cmn.w	r6, #12
 80085ae:	f000 8095 	beq.w	80086dc <ai_platform_outputs_get+0x1b8>
 80085b2:	89b3      	ldrh	r3, [r6, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8091 	beq.w	80086dc <ai_platform_outputs_get+0x1b8>
 80085ba:	6933      	ldr	r3, [r6, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 808d 	beq.w	80086dc <ai_platform_outputs_get+0x1b8>
 80085c2:	681d      	ldr	r5, [r3, #0]
 80085c4:	2d00      	cmp	r5, #0
 80085c6:	f000 8089 	beq.w	80086dc <ai_platform_outputs_get+0x1b8>
 80085ca:	f04f 0800 	mov.w	r8, #0
 80085ce:	f8cd b008 	str.w	fp, [sp, #8]
 80085d2:	46c1      	mov	r9, r8
 80085d4:	46bb      	mov	fp, r7
 80085d6:	6970      	ldr	r0, [r6, #20]
 80085d8:	69aa      	ldr	r2, [r5, #24]
 80085da:	68ab      	ldr	r3, [r5, #8]
 80085dc:	6844      	ldr	r4, [r0, #4]
 80085de:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80085e2:	6810      	ldr	r0, [r2, #0]
 80085e4:	68ef      	ldr	r7, [r5, #12]
 80085e6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80085ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	9203      	str	r2, [sp, #12]
 80085f2:	f002 fc39 	bl	800ae68 <ai_array_to_buffer_fmt>
 80085f6:	9a03      	ldr	r2, [sp, #12]
 80085f8:	4601      	mov	r1, r0
 80085fa:	69a8      	ldr	r0, [r5, #24]
 80085fc:	eb0a 0302 	add.w	r3, sl, r2
 8008600:	4444      	add	r4, r8
 8008602:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8008606:	b16b      	cbz	r3, 8008624 <ai_platform_outputs_get+0x100>
 8008608:	2000      	movs	r0, #0
 800860a:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800860e:	6828      	ldr	r0, [r5, #0]
 8008610:	6058      	str	r0, [r3, #4]
 8008612:	2800      	cmp	r0, #0
 8008614:	d051      	beq.n	80086ba <ai_platform_outputs_get+0x196>
 8008616:	8840      	ldrh	r0, [r0, #2]
 8008618:	2800      	cmp	r0, #0
 800861a:	d04e      	beq.n	80086ba <ai_platform_outputs_get+0x196>
 800861c:	2001      	movs	r0, #1
 800861e:	f84a 0002 	str.w	r0, [sl, r2]
 8008622:	69a8      	ldr	r0, [r5, #24]
 8008624:	6842      	ldr	r2, [r0, #4]
 8008626:	6122      	str	r2, [r4, #16]
 8008628:	f04f 0001 	mov.w	r0, #1
 800862c:	7520      	strb	r0, [r4, #20]
 800862e:	9a01      	ldr	r2, [sp, #4]
 8008630:	6960      	ldr	r0, [r4, #20]
 8008632:	60a3      	str	r3, [r4, #8]
 8008634:	f362 201f 	bfi	r0, r2, #8, #24
 8008638:	e9c4 1e00 	strd	r1, lr, [r4]
 800863c:	e9c4 0705 	strd	r0, r7, [r4, #20]
 8008640:	2300      	movs	r3, #0
 8008642:	60e3      	str	r3, [r4, #12]
 8008644:	89b0      	ldrh	r0, [r6, #12]
 8008646:	f109 0301 	add.w	r3, r9, #1
 800864a:	4283      	cmp	r3, r0
 800864c:	4699      	mov	r9, r3
 800864e:	b29a      	uxth	r2, r3
 8008650:	d207      	bcs.n	8008662 <ai_platform_outputs_get+0x13e>
 8008652:	6930      	ldr	r0, [r6, #16]
 8008654:	b128      	cbz	r0, 8008662 <ai_platform_outputs_get+0x13e>
 8008656:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800865a:	f108 081c 	add.w	r8, r8, #28
 800865e:	2d00      	cmp	r5, #0
 8008660:	d1b9      	bne.n	80085d6 <ai_platform_outputs_get+0xb2>
 8008662:	465f      	mov	r7, fp
 8008664:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008668:	2a00      	cmp	r2, #0
 800866a:	d037      	beq.n	80086dc <ai_platform_outputs_get+0x1b8>
 800866c:	6973      	ldr	r3, [r6, #20]
 800866e:	6858      	ldr	r0, [r3, #4]
 8008670:	f1bb 0f00 	cmp.w	fp, #0
 8008674:	d001      	beq.n	800867a <ai_platform_outputs_get+0x156>
 8008676:	f8ab 2000 	strh.w	r2, [fp]
 800867a:	b005      	add	sp, #20
 800867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008680:	e7fe      	b.n	8008680 <ai_platform_outputs_get+0x15c>
 8008682:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <ai_platform_outputs_get+0x1d4>)
 8008684:	6813      	ldr	r3, [r2, #0]
 8008686:	f023 0301 	bic.w	r3, r3, #1
 800868a:	6013      	str	r3, [r2, #0]
 800868c:	f7ff fd14 	bl	80080b8 <_ai_platform_acquire_crc>
 8008690:	4b1a      	ldr	r3, [pc, #104]	; (80086fc <ai_platform_outputs_get+0x1d8>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800869c:	d010      	beq.n	80086c0 <ai_platform_outputs_get+0x19c>
 800869e:	4b18      	ldr	r3, [pc, #96]	; (8008700 <ai_platform_outputs_get+0x1dc>)
 80086a0:	2201      	movs	r2, #1
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	d1fc      	bne.n	80086a4 <ai_platform_outputs_get+0x180>
 80086aa:	4b16      	ldr	r3, [pc, #88]	; (8008704 <ai_platform_outputs_get+0x1e0>)
 80086ac:	4a16      	ldr	r2, [pc, #88]	; (8008708 <ai_platform_outputs_get+0x1e4>)
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b16      	ldr	r3, [pc, #88]	; (800870c <ai_platform_outputs_get+0x1e8>)
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d019      	beq.n	80086ec <ai_platform_outputs_get+0x1c8>
 80086b8:	e7fe      	b.n	80086b8 <ai_platform_outputs_get+0x194>
 80086ba:	69a8      	ldr	r0, [r5, #24]
 80086bc:	2300      	movs	r3, #0
 80086be:	e7b1      	b.n	8008624 <ai_platform_outputs_get+0x100>
 80086c0:	4b13      	ldr	r3, [pc, #76]	; (8008710 <ai_platform_outputs_get+0x1ec>)
 80086c2:	2201      	movs	r2, #1
 80086c4:	601a      	str	r2, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	2a00      	cmp	r2, #0
 80086ca:	d1fc      	bne.n	80086c6 <ai_platform_outputs_get+0x1a2>
 80086cc:	4b11      	ldr	r3, [pc, #68]	; (8008714 <ai_platform_outputs_get+0x1f0>)
 80086ce:	4a0e      	ldr	r2, [pc, #56]	; (8008708 <ai_platform_outputs_get+0x1e4>)
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	4b0d      	ldr	r3, [pc, #52]	; (800870c <ai_platform_outputs_get+0x1e8>)
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d008      	beq.n	80086ec <ai_platform_outputs_get+0x1c8>
 80086da:	e7fe      	b.n	80086da <ai_platform_outputs_get+0x1b6>
 80086dc:	f107 0010 	add.w	r0, r7, #16
 80086e0:	2218      	movs	r2, #24
 80086e2:	2111      	movs	r1, #17
 80086e4:	f000 fd0c 	bl	8009100 <core_set_error>
 80086e8:	2000      	movs	r0, #0
 80086ea:	e7c6      	b.n	800867a <ai_platform_outputs_get+0x156>
 80086ec:	f7ff fce6 	bl	80080bc <_ai_platform_release_crc>
 80086f0:	2000      	movs	r0, #0
 80086f2:	e7c2      	b.n	800867a <ai_platform_outputs_get+0x156>
 80086f4:	a1c00100 	.word	0xa1c00100
 80086f8:	e0002000 	.word	0xe0002000
 80086fc:	e0042000 	.word	0xe0042000
 8008700:	58024c08 	.word	0x58024c08
 8008704:	58024c00 	.word	0x58024c00
 8008708:	f407a5c2 	.word	0xf407a5c2
 800870c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008710:	40023008 	.word	0x40023008
 8008714:	40023000 	.word	0x40023000

08008718 <ai_platform_network_create>:
 8008718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800871c:	b083      	sub	sp, #12
 800871e:	4606      	mov	r6, r0
 8008720:	4615      	mov	r5, r2
 8008722:	461f      	mov	r7, r3
 8008724:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8008728:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800872c:	f7ff fcc4 	bl	80080b8 <_ai_platform_acquire_crc>
 8008730:	b178      	cbz	r0, 8008752 <ai_platform_network_create+0x3a>
 8008732:	4b5f      	ldr	r3, [pc, #380]	; (80088b0 <ai_platform_network_create+0x198>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800873a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800873e:	4602      	mov	r2, r0
 8008740:	d00d      	beq.n	800875e <ai_platform_network_create+0x46>
 8008742:	4b5c      	ldr	r3, [pc, #368]	; (80088b4 <ai_platform_network_create+0x19c>)
 8008744:	2118      	movs	r1, #24
 8008746:	6019      	str	r1, [r3, #0]
 8008748:	6819      	ldr	r1, [r3, #0]
 800874a:	2918      	cmp	r1, #24
 800874c:	d01a      	beq.n	8008784 <ai_platform_network_create+0x6c>
 800874e:	f7ff fcb5 	bl	80080bc <_ai_platform_release_crc>
 8008752:	f244 1333 	movw	r3, #16691	; 0x4133
 8008756:	4618      	mov	r0, r3
 8008758:	b003      	add	sp, #12
 800875a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800875e:	4b56      	ldr	r3, [pc, #344]	; (80088b8 <ai_platform_network_create+0x1a0>)
 8008760:	2101      	movs	r1, #1
 8008762:	6019      	str	r1, [r3, #0]
 8008764:	2114      	movs	r1, #20
 8008766:	e001      	b.n	800876c <ai_platform_network_create+0x54>
 8008768:	3901      	subs	r1, #1
 800876a:	d002      	beq.n	8008772 <ai_platform_network_create+0x5a>
 800876c:	6818      	ldr	r0, [r3, #0]
 800876e:	2800      	cmp	r0, #0
 8008770:	d1fa      	bne.n	8008768 <ai_platform_network_create+0x50>
 8008772:	4b51      	ldr	r3, [pc, #324]	; (80088b8 <ai_platform_network_create+0x1a0>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	b91b      	cbnz	r3, 8008780 <ai_platform_network_create+0x68>
 8008778:	4b50      	ldr	r3, [pc, #320]	; (80088bc <ai_platform_network_create+0x1a4>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3301      	adds	r3, #1
 800877e:	d006      	beq.n	800878e <ai_platform_network_create+0x76>
 8008780:	4610      	mov	r0, r2
 8008782:	e7e4      	b.n	800874e <ai_platform_network_create+0x36>
 8008784:	2101      	movs	r1, #1
 8008786:	6019      	str	r1, [r3, #0]
 8008788:	6819      	ldr	r1, [r3, #0]
 800878a:	2900      	cmp	r1, #0
 800878c:	d1fc      	bne.n	8008788 <ai_platform_network_create+0x70>
 800878e:	4610      	mov	r0, r2
 8008790:	f7ff fc94 	bl	80080bc <_ai_platform_release_crc>
 8008794:	4a4a      	ldr	r2, [pc, #296]	; (80088c0 <ai_platform_network_create+0x1a8>)
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	f023 0301 	bic.w	r3, r3, #1
 800879c:	6013      	str	r3, [r2, #0]
 800879e:	f7ff fc8b 	bl	80080b8 <_ai_platform_acquire_crc>
 80087a2:	4b43      	ldr	r3, [pc, #268]	; (80088b0 <ai_platform_network_create+0x198>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ae:	d00d      	beq.n	80087cc <ai_platform_network_create+0xb4>
 80087b0:	4b40      	ldr	r3, [pc, #256]	; (80088b4 <ai_platform_network_create+0x19c>)
 80087b2:	2201      	movs	r2, #1
 80087b4:	601a      	str	r2, [r3, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	2a00      	cmp	r2, #0
 80087ba:	d1fc      	bne.n	80087b6 <ai_platform_network_create+0x9e>
 80087bc:	4b41      	ldr	r3, [pc, #260]	; (80088c4 <ai_platform_network_create+0x1ac>)
 80087be:	4a42      	ldr	r2, [pc, #264]	; (80088c8 <ai_platform_network_create+0x1b0>)
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	4b41      	ldr	r3, [pc, #260]	; (80088cc <ai_platform_network_create+0x1b4>)
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d00e      	beq.n	80087e8 <ai_platform_network_create+0xd0>
 80087ca:	e7fe      	b.n	80087ca <ai_platform_network_create+0xb2>
 80087cc:	4b3a      	ldr	r3, [pc, #232]	; (80088b8 <ai_platform_network_create+0x1a0>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	2a00      	cmp	r2, #0
 80087d6:	d1fc      	bne.n	80087d2 <ai_platform_network_create+0xba>
 80087d8:	4b38      	ldr	r3, [pc, #224]	; (80088bc <ai_platform_network_create+0x1a4>)
 80087da:	4a3b      	ldr	r2, [pc, #236]	; (80088c8 <ai_platform_network_create+0x1b0>)
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	4b3a      	ldr	r3, [pc, #232]	; (80088cc <ai_platform_network_create+0x1b4>)
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d000      	beq.n	80087e8 <ai_platform_network_create+0xd0>
 80087e6:	e7fe      	b.n	80087e6 <ai_platform_network_create+0xce>
 80087e8:	f7ff fc68 	bl	80080bc <_ai_platform_release_crc>
 80087ec:	b1ae      	cbz	r6, 800881a <ai_platform_network_create+0x102>
 80087ee:	4b38      	ldr	r3, [pc, #224]	; (80088d0 <ai_platform_network_create+0x1b8>)
 80087f0:	602b      	str	r3, [r5, #0]
 80087f2:	6035      	str	r5, [r6, #0]
 80087f4:	f000 fc7c 	bl	80090f0 <core_init>
 80087f8:	b990      	cbnz	r0, 8008820 <ai_platform_network_create+0x108>
 80087fa:	2430      	movs	r4, #48	; 0x30
 80087fc:	2300      	movs	r3, #0
 80087fe:	6033      	str	r3, [r6, #0]
 8008800:	2610      	movs	r6, #16
 8008802:	464a      	mov	r2, r9
 8008804:	4641      	mov	r1, r8
 8008806:	4638      	mov	r0, r7
 8008808:	f002 fb14 	bl	800ae34 <ai_version_get>
 800880c:	2300      	movs	r3, #0
 800880e:	f364 0307 	bfi	r3, r4, #0, #8
 8008812:	6468      	str	r0, [r5, #68]	; 0x44
 8008814:	f366 231f 	bfi	r3, r6, #8, #24
 8008818:	e79d      	b.n	8008756 <ai_platform_network_create+0x3e>
 800881a:	f241 0310 	movw	r3, #4112	; 0x1010
 800881e:	e79a      	b.n	8008756 <ai_platform_network_create+0x3e>
 8008820:	4a27      	ldr	r2, [pc, #156]	; (80088c0 <ai_platform_network_create+0x1a8>)
 8008822:	6813      	ldr	r3, [r2, #0]
 8008824:	f023 0301 	bic.w	r3, r3, #1
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	f7ff fc45 	bl	80080b8 <_ai_platform_acquire_crc>
 800882e:	4b20      	ldr	r3, [pc, #128]	; (80088b0 <ai_platform_network_create+0x198>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800883a:	d00d      	beq.n	8008858 <ai_platform_network_create+0x140>
 800883c:	4b1d      	ldr	r3, [pc, #116]	; (80088b4 <ai_platform_network_create+0x19c>)
 800883e:	2201      	movs	r2, #1
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	2a00      	cmp	r2, #0
 8008846:	d1fc      	bne.n	8008842 <ai_platform_network_create+0x12a>
 8008848:	4b1e      	ldr	r3, [pc, #120]	; (80088c4 <ai_platform_network_create+0x1ac>)
 800884a:	4a1f      	ldr	r2, [pc, #124]	; (80088c8 <ai_platform_network_create+0x1b0>)
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	4b1e      	ldr	r3, [pc, #120]	; (80088cc <ai_platform_network_create+0x1b4>)
 8008852:	429a      	cmp	r2, r3
 8008854:	d00e      	beq.n	8008874 <ai_platform_network_create+0x15c>
 8008856:	e7fe      	b.n	8008856 <ai_platform_network_create+0x13e>
 8008858:	4b17      	ldr	r3, [pc, #92]	; (80088b8 <ai_platform_network_create+0x1a0>)
 800885a:	2201      	movs	r2, #1
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	2a00      	cmp	r2, #0
 8008862:	d1fc      	bne.n	800885e <ai_platform_network_create+0x146>
 8008864:	4b15      	ldr	r3, [pc, #84]	; (80088bc <ai_platform_network_create+0x1a4>)
 8008866:	4a18      	ldr	r2, [pc, #96]	; (80088c8 <ai_platform_network_create+0x1b0>)
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	4b17      	ldr	r3, [pc, #92]	; (80088cc <ai_platform_network_create+0x1b4>)
 800886e:	429a      	cmp	r2, r3
 8008870:	d000      	beq.n	8008874 <ai_platform_network_create+0x15c>
 8008872:	e7fe      	b.n	8008872 <ai_platform_network_create+0x15a>
 8008874:	f7ff fc22 	bl	80080bc <_ai_platform_release_crc>
 8008878:	2200      	movs	r2, #0
 800887a:	4641      	mov	r1, r8
 800887c:	4638      	mov	r0, r7
 800887e:	f002 fad9 	bl	800ae34 <ai_version_get>
 8008882:	2200      	movs	r2, #0
 8008884:	4604      	mov	r4, r0
 8008886:	2105      	movs	r1, #5
 8008888:	2001      	movs	r0, #1
 800888a:	f002 fad3 	bl	800ae34 <ai_version_get>
 800888e:	4284      	cmp	r4, r0
 8008890:	d001      	beq.n	8008896 <ai_platform_network_create+0x17e>
 8008892:	2401      	movs	r4, #1
 8008894:	e7b2      	b.n	80087fc <ai_platform_network_create+0xe4>
 8008896:	a802      	add	r0, sp, #8
 8008898:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <ai_platform_network_create+0x1bc>)
 800889a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800889e:	f002 fa25 	bl	800acec <ai_check_custom_types>
 80088a2:	b110      	cbz	r0, 80088aa <ai_platform_network_create+0x192>
 80088a4:	2600      	movs	r6, #0
 80088a6:	4634      	mov	r4, r6
 80088a8:	e7ab      	b.n	8008802 <ai_platform_network_create+0xea>
 80088aa:	2402      	movs	r4, #2
 80088ac:	e7a6      	b.n	80087fc <ai_platform_network_create+0xe4>
 80088ae:	bf00      	nop
 80088b0:	e0042000 	.word	0xe0042000
 80088b4:	58024c08 	.word	0x58024c08
 80088b8:	40023008 	.word	0x40023008
 80088bc:	40023000 	.word	0x40023000
 80088c0:	e0002000 	.word	0xe0002000
 80088c4:	58024c00 	.word	0x58024c00
 80088c8:	f407a5c2 	.word	0xf407a5c2
 80088cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80088d0:	a1c00100 	.word	0xa1c00100
 80088d4:	84048403 	.word	0x84048403

080088d8 <ai_platform_network_init>:
 80088d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088dc:	2800      	cmp	r0, #0
 80088de:	d04b      	beq.n	8008978 <ai_platform_network_init+0xa0>
 80088e0:	4b79      	ldr	r3, [pc, #484]	; (8008ac8 <ai_platform_network_init+0x1f0>)
 80088e2:	6802      	ldr	r2, [r0, #0]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	4604      	mov	r4, r0
 80088e8:	d146      	bne.n	8008978 <ai_platform_network_init+0xa0>
 80088ea:	4a78      	ldr	r2, [pc, #480]	; (8008acc <ai_platform_network_init+0x1f4>)
 80088ec:	6813      	ldr	r3, [r2, #0]
 80088ee:	f023 0301 	bic.w	r3, r3, #1
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	460e      	mov	r6, r1
 80088f6:	f7ff fbdf 	bl	80080b8 <_ai_platform_acquire_crc>
 80088fa:	4b75      	ldr	r3, [pc, #468]	; (8008ad0 <ai_platform_network_init+0x1f8>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008906:	d00d      	beq.n	8008924 <ai_platform_network_init+0x4c>
 8008908:	4b72      	ldr	r3, [pc, #456]	; (8008ad4 <ai_platform_network_init+0x1fc>)
 800890a:	2201      	movs	r2, #1
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	2a00      	cmp	r2, #0
 8008912:	d1fc      	bne.n	800890e <ai_platform_network_init+0x36>
 8008914:	4b70      	ldr	r3, [pc, #448]	; (8008ad8 <ai_platform_network_init+0x200>)
 8008916:	4a71      	ldr	r2, [pc, #452]	; (8008adc <ai_platform_network_init+0x204>)
 8008918:	601a      	str	r2, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	4b70      	ldr	r3, [pc, #448]	; (8008ae0 <ai_platform_network_init+0x208>)
 800891e:	429a      	cmp	r2, r3
 8008920:	d00d      	beq.n	800893e <ai_platform_network_init+0x66>
 8008922:	e7fe      	b.n	8008922 <ai_platform_network_init+0x4a>
 8008924:	4b6f      	ldr	r3, [pc, #444]	; (8008ae4 <ai_platform_network_init+0x20c>)
 8008926:	2201      	movs	r2, #1
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	2a00      	cmp	r2, #0
 800892e:	d1fc      	bne.n	800892a <ai_platform_network_init+0x52>
 8008930:	4b6d      	ldr	r3, [pc, #436]	; (8008ae8 <ai_platform_network_init+0x210>)
 8008932:	4a6a      	ldr	r2, [pc, #424]	; (8008adc <ai_platform_network_init+0x204>)
 8008934:	601a      	str	r2, [r3, #0]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	4b69      	ldr	r3, [pc, #420]	; (8008ae0 <ai_platform_network_init+0x208>)
 800893a:	429a      	cmp	r2, r3
 800893c:	d11b      	bne.n	8008976 <ai_platform_network_init+0x9e>
 800893e:	f7ff fbbd 	bl	80080bc <_ai_platform_release_crc>
 8008942:	2e00      	cmp	r6, #0
 8008944:	d034      	beq.n	80089b0 <ai_platform_network_init+0xd8>
 8008946:	4b69      	ldr	r3, [pc, #420]	; (8008aec <ai_platform_network_init+0x214>)
 8008948:	6832      	ldr	r2, [r6, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d149      	bne.n	80089e2 <ai_platform_network_init+0x10a>
 800894e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8008952:	6930      	ldr	r0, [r6, #16]
 8008954:	89b3      	ldrh	r3, [r6, #12]
 8008956:	f8b6 c00e 	ldrh.w	ip, [r6, #14]
 800895a:	62a0      	str	r0, [r4, #40]	; 0x28
 800895c:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8008960:	2203      	movs	r2, #3
 8008962:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8008966:	84a3      	strh	r3, [r4, #36]	; 0x24
 8008968:	60e2      	str	r2, [r4, #12]
 800896a:	4620      	mov	r0, r4
 800896c:	f002 f9e8 	bl	800ad40 <ai_layers_init_all>
 8008970:	4620      	mov	r0, r4
 8008972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008976:	e7fe      	b.n	8008976 <ai_platform_network_init+0x9e>
 8008978:	4a54      	ldr	r2, [pc, #336]	; (8008acc <ai_platform_network_init+0x1f4>)
 800897a:	6813      	ldr	r3, [r2, #0]
 800897c:	f023 0301 	bic.w	r3, r3, #1
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	f7ff fb99 	bl	80080b8 <_ai_platform_acquire_crc>
 8008986:	4b52      	ldr	r3, [pc, #328]	; (8008ad0 <ai_platform_network_init+0x1f8>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800898e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008992:	d015      	beq.n	80089c0 <ai_platform_network_init+0xe8>
 8008994:	4b4f      	ldr	r3, [pc, #316]	; (8008ad4 <ai_platform_network_init+0x1fc>)
 8008996:	2201      	movs	r2, #1
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	2a00      	cmp	r2, #0
 800899e:	d1fc      	bne.n	800899a <ai_platform_network_init+0xc2>
 80089a0:	4b4d      	ldr	r3, [pc, #308]	; (8008ad8 <ai_platform_network_init+0x200>)
 80089a2:	4a4e      	ldr	r2, [pc, #312]	; (8008adc <ai_platform_network_init+0x204>)
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	4b4d      	ldr	r3, [pc, #308]	; (8008ae0 <ai_platform_network_init+0x208>)
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d015      	beq.n	80089da <ai_platform_network_init+0x102>
 80089ae:	e7fe      	b.n	80089ae <ai_platform_network_init+0xd6>
 80089b0:	f104 0010 	add.w	r0, r4, #16
 80089b4:	2211      	movs	r2, #17
 80089b6:	2110      	movs	r1, #16
 80089b8:	4634      	mov	r4, r6
 80089ba:	f000 fba1 	bl	8009100 <core_set_error>
 80089be:	e7d7      	b.n	8008970 <ai_platform_network_init+0x98>
 80089c0:	4b48      	ldr	r3, [pc, #288]	; (8008ae4 <ai_platform_network_init+0x20c>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
 80089c6:	681a      	ldr	r2, [r3, #0]
 80089c8:	2a00      	cmp	r2, #0
 80089ca:	d1fc      	bne.n	80089c6 <ai_platform_network_init+0xee>
 80089cc:	4b46      	ldr	r3, [pc, #280]	; (8008ae8 <ai_platform_network_init+0x210>)
 80089ce:	4a43      	ldr	r2, [pc, #268]	; (8008adc <ai_platform_network_init+0x204>)
 80089d0:	601a      	str	r2, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	4b42      	ldr	r3, [pc, #264]	; (8008ae0 <ai_platform_network_init+0x208>)
 80089d6:	429a      	cmp	r2, r3
 80089d8:	d16d      	bne.n	8008ab6 <ai_platform_network_init+0x1de>
 80089da:	f7ff fb6f 	bl	80080bc <_ai_platform_release_crc>
 80089de:	2400      	movs	r4, #0
 80089e0:	e7c6      	b.n	8008970 <ai_platform_network_init+0x98>
 80089e2:	4630      	mov	r0, r6
 80089e4:	2101      	movs	r1, #1
 80089e6:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80089ea:	f7ff fb19 	bl	8008020 <ai_buffer_get_size>
 80089ee:	4635      	mov	r5, r6
 80089f0:	f106 071c 	add.w	r7, r6, #28
 80089f4:	2101      	movs	r1, #1
 80089f6:	4606      	mov	r6, r0
 80089f8:	4638      	mov	r0, r7
 80089fa:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80089fe:	f7ff fb0f 	bl	8008020 <ai_buffer_get_size>
 8008a02:	2e00      	cmp	r6, #0
 8008a04:	bf0a      	itet	eq
 8008a06:	46b6      	moveq	lr, r6
 8008a08:	f04f 0e01 	movne.w	lr, #1
 8008a0c:	4635      	moveq	r5, r6
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d14b      	bne.n	8008aaa <ai_platform_network_init+0x1d2>
 8008a12:	4607      	mov	r7, r0
 8008a14:	4684      	mov	ip, r0
 8008a16:	f1b8 0f00 	cmp.w	r8, #0
 8008a1a:	d023      	beq.n	8008a64 <ai_platform_network_init+0x18c>
 8008a1c:	8be3      	ldrh	r3, [r4, #30]
 8008a1e:	4573      	cmp	r3, lr
 8008a20:	d207      	bcs.n	8008a32 <ai_platform_network_init+0x15a>
 8008a22:	f104 0010 	add.w	r0, r4, #16
 8008a26:	2212      	movs	r2, #18
 8008a28:	2116      	movs	r1, #22
 8008a2a:	f000 fb69 	bl	8009100 <core_set_error>
 8008a2e:	2400      	movs	r4, #0
 8008a30:	e79e      	b.n	8008970 <ai_platform_network_init+0x98>
 8008a32:	f1be 0f00 	cmp.w	lr, #0
 8008a36:	d006      	beq.n	8008a46 <ai_platform_network_init+0x16e>
 8008a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008a3a:	6a26      	ldr	r6, [r4, #32]
 8008a3c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8008a3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008a42:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8008a46:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8008a48:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8008a4c:	2600      	movs	r6, #0
 8008a4e:	4563      	cmp	r3, ip
 8008a50:	83a6      	strh	r6, [r4, #28]
 8008a52:	d211      	bcs.n	8008a78 <ai_platform_network_init+0x1a0>
 8008a54:	f104 0010 	add.w	r0, r4, #16
 8008a58:	2213      	movs	r2, #19
 8008a5a:	2116      	movs	r1, #22
 8008a5c:	f000 fb50 	bl	8009100 <core_set_error>
 8008a60:	4634      	mov	r4, r6
 8008a62:	e785      	b.n	8008970 <ai_platform_network_init+0x98>
 8008a64:	2e00      	cmp	r6, #0
 8008a66:	d0d9      	beq.n	8008a1c <ai_platform_network_init+0x144>
 8008a68:	f104 0010 	add.w	r0, r4, #16
 8008a6c:	2212      	movs	r2, #18
 8008a6e:	2110      	movs	r1, #16
 8008a70:	4644      	mov	r4, r8
 8008a72:	f000 fb45 	bl	8009100 <core_set_error>
 8008a76:	e77b      	b.n	8008970 <ai_platform_network_init+0x98>
 8008a78:	f1bc 0f00 	cmp.w	ip, #0
 8008a7c:	d013      	beq.n	8008aa6 <ai_platform_network_init+0x1ce>
 8008a7e:	f04f 081c 	mov.w	r8, #28
 8008a82:	fb08 f80c 	mul.w	r8, r8, ip
 8008a86:	eb07 0e06 	add.w	lr, r7, r6
 8008a8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008a8e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008a90:	4435      	add	r5, r6
 8008a92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008a94:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8008a98:	361c      	adds	r6, #28
 8008a9a:	4546      	cmp	r6, r8
 8008a9c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8008aa0:	d1f1      	bne.n	8008a86 <ai_platform_network_init+0x1ae>
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	e75c      	b.n	8008960 <ai_platform_network_init+0x88>
 8008aa6:	4663      	mov	r3, ip
 8008aa8:	e75a      	b.n	8008960 <ai_platform_network_init+0x88>
 8008aaa:	f1b9 0f00 	cmp.w	r9, #0
 8008aae:	d003      	beq.n	8008ab8 <ai_platform_network_init+0x1e0>
 8008ab0:	f04f 0c01 	mov.w	ip, #1
 8008ab4:	e7af      	b.n	8008a16 <ai_platform_network_init+0x13e>
 8008ab6:	e7fe      	b.n	8008ab6 <ai_platform_network_init+0x1de>
 8008ab8:	f104 0010 	add.w	r0, r4, #16
 8008abc:	2213      	movs	r2, #19
 8008abe:	2110      	movs	r1, #16
 8008ac0:	464c      	mov	r4, r9
 8008ac2:	f000 fb1d 	bl	8009100 <core_set_error>
 8008ac6:	e753      	b.n	8008970 <ai_platform_network_init+0x98>
 8008ac8:	a1c00100 	.word	0xa1c00100
 8008acc:	e0002000 	.word	0xe0002000
 8008ad0:	e0042000 	.word	0xe0042000
 8008ad4:	58024c08 	.word	0x58024c08
 8008ad8:	58024c00 	.word	0x58024c00
 8008adc:	f407a5c2 	.word	0xf407a5c2
 8008ae0:	b5e8b5cd 	.word	0xb5e8b5cd
 8008ae4:	40023008 	.word	0x40023008
 8008ae8:	40023000 	.word	0x40023000
 8008aec:	a1facade 	.word	0xa1facade

08008af0 <ai_platform_network_post_init>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	b120      	cbz	r0, 8008afe <ai_platform_network_post_init+0xe>
 8008af4:	4b3f      	ldr	r3, [pc, #252]	; (8008bf4 <ai_platform_network_post_init+0x104>)
 8008af6:	6802      	ldr	r2, [r0, #0]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	4604      	mov	r4, r0
 8008afc:	d02d      	beq.n	8008b5a <ai_platform_network_post_init+0x6a>
 8008afe:	4a3e      	ldr	r2, [pc, #248]	; (8008bf8 <ai_platform_network_post_init+0x108>)
 8008b00:	6813      	ldr	r3, [r2, #0]
 8008b02:	f023 0301 	bic.w	r3, r3, #1
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	f7ff fad6 	bl	80080b8 <_ai_platform_acquire_crc>
 8008b0c:	4b3b      	ldr	r3, [pc, #236]	; (8008bfc <ai_platform_network_post_init+0x10c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b18:	d00d      	beq.n	8008b36 <ai_platform_network_post_init+0x46>
 8008b1a:	4b39      	ldr	r3, [pc, #228]	; (8008c00 <ai_platform_network_post_init+0x110>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	2a00      	cmp	r2, #0
 8008b24:	d1fc      	bne.n	8008b20 <ai_platform_network_post_init+0x30>
 8008b26:	4b37      	ldr	r3, [pc, #220]	; (8008c04 <ai_platform_network_post_init+0x114>)
 8008b28:	4a37      	ldr	r2, [pc, #220]	; (8008c08 <ai_platform_network_post_init+0x118>)
 8008b2a:	601a      	str	r2, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	4b37      	ldr	r3, [pc, #220]	; (8008c0c <ai_platform_network_post_init+0x11c>)
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d00d      	beq.n	8008b50 <ai_platform_network_post_init+0x60>
 8008b34:	e7fe      	b.n	8008b34 <ai_platform_network_post_init+0x44>
 8008b36:	4b36      	ldr	r3, [pc, #216]	; (8008c10 <ai_platform_network_post_init+0x120>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	d1fc      	bne.n	8008b3c <ai_platform_network_post_init+0x4c>
 8008b42:	4b34      	ldr	r3, [pc, #208]	; (8008c14 <ai_platform_network_post_init+0x124>)
 8008b44:	4a30      	ldr	r2, [pc, #192]	; (8008c08 <ai_platform_network_post_init+0x118>)
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4b30      	ldr	r3, [pc, #192]	; (8008c0c <ai_platform_network_post_init+0x11c>)
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d103      	bne.n	8008b58 <ai_platform_network_post_init+0x68>
 8008b50:	f7ff fab4 	bl	80080bc <_ai_platform_release_crc>
 8008b54:	2000      	movs	r0, #0
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	e7fe      	b.n	8008b58 <ai_platform_network_post_init+0x68>
 8008b5a:	4a27      	ldr	r2, [pc, #156]	; (8008bf8 <ai_platform_network_post_init+0x108>)
 8008b5c:	6813      	ldr	r3, [r2, #0]
 8008b5e:	f023 0301 	bic.w	r3, r3, #1
 8008b62:	6013      	str	r3, [r2, #0]
 8008b64:	f7ff faa8 	bl	80080b8 <_ai_platform_acquire_crc>
 8008b68:	4b24      	ldr	r3, [pc, #144]	; (8008bfc <ai_platform_network_post_init+0x10c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b74:	d00d      	beq.n	8008b92 <ai_platform_network_post_init+0xa2>
 8008b76:	4b22      	ldr	r3, [pc, #136]	; (8008c00 <ai_platform_network_post_init+0x110>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	2a00      	cmp	r2, #0
 8008b80:	d1fc      	bne.n	8008b7c <ai_platform_network_post_init+0x8c>
 8008b82:	4b20      	ldr	r3, [pc, #128]	; (8008c04 <ai_platform_network_post_init+0x114>)
 8008b84:	4a20      	ldr	r2, [pc, #128]	; (8008c08 <ai_platform_network_post_init+0x118>)
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	4b20      	ldr	r3, [pc, #128]	; (8008c0c <ai_platform_network_post_init+0x11c>)
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d00e      	beq.n	8008bae <ai_platform_network_post_init+0xbe>
 8008b90:	e7fe      	b.n	8008b90 <ai_platform_network_post_init+0xa0>
 8008b92:	4b1f      	ldr	r3, [pc, #124]	; (8008c10 <ai_platform_network_post_init+0x120>)
 8008b94:	2201      	movs	r2, #1
 8008b96:	601a      	str	r2, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	2a00      	cmp	r2, #0
 8008b9c:	d1fc      	bne.n	8008b98 <ai_platform_network_post_init+0xa8>
 8008b9e:	4b1d      	ldr	r3, [pc, #116]	; (8008c14 <ai_platform_network_post_init+0x124>)
 8008ba0:	4a19      	ldr	r2, [pc, #100]	; (8008c08 <ai_platform_network_post_init+0x118>)
 8008ba2:	601a      	str	r2, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <ai_platform_network_post_init+0x11c>)
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d000      	beq.n	8008bae <ai_platform_network_post_init+0xbe>
 8008bac:	e7fe      	b.n	8008bac <ai_platform_network_post_init+0xbc>
 8008bae:	f7ff fa85 	bl	80080bc <_ai_platform_release_crc>
 8008bb2:	68e3      	ldr	r3, [r4, #12]
 8008bb4:	f013 0502 	ands.w	r5, r3, #2
 8008bb8:	d011      	beq.n	8008bde <ai_platform_network_post_init+0xee>
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f002 f8d4 	bl	800ad68 <ai_layers_post_init_all>
 8008bc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008bc2:	b1a3      	cbz	r3, 8008bee <ai_platform_network_post_init+0xfe>
 8008bc4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8008bc6:	b195      	cbz	r5, 8008bee <ai_platform_network_post_init+0xfe>
 8008bc8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008bca:	4629      	mov	r1, r5
 8008bcc:	2000      	movs	r0, #0
 8008bce:	4798      	blx	r3
 8008bd0:	692b      	ldr	r3, [r5, #16]
 8008bd2:	42ab      	cmp	r3, r5
 8008bd4:	d00b      	beq.n	8008bee <ai_platform_network_post_init+0xfe>
 8008bd6:	461d      	mov	r5, r3
 8008bd8:	b14b      	cbz	r3, 8008bee <ai_platform_network_post_init+0xfe>
 8008bda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008bdc:	e7f4      	b.n	8008bc8 <ai_platform_network_post_init+0xd8>
 8008bde:	f104 0010 	add.w	r0, r4, #16
 8008be2:	2210      	movs	r2, #16
 8008be4:	2111      	movs	r1, #17
 8008be6:	f000 fa8b 	bl	8009100 <core_set_error>
 8008bea:	4628      	mov	r0, r5
 8008bec:	bd38      	pop	{r3, r4, r5, pc}
 8008bee:	2001      	movs	r0, #1
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
 8008bf2:	bf00      	nop
 8008bf4:	a1c00100 	.word	0xa1c00100
 8008bf8:	e0002000 	.word	0xe0002000
 8008bfc:	e0042000 	.word	0xe0042000
 8008c00:	58024c08 	.word	0x58024c08
 8008c04:	58024c00 	.word	0x58024c00
 8008c08:	f407a5c2 	.word	0xf407a5c2
 8008c0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008c10:	40023008 	.word	0x40023008
 8008c14:	40023000 	.word	0x40023000

08008c18 <ai_platform_network_process>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	460d      	mov	r5, r1
 8008c20:	9202      	str	r2, [sp, #8]
 8008c22:	4604      	mov	r4, r0
 8008c24:	b120      	cbz	r0, 8008c30 <ai_platform_network_process+0x18>
 8008c26:	4b73      	ldr	r3, [pc, #460]	; (8008df4 <ai_platform_network_process+0x1dc>)
 8008c28:	6802      	ldr	r2, [r0, #0]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	bf18      	it	ne
 8008c2e:	2400      	movne	r4, #0
 8008c30:	4a71      	ldr	r2, [pc, #452]	; (8008df8 <ai_platform_network_process+0x1e0>)
 8008c32:	6813      	ldr	r3, [r2, #0]
 8008c34:	f023 0301 	bic.w	r3, r3, #1
 8008c38:	6013      	str	r3, [r2, #0]
 8008c3a:	f7ff fa3d 	bl	80080b8 <_ai_platform_acquire_crc>
 8008c3e:	4b6f      	ldr	r3, [pc, #444]	; (8008dfc <ai_platform_network_process+0x1e4>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c4a:	d00d      	beq.n	8008c68 <ai_platform_network_process+0x50>
 8008c4c:	4b6c      	ldr	r3, [pc, #432]	; (8008e00 <ai_platform_network_process+0x1e8>)
 8008c4e:	2201      	movs	r2, #1
 8008c50:	601a      	str	r2, [r3, #0]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	d1fc      	bne.n	8008c52 <ai_platform_network_process+0x3a>
 8008c58:	4b6a      	ldr	r3, [pc, #424]	; (8008e04 <ai_platform_network_process+0x1ec>)
 8008c5a:	4a6b      	ldr	r2, [pc, #428]	; (8008e08 <ai_platform_network_process+0x1f0>)
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	4b6a      	ldr	r3, [pc, #424]	; (8008e0c <ai_platform_network_process+0x1f4>)
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d00e      	beq.n	8008c84 <ai_platform_network_process+0x6c>
 8008c66:	e7fe      	b.n	8008c66 <ai_platform_network_process+0x4e>
 8008c68:	4b69      	ldr	r3, [pc, #420]	; (8008e10 <ai_platform_network_process+0x1f8>)
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	2a00      	cmp	r2, #0
 8008c72:	d1fc      	bne.n	8008c6e <ai_platform_network_process+0x56>
 8008c74:	4b67      	ldr	r3, [pc, #412]	; (8008e14 <ai_platform_network_process+0x1fc>)
 8008c76:	4a64      	ldr	r2, [pc, #400]	; (8008e08 <ai_platform_network_process+0x1f0>)
 8008c78:	601a      	str	r2, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	4b63      	ldr	r3, [pc, #396]	; (8008e0c <ai_platform_network_process+0x1f4>)
 8008c7e:	429a      	cmp	r2, r3
 8008c80:	d000      	beq.n	8008c84 <ai_platform_network_process+0x6c>
 8008c82:	e7fe      	b.n	8008c82 <ai_platform_network_process+0x6a>
 8008c84:	f7ff fa1a 	bl	80080bc <_ai_platform_release_crc>
 8008c88:	2c00      	cmp	r4, #0
 8008c8a:	f000 8089 	beq.w	8008da0 <ai_platform_network_process+0x188>
 8008c8e:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8008c90:	2f00      	cmp	r7, #0
 8008c92:	f040 822b 	bne.w	80090ec <ai_platform_network_process+0x4d4>
 8008c96:	68e3      	ldr	r3, [r4, #12]
 8008c98:	f003 0303 	and.w	r3, r3, #3
 8008c9c:	2600      	movs	r6, #0
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	6166      	str	r6, [r4, #20]
 8008ca2:	f040 821b 	bne.w	80090dc <ai_platform_network_process+0x4c4>
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	f000 809c 	beq.w	8008de4 <ai_platform_network_process+0x1cc>
 8008cac:	2f00      	cmp	r7, #0
 8008cae:	f000 8099 	beq.w	8008de4 <ai_platform_network_process+0x1cc>
 8008cb2:	883b      	ldrh	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 8095 	beq.w	8008de4 <ai_platform_network_process+0x1cc>
 8008cba:	69aa      	ldr	r2, [r5, #24]
 8008cbc:	9401      	str	r4, [sp, #4]
 8008cbe:	f8d2 8000 	ldr.w	r8, [r2]
 8008cc2:	429e      	cmp	r6, r3
 8008cc4:	f080 80a8 	bcs.w	8008e18 <ai_platform_network_process+0x200>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 80a4 	beq.w	8008e18 <ai_platform_network_process+0x200>
 8008cd0:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 8008cd4:	2c00      	cmp	r4, #0
 8008cd6:	f000 809f 	beq.w	8008e18 <ai_platform_network_process+0x200>
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f8d3 b000 	ldr.w	fp, [r3]
 8008ce0:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8008ce4:	eb1b 0a09 	adds.w	sl, fp, r9
 8008ce8:	d07b      	beq.n	8008de2 <ai_platform_network_process+0x1ca>
 8008cea:	69a3      	ldr	r3, [r4, #24]
 8008cec:	2101      	movs	r1, #1
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	9303      	str	r3, [sp, #12]
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f7ff f994 	bl	8008020 <ai_buffer_get_size>
 8008cf8:	9b03      	ldr	r3, [sp, #12]
 8008cfa:	4283      	cmp	r3, r0
 8008cfc:	d368      	bcc.n	8008dd0 <ai_platform_network_process+0x1b8>
 8008cfe:	68e0      	ldr	r0, [r4, #12]
 8008d00:	69a9      	ldr	r1, [r5, #24]
 8008d02:	68c2      	ldr	r2, [r0, #12]
 8008d04:	68cb      	ldr	r3, [r1, #12]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d162      	bne.n	8008dd0 <ai_platform_network_process+0x1b8>
 8008d0a:	6882      	ldr	r2, [r0, #8]
 8008d0c:	688b      	ldr	r3, [r1, #8]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d15e      	bne.n	8008dd0 <ai_platform_network_process+0x1b8>
 8008d12:	6842      	ldr	r2, [r0, #4]
 8008d14:	684b      	ldr	r3, [r1, #4]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d15a      	bne.n	8008dd0 <ai_platform_network_process+0x1b8>
 8008d1a:	69a3      	ldr	r3, [r4, #24]
 8008d1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008d20:	f002 f91c 	bl	800af5c <ai_array_get_data_byte_size>
 8008d24:	9003      	str	r0, [sp, #12]
 8008d26:	4620      	mov	r0, r4
 8008d28:	f002 f88a 	bl	800ae40 <get_tensor_byte_size>
 8008d2c:	9b03      	ldr	r3, [sp, #12]
 8008d2e:	4283      	cmp	r3, r0
 8008d30:	d34e      	bcc.n	8008dd0 <ai_platform_network_process+0x1b8>
 8008d32:	69a3      	ldr	r3, [r4, #24]
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	f002 f897 	bl	800ae68 <ai_array_to_buffer_fmt>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	4043      	eors	r3, r0
 8008d3e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8008d42:	d13c      	bne.n	8008dbe <ai_platform_network_process+0x1a6>
 8008d44:	686b      	ldr	r3, [r5, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d04b      	beq.n	8008de2 <ai_platform_network_process+0x1ca>
 8008d4a:	69ab      	ldr	r3, [r5, #24]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	b362      	cbz	r2, 8008daa <ai_platform_network_process+0x192>
 8008d50:	4620      	mov	r0, r4
 8008d52:	9203      	str	r2, [sp, #12]
 8008d54:	f002 f874 	bl	800ae40 <get_tensor_byte_size>
 8008d58:	f8ca 0008 	str.w	r0, [sl, #8]
 8008d5c:	69ab      	ldr	r3, [r5, #24]
 8008d5e:	9a03      	ldr	r2, [sp, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	fb03 f000 	mul.w	r0, r3, r0
 8008d66:	f8ca 000c 	str.w	r0, [sl, #12]
 8008d6a:	6869      	ldr	r1, [r5, #4]
 8008d6c:	f8ca 1004 	str.w	r1, [sl, #4]
 8008d70:	686b      	ldr	r3, [r5, #4]
 8008d72:	4403      	add	r3, r0
 8008d74:	f84b 3009 	str.w	r3, [fp, r9]
 8008d78:	69a0      	ldr	r0, [r4, #24]
 8008d7a:	6803      	ldr	r3, [r0, #0]
 8008d7c:	4590      	cmp	r8, r2
 8008d7e:	bf38      	it	cc
 8008d80:	4690      	movcc	r8, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	d408      	bmi.n	8008d98 <ai_platform_network_process+0x180>
 8008d86:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008d8a:	1a9b      	subs	r3, r3, r2
 8008d8c:	4419      	add	r1, r3
 8008d8e:	6081      	str	r1, [r0, #8]
 8008d90:	69a3      	ldr	r3, [r4, #24]
 8008d92:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008d96:	60da      	str	r2, [r3, #12]
 8008d98:	883b      	ldrh	r3, [r7, #0]
 8008d9a:	3601      	adds	r6, #1
 8008d9c:	351c      	adds	r5, #28
 8008d9e:	e790      	b.n	8008cc2 <ai_platform_network_process+0xaa>
 8008da0:	4623      	mov	r3, r4
 8008da2:	4618      	mov	r0, r3
 8008da4:	b005      	add	sp, #20
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008daa:	9c01      	ldr	r4, [sp, #4]
 8008dac:	4692      	mov	sl, r2
 8008dae:	f104 0010 	add.w	r0, r4, #16
 8008db2:	2221      	movs	r2, #33	; 0x21
 8008db4:	2112      	movs	r1, #18
 8008db6:	f000 f9a3 	bl	8009100 <core_set_error>
 8008dba:	4653      	mov	r3, sl
 8008dbc:	e7f1      	b.n	8008da2 <ai_platform_network_process+0x18a>
 8008dbe:	9c01      	ldr	r4, [sp, #4]
 8008dc0:	2219      	movs	r2, #25
 8008dc2:	f104 0010 	add.w	r0, r4, #16
 8008dc6:	2112      	movs	r1, #18
 8008dc8:	f000 f99a 	bl	8009100 <core_set_error>
 8008dcc:	2300      	movs	r3, #0
 8008dce:	e7e8      	b.n	8008da2 <ai_platform_network_process+0x18a>
 8008dd0:	9c01      	ldr	r4, [sp, #4]
 8008dd2:	2218      	movs	r2, #24
 8008dd4:	f104 0010 	add.w	r0, r4, #16
 8008dd8:	2112      	movs	r1, #18
 8008dda:	f000 f991 	bl	8009100 <core_set_error>
 8008dde:	2300      	movs	r3, #0
 8008de0:	e7df      	b.n	8008da2 <ai_platform_network_process+0x18a>
 8008de2:	9c01      	ldr	r4, [sp, #4]
 8008de4:	f104 0010 	add.w	r0, r4, #16
 8008de8:	2217      	movs	r2, #23
 8008dea:	2112      	movs	r1, #18
 8008dec:	f000 f988 	bl	8009100 <core_set_error>
 8008df0:	2300      	movs	r3, #0
 8008df2:	e7d6      	b.n	8008da2 <ai_platform_network_process+0x18a>
 8008df4:	a1c00100 	.word	0xa1c00100
 8008df8:	e0002000 	.word	0xe0002000
 8008dfc:	e0042000 	.word	0xe0042000
 8008e00:	58024c08 	.word	0x58024c08
 8008e04:	58024c00 	.word	0x58024c00
 8008e08:	f407a5c2 	.word	0xf407a5c2
 8008e0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8008e10:	40023008 	.word	0x40023008
 8008e14:	40023000 	.word	0x40023000
 8008e18:	9c01      	ldr	r4, [sp, #4]
 8008e1a:	9a02      	ldr	r2, [sp, #8]
 8008e1c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8008e1e:	2a00      	cmp	r2, #0
 8008e20:	f000 80ab 	beq.w	8008f7a <ai_platform_network_process+0x362>
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	f240 809e 	bls.w	8008f66 <ai_platform_network_process+0x34e>
 8008e2a:	f8d4 9030 	ldr.w	r9, [r4, #48]	; 0x30
 8008e2e:	f119 0f0c 	cmn.w	r9, #12
 8008e32:	f000 8098 	beq.w	8008f66 <ai_platform_network_process+0x34e>
 8008e36:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f000 8093 	beq.w	8008f66 <ai_platform_network_process+0x34e>
 8008e40:	9d02      	ldr	r5, [sp, #8]
 8008e42:	9401      	str	r4, [sp, #4]
 8008e44:	2700      	movs	r7, #0
 8008e46:	429f      	cmp	r7, r3
 8008e48:	f080 8095 	bcs.w	8008f76 <ai_platform_network_process+0x35e>
 8008e4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f000 8090 	beq.w	8008f76 <ai_platform_network_process+0x35e>
 8008e56:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8008e5a:	2c00      	cmp	r4, #0
 8008e5c:	f000 808b 	beq.w	8008f76 <ai_platform_network_process+0x35e>
 8008e60:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8008e64:	f8d3 b000 	ldr.w	fp, [r3]
 8008e68:	013e      	lsls	r6, r7, #4
 8008e6a:	eb1b 0a06 	adds.w	sl, fp, r6
 8008e6e:	f000 812c 	beq.w	80090ca <ai_platform_network_process+0x4b2>
 8008e72:	69a3      	ldr	r3, [r4, #24]
 8008e74:	2101      	movs	r1, #1
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	9302      	str	r3, [sp, #8]
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	f7ff f8d0 	bl	8008020 <ai_buffer_get_size>
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	4283      	cmp	r3, r0
 8008e84:	d36e      	bcc.n	8008f64 <ai_platform_network_process+0x34c>
 8008e86:	68e0      	ldr	r0, [r4, #12]
 8008e88:	69a9      	ldr	r1, [r5, #24]
 8008e8a:	68c2      	ldr	r2, [r0, #12]
 8008e8c:	68cb      	ldr	r3, [r1, #12]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d168      	bne.n	8008f64 <ai_platform_network_process+0x34c>
 8008e92:	6882      	ldr	r2, [r0, #8]
 8008e94:	688b      	ldr	r3, [r1, #8]
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d164      	bne.n	8008f64 <ai_platform_network_process+0x34c>
 8008e9a:	6842      	ldr	r2, [r0, #4]
 8008e9c:	684b      	ldr	r3, [r1, #4]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d160      	bne.n	8008f64 <ai_platform_network_process+0x34c>
 8008ea2:	69a3      	ldr	r3, [r4, #24]
 8008ea4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008ea8:	f002 f858 	bl	800af5c <ai_array_get_data_byte_size>
 8008eac:	9002      	str	r0, [sp, #8]
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f001 ffc6 	bl	800ae40 <get_tensor_byte_size>
 8008eb4:	9b02      	ldr	r3, [sp, #8]
 8008eb6:	4283      	cmp	r3, r0
 8008eb8:	d354      	bcc.n	8008f64 <ai_platform_network_process+0x34c>
 8008eba:	69a3      	ldr	r3, [r4, #24]
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	f001 ffd3 	bl	800ae68 <ai_array_to_buffer_fmt>
 8008ec2:	682b      	ldr	r3, [r5, #0]
 8008ec4:	4043      	eors	r3, r0
 8008ec6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8008eca:	d142      	bne.n	8008f52 <ai_platform_network_process+0x33a>
 8008ecc:	686b      	ldr	r3, [r5, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d035      	beq.n	8008f3e <ai_platform_network_process+0x326>
 8008ed2:	69ab      	ldr	r3, [r5, #24]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	b342      	cbz	r2, 8008f2a <ai_platform_network_process+0x312>
 8008ed8:	4620      	mov	r0, r4
 8008eda:	9202      	str	r2, [sp, #8]
 8008edc:	f001 ffb0 	bl	800ae40 <get_tensor_byte_size>
 8008ee0:	f8ca 0008 	str.w	r0, [sl, #8]
 8008ee4:	69ab      	ldr	r3, [r5, #24]
 8008ee6:	9a02      	ldr	r2, [sp, #8]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	fb03 f000 	mul.w	r0, r3, r0
 8008eee:	f8ca 000c 	str.w	r0, [sl, #12]
 8008ef2:	6869      	ldr	r1, [r5, #4]
 8008ef4:	f8ca 1004 	str.w	r1, [sl, #4]
 8008ef8:	686b      	ldr	r3, [r5, #4]
 8008efa:	4403      	add	r3, r0
 8008efc:	f84b 3006 	str.w	r3, [fp, r6]
 8008f00:	69a0      	ldr	r0, [r4, #24]
 8008f02:	6803      	ldr	r3, [r0, #0]
 8008f04:	4590      	cmp	r8, r2
 8008f06:	bf38      	it	cc
 8008f08:	4690      	movcc	r8, r2
 8008f0a:	009e      	lsls	r6, r3, #2
 8008f0c:	d408      	bmi.n	8008f20 <ai_platform_network_process+0x308>
 8008f0e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8008f12:	1a9b      	subs	r3, r3, r2
 8008f14:	4419      	add	r1, r3
 8008f16:	6081      	str	r1, [r0, #8]
 8008f18:	69a3      	ldr	r3, [r4, #24]
 8008f1a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008f1e:	60da      	str	r2, [r3, #12]
 8008f20:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008f24:	3701      	adds	r7, #1
 8008f26:	351c      	adds	r5, #28
 8008f28:	e78d      	b.n	8008e46 <ai_platform_network_process+0x22e>
 8008f2a:	9c01      	ldr	r4, [sp, #4]
 8008f2c:	4692      	mov	sl, r2
 8008f2e:	f104 0010 	add.w	r0, r4, #16
 8008f32:	2221      	movs	r2, #33	; 0x21
 8008f34:	2113      	movs	r1, #19
 8008f36:	f000 f8e3 	bl	8009100 <core_set_error>
 8008f3a:	4653      	mov	r3, sl
 8008f3c:	e731      	b.n	8008da2 <ai_platform_network_process+0x18a>
 8008f3e:	9c01      	ldr	r4, [sp, #4]
 8008f40:	469a      	mov	sl, r3
 8008f42:	f104 0010 	add.w	r0, r4, #16
 8008f46:	2217      	movs	r2, #23
 8008f48:	2113      	movs	r1, #19
 8008f4a:	f000 f8d9 	bl	8009100 <core_set_error>
 8008f4e:	4653      	mov	r3, sl
 8008f50:	e727      	b.n	8008da2 <ai_platform_network_process+0x18a>
 8008f52:	9c01      	ldr	r4, [sp, #4]
 8008f54:	2219      	movs	r2, #25
 8008f56:	f104 0010 	add.w	r0, r4, #16
 8008f5a:	2113      	movs	r1, #19
 8008f5c:	f000 f8d0 	bl	8009100 <core_set_error>
 8008f60:	2300      	movs	r3, #0
 8008f62:	e71e      	b.n	8008da2 <ai_platform_network_process+0x18a>
 8008f64:	9c01      	ldr	r4, [sp, #4]
 8008f66:	f104 0010 	add.w	r0, r4, #16
 8008f6a:	2218      	movs	r2, #24
 8008f6c:	2113      	movs	r1, #19
 8008f6e:	f000 f8c7 	bl	8009100 <core_set_error>
 8008f72:	2300      	movs	r3, #0
 8008f74:	e715      	b.n	8008da2 <ai_platform_network_process+0x18a>
 8008f76:	9c01      	ldr	r4, [sp, #4]
 8008f78:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8008f7a:	f8a4 8014 	strh.w	r8, [r4, #20]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 80a0 	beq.w	80090c4 <ai_platform_network_process+0x4ac>
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8008f88:	f240 809a 	bls.w	80090c0 <ai_platform_network_process+0x4a8>
 8008f8c:	f105 070c 	add.w	r7, r5, #12
 8008f90:	8ae3      	ldrh	r3, [r4, #22]
 8008f92:	8aa2      	ldrh	r2, [r4, #20]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	f67f af04 	bls.w	8008da2 <ai_platform_network_process+0x18a>
 8008f9a:	46a3      	mov	fp, r4
 8008f9c:	2d00      	cmp	r5, #0
 8008f9e:	d036      	beq.n	800900e <ai_platform_network_process+0x3f6>
 8008fa0:	882b      	ldrh	r3, [r5, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d033      	beq.n	800900e <ai_platform_network_process+0x3f6>
 8008fa6:	686b      	ldr	r3, [r5, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d030      	beq.n	800900e <ai_platform_network_process+0x3f6>
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f04f 0800 	mov.w	r8, #0
 8008fb2:	b9db      	cbnz	r3, 8008fec <ai_platform_network_process+0x3d4>
 8008fb4:	e02b      	b.n	800900e <ai_platform_network_process+0x3f6>
 8008fb6:	68d4      	ldr	r4, [r2, #12]
 8008fb8:	1b00      	subs	r0, r0, r4
 8008fba:	4401      	add	r1, r0
 8008fbc:	6091      	str	r1, [r2, #8]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	6872      	ldr	r2, [r6, #4]
 8008fc2:	60da      	str	r2, [r3, #12]
 8008fc4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8008fc8:	f85a 2009 	ldr.w	r2, [sl, r9]
 8008fcc:	440b      	add	r3, r1
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	bf24      	itt	cs
 8008fd2:	68f3      	ldrcs	r3, [r6, #12]
 8008fd4:	1ad3      	subcs	r3, r2, r3
 8008fd6:	6073      	str	r3, [r6, #4]
 8008fd8:	882b      	ldrh	r3, [r5, #0]
 8008fda:	f108 0801 	add.w	r8, r8, #1
 8008fde:	4598      	cmp	r8, r3
 8008fe0:	d215      	bcs.n	800900e <ai_platform_network_process+0x3f6>
 8008fe2:	686b      	ldr	r3, [r5, #4]
 8008fe4:	b19b      	cbz	r3, 800900e <ai_platform_network_process+0x3f6>
 8008fe6:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008fea:	b183      	cbz	r3, 800900e <ai_platform_network_process+0x3f6>
 8008fec:	68a9      	ldr	r1, [r5, #8]
 8008fee:	699a      	ldr	r2, [r3, #24]
 8008ff0:	f8d1 a000 	ldr.w	sl, [r1]
 8008ff4:	6814      	ldr	r4, [r2, #0]
 8008ff6:	6890      	ldr	r0, [r2, #8]
 8008ff8:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8008ffc:	eb0a 0609 	add.w	r6, sl, r9
 8009000:	00a4      	lsls	r4, r4, #2
 8009002:	6871      	ldr	r1, [r6, #4]
 8009004:	d5d7      	bpl.n	8008fb6 <ai_platform_network_process+0x39e>
 8009006:	68b2      	ldr	r2, [r6, #8]
 8009008:	f001 ffea 	bl	800afe0 <memcpy>
 800900c:	e7da      	b.n	8008fc4 <ai_platform_network_process+0x3ac>
 800900e:	4658      	mov	r0, fp
 8009010:	f001 fec2 	bl	800ad98 <ai_layers_forward_all>
 8009014:	2f00      	cmp	r7, #0
 8009016:	d047      	beq.n	80090a8 <ai_platform_network_process+0x490>
 8009018:	883b      	ldrh	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d044      	beq.n	80090a8 <ai_platform_network_process+0x490>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d041      	beq.n	80090a8 <ai_platform_network_process+0x490>
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	2800      	cmp	r0, #0
 8009028:	d03e      	beq.n	80090a8 <ai_platform_network_process+0x490>
 800902a:	f04f 0800 	mov.w	r8, #0
 800902e:	e019      	b.n	8009064 <ai_platform_network_process+0x44c>
 8009030:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009034:	4293      	cmp	r3, r2
 8009036:	bf24      	itt	cs
 8009038:	68f3      	ldrcs	r3, [r6, #12]
 800903a:	1ad3      	subcs	r3, r2, r3
 800903c:	6073      	str	r3, [r6, #4]
 800903e:	6981      	ldr	r1, [r0, #24]
 8009040:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8009044:	1b12      	subs	r2, r2, r4
 8009046:	4413      	add	r3, r2
 8009048:	608b      	str	r3, [r1, #8]
 800904a:	6983      	ldr	r3, [r0, #24]
 800904c:	6872      	ldr	r2, [r6, #4]
 800904e:	60da      	str	r2, [r3, #12]
 8009050:	883b      	ldrh	r3, [r7, #0]
 8009052:	f108 0801 	add.w	r8, r8, #1
 8009056:	4598      	cmp	r8, r3
 8009058:	d226      	bcs.n	80090a8 <ai_platform_network_process+0x490>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	b323      	cbz	r3, 80090a8 <ai_platform_network_process+0x490>
 800905e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009062:	b308      	cbz	r0, 80090a8 <ai_platform_network_process+0x490>
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	6981      	ldr	r1, [r0, #24]
 8009068:	f8d3 a000 	ldr.w	sl, [r3]
 800906c:	680c      	ldr	r4, [r1, #0]
 800906e:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8009072:	eb0a 0609 	add.w	r6, sl, r9
 8009076:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800907a:	00a4      	lsls	r4, r4, #2
 800907c:	eb0c 0302 	add.w	r3, ip, r2
 8009080:	d5d6      	bpl.n	8009030 <ai_platform_network_process+0x418>
 8009082:	6889      	ldr	r1, [r1, #8]
 8009084:	4660      	mov	r0, ip
 8009086:	f001 ffab 	bl	800afe0 <memcpy>
 800908a:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800908e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8009092:	440b      	add	r3, r1
 8009094:	4293      	cmp	r3, r2
 8009096:	bf24      	itt	cs
 8009098:	68f3      	ldrcs	r3, [r6, #12]
 800909a:	1ad3      	subcs	r3, r2, r3
 800909c:	6073      	str	r3, [r6, #4]
 800909e:	883b      	ldrh	r3, [r7, #0]
 80090a0:	f108 0801 	add.w	r8, r8, #1
 80090a4:	4598      	cmp	r8, r3
 80090a6:	d3d8      	bcc.n	800905a <ai_platform_network_process+0x442>
 80090a8:	f8bb 3016 	ldrh.w	r3, [fp, #22]
 80090ac:	f8bb 2014 	ldrh.w	r2, [fp, #20]
 80090b0:	3301      	adds	r3, #1
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	429a      	cmp	r2, r3
 80090b6:	f8ab 3016 	strh.w	r3, [fp, #22]
 80090ba:	f63f af6f 	bhi.w	8008f9c <ai_platform_network_process+0x384>
 80090be:	e670      	b.n	8008da2 <ai_platform_network_process+0x18a>
 80090c0:	2700      	movs	r7, #0
 80090c2:	e765      	b.n	8008f90 <ai_platform_network_process+0x378>
 80090c4:	461d      	mov	r5, r3
 80090c6:	461f      	mov	r7, r3
 80090c8:	e762      	b.n	8008f90 <ai_platform_network_process+0x378>
 80090ca:	9c01      	ldr	r4, [sp, #4]
 80090cc:	2217      	movs	r2, #23
 80090ce:	f104 0010 	add.w	r0, r4, #16
 80090d2:	2113      	movs	r1, #19
 80090d4:	f000 f814 	bl	8009100 <core_set_error>
 80090d8:	4653      	mov	r3, sl
 80090da:	e662      	b.n	8008da2 <ai_platform_network_process+0x18a>
 80090dc:	f104 0010 	add.w	r0, r4, #16
 80090e0:	2230      	movs	r2, #48	; 0x30
 80090e2:	2111      	movs	r1, #17
 80090e4:	f000 f80c 	bl	8009100 <core_set_error>
 80090e8:	4633      	mov	r3, r6
 80090ea:	e65a      	b.n	8008da2 <ai_platform_network_process+0x18a>
 80090ec:	6b27      	ldr	r7, [r4, #48]	; 0x30
 80090ee:	e5d2      	b.n	8008c96 <ai_platform_network_process+0x7e>

080090f0 <core_init>:
 80090f0:	2001      	movs	r0, #1
 80090f2:	4770      	bx	lr

080090f4 <core_get_error>:
 80090f4:	4603      	mov	r3, r0
 80090f6:	2200      	movs	r2, #0
 80090f8:	6800      	ldr	r0, [r0, #0]
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop

08009100 <core_set_error>:
 8009100:	7803      	ldrb	r3, [r0, #0]
 8009102:	b933      	cbnz	r3, 8009112 <core_set_error+0x12>
 8009104:	7001      	strb	r1, [r0, #0]
 8009106:	6803      	ldr	r3, [r0, #0]
 8009108:	f362 231f 	bfi	r3, r2, #8, #24
 800910c:	6003      	str	r3, [r0, #0]
 800910e:	2001      	movs	r0, #1
 8009110:	4770      	bx	lr
 8009112:	2000      	movs	r0, #0
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop

08009118 <func_dummy>:
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop

0800911c <ai_dict_decompress_f32>:
 800911c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009120:	9f08      	ldr	r7, [sp, #32]
 8009122:	2b04      	cmp	r3, #4
 8009124:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8009128:	d00e      	beq.n	8009148 <ai_dict_decompress_f32+0x2c>
 800912a:	2b08      	cmp	r3, #8
 800912c:	d10a      	bne.n	8009144 <ai_dict_decompress_f32+0x28>
 800912e:	42b8      	cmp	r0, r7
 8009130:	d208      	bcs.n	8009144 <ai_dict_decompress_f32+0x28>
 8009132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009136:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f840 3b04 	str.w	r3, [r0], #4
 8009140:	4287      	cmp	r7, r0
 8009142:	d8f6      	bhi.n	8009132 <ai_dict_decompress_f32+0x16>
 8009144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009148:	9b07      	ldr	r3, [sp, #28]
 800914a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800914e:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 8009152:	f10c 38ff 	add.w	r8, ip, #4294967295
 8009156:	f003 0e01 	and.w	lr, r3, #1
 800915a:	42b8      	cmp	r0, r7
 800915c:	d2f2      	bcs.n	8009144 <ai_dict_decompress_f32+0x28>
 800915e:	f1bc 0f00 	cmp.w	ip, #0
 8009162:	d01a      	beq.n	800919a <ai_dict_decompress_f32+0x7e>
 8009164:	f100 0508 	add.w	r5, r0, #8
 8009168:	1e4c      	subs	r4, r1, #1
 800916a:	eb01 0608 	add.w	r6, r1, r8
 800916e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009172:	091b      	lsrs	r3, r3, #4
 8009174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009178:	42a6      	cmp	r6, r4
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f845 3c08 	str.w	r3, [r5, #-8]
 8009180:	7823      	ldrb	r3, [r4, #0]
 8009182:	f003 030f 	and.w	r3, r3, #15
 8009186:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800918a:	f105 0508 	add.w	r5, r5, #8
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f845 3c0c 	str.w	r3, [r5, #-12]
 8009194:	d1eb      	bne.n	800916e <ai_dict_decompress_f32+0x52>
 8009196:	4461      	add	r1, ip
 8009198:	4448      	add	r0, r9
 800919a:	f1be 0f00 	cmp.w	lr, #0
 800919e:	d103      	bne.n	80091a8 <ai_dict_decompress_f32+0x8c>
 80091a0:	4287      	cmp	r7, r0
 80091a2:	d8dc      	bhi.n	800915e <ai_dict_decompress_f32+0x42>
 80091a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091a8:	780b      	ldrb	r3, [r1, #0]
 80091aa:	091b      	lsrs	r3, r3, #4
 80091ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80091b0:	3101      	adds	r1, #1
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6003      	str	r3, [r0, #0]
 80091b6:	3004      	adds	r0, #4
 80091b8:	e7cf      	b.n	800915a <ai_dict_decompress_f32+0x3e>
 80091ba:	bf00      	nop

080091bc <forward_conv2d>:
 80091bc:	6983      	ldr	r3, [r0, #24]
 80091be:	881a      	ldrh	r2, [r3, #0]
 80091c0:	2a00      	cmp	r2, #0
 80091c2:	f000 87c7 	beq.w	800a154 <forward_conv2d+0xf98>
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	6859      	ldr	r1, [r3, #4]
 80091ca:	b101      	cbz	r1, 80091ce <forward_conv2d+0x12>
 80091cc:	6809      	ldr	r1, [r1, #0]
 80091ce:	2a01      	cmp	r2, #1
 80091d0:	f240 87bd 	bls.w	800a14e <forward_conv2d+0xf92>
 80091d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d8:	ed2d 8b10 	vpush	{d8-d15}
 80091dc:	b0cb      	sub	sp, #300	; 0x12c
 80091de:	691c      	ldr	r4, [r3, #16]
 80091e0:	af02      	add	r7, sp, #8
 80091e2:	2c00      	cmp	r4, #0
 80091e4:	f000 87af 	beq.w	800a146 <forward_conv2d+0xf8a>
 80091e8:	6824      	ldr	r4, [r4, #0]
 80091ea:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 80091ee:	2a02      	cmp	r2, #2
 80091f0:	f000 87a4 	beq.w	800a13c <forward_conv2d+0xf80>
 80091f4:	69dd      	ldr	r5, [r3, #28]
 80091f6:	2d00      	cmp	r5, #0
 80091f8:	f000 8799 	beq.w	800a12e <forward_conv2d+0xf72>
 80091fc:	f113 0218 	adds.w	r2, r3, #24
 8009200:	682c      	ldr	r4, [r5, #0]
 8009202:	d004      	beq.n	800920e <forward_conv2d+0x52>
 8009204:	8b1b      	ldrh	r3, [r3, #24]
 8009206:	2b01      	cmp	r3, #1
 8009208:	f240 87a6 	bls.w	800a158 <forward_conv2d+0xf9c>
 800920c:	686a      	ldr	r2, [r5, #4]
 800920e:	68ab      	ldr	r3, [r5, #8]
 8009210:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8009214:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8009218:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800921c:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009220:	68ce      	ldr	r6, [r1, #12]
 8009222:	69a1      	ldr	r1, [r4, #24]
 8009224:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8009228:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800922c:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8009230:	f8de 1004 	ldr.w	r1, [lr, #4]
 8009234:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8009238:	f8de 100c 	ldr.w	r1, [lr, #12]
 800923c:	6479      	str	r1, [r7, #68]	; 0x44
 800923e:	f8de 1008 	ldr.w	r1, [lr, #8]
 8009242:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 8009246:	6871      	ldr	r1, [r6, #4]
 8009248:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800924c:	68f1      	ldr	r1, [r6, #12]
 800924e:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8009252:	68b1      	ldr	r1, [r6, #8]
 8009254:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8009258:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800925c:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8009260:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8009264:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8009268:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800926c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800926e:	6889      	ldr	r1, [r1, #8]
 8009270:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8009274:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8009276:	e9d5 ba00 	ldrd	fp, sl, [r5]
 800927a:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800927e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8009280:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8009284:	69c1      	ldr	r1, [r0, #28]
 8009286:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800928a:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 800928e:	2a00      	cmp	r2, #0
 8009290:	f000 8749 	beq.w	800a126 <forward_conv2d+0xf6a>
 8009294:	6992      	ldr	r2, [r2, #24]
 8009296:	6892      	ldr	r2, [r2, #8]
 8009298:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800929c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80092a0:	6992      	ldr	r2, [r2, #24]
 80092a2:	6892      	ldr	r2, [r2, #8]
 80092a4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80092a8:	4606      	mov	r6, r0
 80092aa:	6a00      	ldr	r0, [r0, #32]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 872c 	beq.w	800a10a <forward_conv2d+0xf4e>
 80092b2:	699a      	ldr	r2, [r3, #24]
 80092b4:	2a00      	cmp	r2, #0
 80092b6:	f000 8594 	beq.w	8009de2 <forward_conv2d+0xc26>
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80092c2:	e9d2 0100 	ldrd	r0, r1, [r2]
 80092c6:	6893      	ldr	r3, [r2, #8]
 80092c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092cc:	f001 fe22 	bl	800af14 <ai_array_get_byte_size>
 80092d0:	69a3      	ldr	r3, [r4, #24]
 80092d2:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 80092d6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80092e0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80092e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092e6:	f3c3 5441 	ubfx	r4, r3, #21, #2
 80092ea:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 80092ee:	fa1f f088 	uxth.w	r0, r8
 80092f2:	4125      	asrs	r5, r4
 80092f4:	3801      	subs	r0, #1
 80092f6:	1e4c      	subs	r4, r1, #1
 80092f8:	fb04 1100 	mla	r1, r4, r0, r1
 80092fc:	6439      	str	r1, [r7, #64]	; 0x40
 80092fe:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8009302:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 80096a4 <forward_conv2d+0x4e8>
 8009306:	fa1f f289 	uxth.w	r2, r9
 800930a:	3a01      	subs	r2, #1
 800930c:	1e48      	subs	r0, r1, #1
 800930e:	fb00 1102 	mla	r1, r0, r2, r1
 8009312:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009316:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800931a:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800931e:	4610      	mov	r0, r2
 8009320:	2a00      	cmp	r2, #0
 8009322:	bf08      	it	eq
 8009324:	4660      	moveq	r0, ip
 8009326:	2b04      	cmp	r3, #4
 8009328:	b2ad      	uxth	r5, r5
 800932a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800932e:	f000 8533 	beq.w	8009d98 <forward_conv2d+0xbdc>
 8009332:	2b08      	cmp	r3, #8
 8009334:	f000 8530 	beq.w	8009d98 <forward_conv2d+0xbdc>
 8009338:	fa1f f38b 	uxth.w	r3, fp
 800933c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8009340:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009344:	425b      	negs	r3, r3
 8009346:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800934a:	2900      	cmp	r1, #0
 800934c:	f000 8242 	beq.w	80097d4 <forward_conv2d+0x618>
 8009350:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009354:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 8009358:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 80096a0 <forward_conv2d+0x4e4>
 800935c:	fb00 f305 	mul.w	r3, r0, r5
 8009360:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 8009364:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8009368:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800936c:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 8009370:	663d      	str	r5, [r7, #96]	; 0x60
 8009372:	fa0f f288 	sxth.w	r2, r8
 8009376:	fb03 f400 	mul.w	r4, r3, r0
 800937a:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800937e:	fa1f f18a 	uxth.w	r1, sl
 8009382:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009386:	67bc      	str	r4, [r7, #120]	; 0x78
 8009388:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800938c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8009390:	4249      	negs	r1, r1
 8009392:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8009396:	0092      	lsls	r2, r2, #2
 8009398:	0081      	lsls	r1, r0, #2
 800939a:	4605      	mov	r5, r0
 800939c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80093a0:	fb04 f200 	mul.w	r2, r4, r0
 80093a4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80093a8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80093ac:	fb01 fc00 	mul.w	ip, r1, r0
 80093b0:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 80093b4:	fb01 fc03 	mul.w	ip, r1, r3
 80093b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093ba:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80093c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093c8:	fa0f f689 	sxth.w	r6, r9
 80093cc:	469c      	mov	ip, r3
 80093ce:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 80093d2:	4633      	mov	r3, r6
 80093d4:	fb0c f606 	mul.w	r6, ip, r6
 80093d8:	677e      	str	r6, [r7, #116]	; 0x74
 80093da:	4666      	mov	r6, ip
 80093dc:	fb04 f606 	mul.w	r6, r4, r6
 80093e0:	4686      	mov	lr, r0
 80093e2:	4620      	mov	r0, r4
 80093e4:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80093e8:	62be      	str	r6, [r7, #40]	; 0x28
 80093ea:	fb01 f404 	mul.w	r4, r1, r4
 80093ee:	fb03 f605 	mul.w	r6, r3, r5
 80093f2:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 80093f4:	66bc      	str	r4, [r7, #104]	; 0x68
 80093f6:	460b      	mov	r3, r1
 80093f8:	4604      	mov	r4, r0
 80093fa:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80093fe:	627e      	str	r6, [r7, #36]	; 0x24
 8009400:	fb05 f404 	mul.w	r4, r5, r4
 8009404:	617c      	str	r4, [r7, #20]
 8009406:	460c      	mov	r4, r1
 8009408:	fb04 f403 	mul.w	r4, r4, r3
 800940c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009410:	65bc      	str	r4, [r7, #88]	; 0x58
 8009412:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8009416:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800941a:	fb01 f104 	mul.w	r1, r1, r4
 800941e:	61b9      	str	r1, [r7, #24]
 8009420:	0091      	lsls	r1, r2, #2
 8009422:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009426:	64b9      	str	r1, [r7, #72]	; 0x48
 8009428:	fb00 f202 	mul.w	r2, r0, r2
 800942c:	0081      	lsls	r1, r0, #2
 800942e:	61f9      	str	r1, [r7, #28]
 8009430:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8009434:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8009438:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800943c:	011a      	lsls	r2, r3, #4
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009444:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800944c:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8009450:	2300      	movs	r3, #0
 8009452:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009454:	607a      	str	r2, [r7, #4]
 8009456:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009458:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800945c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009462:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009464:	2900      	cmp	r1, #0
 8009466:	441a      	add	r2, r3
 8009468:	bfb4      	ite	lt
 800946a:	2100      	movlt	r1, #0
 800946c:	2300      	movge	r3, #0
 800946e:	4282      	cmp	r2, r0
 8009470:	bf28      	it	cs
 8009472:	4602      	movcs	r2, r0
 8009474:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8009478:	2801      	cmp	r0, #1
 800947a:	f000 8320 	beq.w	8009abe <forward_conv2d+0x902>
 800947e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8009482:	4281      	cmp	r1, r0
 8009484:	f000 81c3 	beq.w	800980e <forward_conv2d+0x652>
 8009488:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800948c:	2900      	cmp	r1, #0
 800948e:	f000 8182 	beq.w	8009796 <forward_conv2d+0x5da>
 8009492:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8009496:	fb93 f1f0 	sdiv	r1, r3, r0
 800949a:	fb00 3111 	mls	r1, r0, r1, r3
 800949e:	1a41      	subs	r1, r0, r1
 80094a0:	1ad2      	subs	r2, r2, r3
 80094a2:	fb91 f5f0 	sdiv	r5, r1, r0
 80094a6:	fb00 1515 	mls	r5, r0, r5, r1
 80094aa:	1b52      	subs	r2, r2, r5
 80094ac:	4601      	mov	r1, r0
 80094ae:	4402      	add	r2, r0
 80094b0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80094b4:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 80094b8:	f8c7 b020 	str.w	fp, [r7, #32]
 80094bc:	4604      	mov	r4, r0
 80094be:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80094c2:	fbb4 f4f0 	udiv	r4, r4, r0
 80094c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094c8:	3a01      	subs	r2, #1
 80094ca:	fb92 f8f1 	sdiv	r8, r2, r1
 80094ce:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80094d2:	eba0 0c04 	sub.w	ip, r0, r4
 80094d6:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80094da:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80094de:	4614      	mov	r4, r2
 80094e0:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80094e4:	fbb4 f2f2 	udiv	r2, r4, r2
 80094e8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80094ec:	657a      	str	r2, [r7, #84]	; 0x54
 80094ee:	441d      	add	r5, r3
 80094f0:	fb0e f000 	mul.w	r0, lr, r0
 80094f4:	440b      	add	r3, r1
 80094f6:	eba6 0608 	sub.w	r6, r6, r8
 80094fa:	fb04 f505 	mul.w	r5, r4, r5
 80094fe:	3b01      	subs	r3, #1
 8009500:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8009504:	fb93 f3f4 	sdiv	r3, r3, r4
 8009508:	fb00 f406 	mul.w	r4, r0, r6
 800950c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009510:	66fd      	str	r5, [r7, #108]	; 0x6c
 8009512:	0091      	lsls	r1, r2, #2
 8009514:	fb00 f003 	mul.w	r0, r0, r3
 8009518:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800951c:	6538      	str	r0, [r7, #80]	; 0x50
 800951e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009522:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8009526:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800952a:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800952e:	1ac3      	subs	r3, r0, r3
 8009530:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8009534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009538:	008b      	lsls	r3, r1, #2
 800953a:	637b      	str	r3, [r7, #52]	; 0x34
 800953c:	00d3      	lsls	r3, r2, #3
 800953e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009544:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009548:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800954c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009550:	2300      	movs	r3, #0
 8009552:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8009556:	673b      	str	r3, [r7, #112]	; 0x70
 8009558:	46c2      	mov	sl, r8
 800955a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800955e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009562:	eb03 0c02 	add.w	ip, r3, r2
 8009566:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800956a:	2b00      	cmp	r3, #0
 800956c:	f2c0 813b 	blt.w	80097e6 <forward_conv2d+0x62a>
 8009570:	2000      	movs	r0, #0
 8009572:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 8009574:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 8009578:	4605      	mov	r5, r0
 800957a:	4606      	mov	r6, r0
 800957c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009584:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8009588:	4413      	add	r3, r2
 800958a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800958e:	440a      	add	r2, r1
 8009590:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8009594:	428b      	cmp	r3, r1
 8009596:	bf94      	ite	ls
 8009598:	ebc6 0303 	rsbls	r3, r6, r3
 800959c:	ebc6 0301 	rsbhi	r3, r6, r1
 80095a0:	4415      	add	r5, r2
 80095a2:	1a1b      	subs	r3, r3, r0
 80095a4:	00a4      	lsls	r4, r4, #2
 80095a6:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 80095aa:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 80095ae:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80095b2:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80095b4:	4602      	mov	r2, r0
 80095b6:	2800      	cmp	r0, #0
 80095b8:	bf08      	it	eq
 80095ba:	4662      	moveq	r2, ip
 80095bc:	f108 31ff 	add.w	r1, r8, #4294967295
 80095c0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 80095c4:	fb91 f1f0 	sdiv	r1, r1, r0
 80095c8:	4429      	add	r1, r5
 80095ca:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 80095ce:	fb0e 5501 	mla	r5, lr, r1, r5
 80095d2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80095d6:	4403      	add	r3, r0
 80095d8:	fb01 6104 	mla	r1, r1, r4, r6
 80095dc:	3b01      	subs	r3, #1
 80095de:	fb93 f6f0 	sdiv	r6, r3, r0
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80095e8:	fb06 3110 	mls	r1, r6, r0, r3
 80095ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80095f0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 80095f4:	4562      	cmp	r2, ip
 80095f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80095fa:	bf08      	it	eq
 80095fc:	eeb0 6a48 	vmoveq.f32	s12, s16
 8009600:	1b9b      	subs	r3, r3, r6
 8009602:	2800      	cmp	r0, #0
 8009604:	d076      	beq.n	80096f4 <forward_conv2d+0x538>
 8009606:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800960a:	fb0e f803 	mul.w	r8, lr, r3
 800960e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009610:	fb00 fb01 	mul.w	fp, r0, r1
 8009614:	2b00      	cmp	r3, #0
 8009616:	d06d      	beq.n	80096f4 <forward_conv2d+0x538>
 8009618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800961c:	18d3      	adds	r3, r2, r3
 800961e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009622:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009626:	1a9b      	subs	r3, r3, r2
 8009628:	633b      	str	r3, [r7, #48]	; 0x30
 800962a:	2300      	movs	r3, #0
 800962c:	667b      	str	r3, [r7, #100]	; 0x64
 800962e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009634:	4413      	add	r3, r2
 8009636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009638:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800963c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963e:	4413      	add	r3, r2
 8009640:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009644:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009648:	ecf3 7a01 	vldmia	r3!, {s15}
 800964c:	f1ba 0f00 	cmp.w	sl, #0
 8009650:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8009654:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009658:	f340 80c3 	ble.w	80097e2 <forward_conv2d+0x626>
 800965c:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8009660:	f04f 0c00 	mov.w	ip, #0
 8009664:	2e00      	cmp	r6, #0
 8009666:	dd1f      	ble.n	80096a8 <forward_conv2d+0x4ec>
 8009668:	2100      	movs	r1, #0
 800966a:	eb00 040e 	add.w	r4, r0, lr
 800966e:	4284      	cmp	r4, r0
 8009670:	d910      	bls.n	8009694 <forward_conv2d+0x4d8>
 8009672:	4603      	mov	r3, r0
 8009674:	462a      	mov	r2, r5
 8009676:	ecb3 7a01 	vldmia	r3!, {s14}
 800967a:	ecf2 6a01 	vldmia	r2!, {s13}
 800967e:	429c      	cmp	r4, r3
 8009680:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009684:	d8f7      	bhi.n	8009676 <forward_conv2d+0x4ba>
 8009686:	43c3      	mvns	r3, r0
 8009688:	441c      	add	r4, r3
 800968a:	f024 0403 	bic.w	r4, r4, #3
 800968e:	3404      	adds	r4, #4
 8009690:	4425      	add	r5, r4
 8009692:	4420      	add	r0, r4
 8009694:	3101      	adds	r1, #1
 8009696:	428e      	cmp	r6, r1
 8009698:	4448      	add	r0, r9
 800969a:	d1e6      	bne.n	800966a <forward_conv2d+0x4ae>
 800969c:	e004      	b.n	80096a8 <forward_conv2d+0x4ec>
 800969e:	bf00      	nop
 80096a0:	00000000 	.word	0x00000000
 80096a4:	08009119 	.word	0x08009119
 80096a8:	f10c 0c01 	add.w	ip, ip, #1
 80096ac:	45e2      	cmp	sl, ip
 80096ae:	4458      	add	r0, fp
 80096b0:	4445      	add	r5, r8
 80096b2:	d1d7      	bne.n	8009664 <forward_conv2d+0x4a8>
 80096b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80096b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80096bc:	441d      	add	r5, r3
 80096be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80096c2:	ece3 7a01 	vstmia	r3!, {s15}
 80096c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80096ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d1b8      	bne.n	8009644 <forward_conv2d+0x488>
 80096d2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80096d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096da:	4472      	add	r2, lr
 80096dc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80096e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096e2:	1a52      	subs	r2, r2, r1
 80096e4:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80096e8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80096ec:	3301      	adds	r3, #1
 80096ee:	429a      	cmp	r2, r3
 80096f0:	667b      	str	r3, [r7, #100]	; 0x64
 80096f2:	d19c      	bne.n	800962e <forward_conv2d+0x472>
 80096f4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80096f8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80096fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096fe:	4608      	mov	r0, r1
 8009700:	4410      	add	r0, r2
 8009702:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8009706:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800970a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800970e:	4401      	add	r1, r0
 8009710:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 8009714:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009718:	1a8a      	subs	r2, r1, r2
 800971a:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800971e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009722:	3301      	adds	r3, #1
 8009724:	429a      	cmp	r2, r3
 8009726:	673b      	str	r3, [r7, #112]	; 0x70
 8009728:	f47f af17 	bne.w	800955a <forward_conv2d+0x39e>
 800972c:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8009730:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009734:	b37b      	cbz	r3, 8009796 <forward_conv2d+0x5da>
 8009736:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800973a:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 800973e:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 8009742:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 8009746:	2500      	movs	r5, #0
 8009748:	46a2      	mov	sl, r4
 800974a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800974e:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8009752:	f8c2 a008 	str.w	sl, [r2, #8]
 8009756:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800975a:	4633      	mov	r3, r6
 800975c:	4641      	mov	r1, r8
 800975e:	4416      	add	r6, r2
 8009760:	4640      	mov	r0, r8
 8009762:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009766:	47a0      	blx	r4
 8009768:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800976c:	4492      	add	sl, r2
 800976e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8009772:	eba6 0309 	sub.w	r3, r6, r9
 8009776:	4293      	cmp	r3, r2
 8009778:	bfa8      	it	ge
 800977a:	464e      	movge	r6, r9
 800977c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009780:	3501      	adds	r5, #1
 8009782:	42ab      	cmp	r3, r5
 8009784:	d1e1      	bne.n	800974a <forward_conv2d+0x58e>
 8009786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 8009790:	4413      	add	r3, r2
 8009792:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800979a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800979c:	699b      	ldr	r3, [r3, #24]
 800979e:	68da      	ldr	r2, [r3, #12]
 80097a0:	609a      	str	r2, [r3, #8]
 80097a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80097a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097a8:	4610      	mov	r0, r2
 80097aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097ae:	4418      	add	r0, r3
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80097b6:	697a      	ldr	r2, [r7, #20]
 80097b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097bc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80097c0:	4413      	add	r3, r2
 80097c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097ca:	3101      	adds	r1, #1
 80097cc:	428b      	cmp	r3, r1
 80097ce:	67f9      	str	r1, [r7, #124]	; 0x7c
 80097d0:	f47f ae42 	bne.w	8009458 <forward_conv2d+0x29c>
 80097d4:	f507 7792 	add.w	r7, r7, #292	; 0x124
 80097d8:	46bd      	mov	sp, r7
 80097da:	ecbd 8b10 	vpop	{d8-d15}
 80097de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e2:	461a      	mov	r2, r3
 80097e4:	e768      	b.n	80096b8 <forward_conv2d+0x4fc>
 80097e6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80097ea:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80097ee:	fb90 f3f2 	sdiv	r3, r0, r2
 80097f2:	fb02 0313 	mls	r3, r2, r3, r0
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	4605      	mov	r5, r0
 80097fa:	fb93 f0f2 	sdiv	r0, r3, r2
 80097fe:	fb02 3010 	mls	r0, r2, r0, r3
 8009802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009804:	462e      	mov	r6, r5
 8009806:	18c4      	adds	r4, r0, r3
 8009808:	eb02 0805 	add.w	r8, r2, r5
 800980c:	e6b6      	b.n	800957c <forward_conv2d+0x3c0>
 800980e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8009810:	2901      	cmp	r1, #1
 8009812:	f47f ae39 	bne.w	8009488 <forward_conv2d+0x2cc>
 8009816:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800981a:	2900      	cmp	r1, #0
 800981c:	d0bb      	beq.n	8009796 <forward_conv2d+0x5da>
 800981e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8009822:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009826:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 800982a:	fbb1 f5f0 	udiv	r5, r1, r0
 800982e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8009832:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8009836:	633d      	str	r5, [r7, #48]	; 0x30
 8009838:	1ad2      	subs	r2, r2, r3
 800983a:	1a8c      	subs	r4, r1, r2
 800983c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009840:	00b2      	lsls	r2, r6, #2
 8009842:	fb02 f204 	mul.w	r2, r2, r4
 8009846:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 800984a:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 800984e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009850:	0082      	lsls	r2, r0, #2
 8009852:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009854:	00ca      	lsls	r2, r1, #3
 8009856:	603a      	str	r2, [r7, #0]
 8009858:	00aa      	lsls	r2, r5, #2
 800985a:	60ba      	str	r2, [r7, #8]
 800985c:	fb03 f206 	mul.w	r2, r3, r6
 8009860:	673a      	str	r2, [r7, #112]	; 0x70
 8009862:	69fa      	ldr	r2, [r7, #28]
 8009864:	fb02 f303 	mul.w	r3, r2, r3
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
 800986a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800986e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009876:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800987a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800987e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009882:	2300      	movs	r3, #0
 8009884:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009888:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800988c:	2b00      	cmp	r3, #0
 800988e:	f2c0 8110 	blt.w	8009ab2 <forward_conv2d+0x8f6>
 8009892:	2100      	movs	r1, #0
 8009894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009896:	460a      	mov	r2, r1
 8009898:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800989c:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80098a0:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 80098a4:	4420      	add	r0, r4
 80098a6:	4408      	add	r0, r1
 80098a8:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 80098ac:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80098b0:	190c      	adds	r4, r1, r4
 80098b2:	42ac      	cmp	r4, r5
 80098b4:	bf28      	it	cs
 80098b6:	462c      	movcs	r4, r5
 80098b8:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 80098bc:	0080      	lsls	r0, r0, #2
 80098be:	1aa4      	subs	r4, r4, r2
 80098c0:	2d00      	cmp	r5, #0
 80098c2:	f000 80e7 	beq.w	8009a94 <forward_conv2d+0x8d8>
 80098c6:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80098ca:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 80098ce:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80098d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80098d6:	42b5      	cmp	r5, r6
 80098d8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80098dc:	eba3 0204 	sub.w	r2, r3, r4
 80098e0:	eba1 0104 	sub.w	r1, r1, r4
 80098e4:	bf08      	it	eq
 80098e6:	eef0 3a48 	vmoveq.f32	s7, s16
 80098ea:	462b      	mov	r3, r5
 80098ec:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 80098ee:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 80098f2:	4428      	add	r0, r5
 80098f4:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 80098f8:	fb05 6e00 	mla	lr, r5, r0, r6
 80098fc:	eb0e 000b 	add.w	r0, lr, fp
 8009900:	4586      	cmp	lr, r0
 8009902:	6238      	str	r0, [r7, #32]
 8009904:	f080 80a5 	bcs.w	8009a52 <forward_conv2d+0x896>
 8009908:	0092      	lsls	r2, r2, #2
 800990a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800990e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009910:	fb0b f101 	mul.w	r1, fp, r1
 8009914:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8009918:	f024 0803 	bic.w	r8, r4, #3
 800991c:	2a00      	cmp	r2, #0
 800991e:	f000 8098 	beq.w	8009a52 <forward_conv2d+0x896>
 8009922:	f108 32ff 	add.w	r2, r8, #4294967295
 8009926:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009928:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800992c:	0892      	lsrs	r2, r2, #2
 800992e:	3201      	adds	r2, #1
 8009930:	4401      	add	r1, r0
 8009932:	fb02 f00a 	mul.w	r0, r2, sl
 8009936:	6578      	str	r0, [r7, #84]	; 0x54
 8009938:	0110      	lsls	r0, r2, #4
 800993a:	0092      	lsls	r2, r2, #2
 800993c:	653a      	str	r2, [r7, #80]	; 0x50
 800993e:	1aca      	subs	r2, r1, r3
 8009940:	613a      	str	r2, [r7, #16]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	6678      	str	r0, [r7, #100]	; 0x64
 8009946:	4413      	add	r3, r2
 8009948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800994c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009952:	4413      	add	r3, r2
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	4413      	add	r3, r2
 800995e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009964:	ecf3 6a01 	vldmia	r3!, {s13}
 8009968:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800996c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009970:	2b00      	cmp	r3, #0
 8009972:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8009976:	dd57      	ble.n	8009a28 <forward_conv2d+0x86c>
 8009978:	4676      	mov	r6, lr
 800997a:	f04f 0c00 	mov.w	ip, #0
 800997e:	f1b8 0f00 	cmp.w	r8, #0
 8009982:	f340 8085 	ble.w	8009a90 <forward_conv2d+0x8d4>
 8009986:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800998a:	f109 0310 	add.w	r3, r9, #16
 800998e:	18b1      	adds	r1, r6, r2
 8009990:	2000      	movs	r0, #0
 8009992:	4632      	mov	r2, r6
 8009994:	eb02 050b 	add.w	r5, r2, fp
 8009998:	ed95 7a00 	vldr	s14, [r5]
 800999c:	ed53 7a03 	vldr	s15, [r3, #-12]
 80099a0:	ed92 4a00 	vldr	s8, [r2]
 80099a4:	ed53 4a04 	vldr	s9, [r3, #-16]
 80099a8:	ed91 5a00 	vldr	s10, [r1]
 80099ac:	ed53 5a02 	vldr	s11, [r3, #-8]
 80099b0:	ed13 6a01 	vldr	s12, [r3, #-4]
 80099b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b8:	eb01 050b 	add.w	r5, r1, fp
 80099bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80099c0:	3004      	adds	r0, #4
 80099c2:	4540      	cmp	r0, r8
 80099c4:	ed95 7a00 	vldr	s14, [r5]
 80099c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80099cc:	4452      	add	r2, sl
 80099ce:	4451      	add	r1, sl
 80099d0:	f103 0310 	add.w	r3, r3, #16
 80099d4:	eee7 7a06 	vfma.f32	s15, s14, s12
 80099d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80099dc:	dbda      	blt.n	8009994 <forward_conv2d+0x7d8>
 80099de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099e0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80099e2:	441e      	add	r6, r3
 80099e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099e6:	4499      	add	r9, r3
 80099e8:	42a0      	cmp	r0, r4
 80099ea:	da11      	bge.n	8009a10 <forward_conv2d+0x854>
 80099ec:	4602      	mov	r2, r0
 80099ee:	4633      	mov	r3, r6
 80099f0:	4649      	mov	r1, r9
 80099f2:	edd3 7a00 	vldr	s15, [r3]
 80099f6:	ecb1 7a01 	vldmia	r1!, {s14}
 80099fa:	3201      	adds	r2, #1
 80099fc:	42a2      	cmp	r2, r4
 80099fe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009a02:	445b      	add	r3, fp
 8009a04:	d1f5      	bne.n	80099f2 <forward_conv2d+0x836>
 8009a06:	1a20      	subs	r0, r4, r0
 8009a08:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8009a0c:	fb00 660b 	mla	r6, r0, fp, r6
 8009a10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a14:	441e      	add	r6, r3
 8009a16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009a1a:	4499      	add	r9, r3
 8009a1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009a20:	f10c 0c01 	add.w	ip, ip, #1
 8009a24:	4563      	cmp	r3, ip
 8009a26:	d1aa      	bne.n	800997e <forward_conv2d+0x7c2>
 8009a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2a:	4499      	add	r9, r3
 8009a2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a2e:	ece3 6a01 	vstmia	r3!, {s13}
 8009a32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a34:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d191      	bne.n	8009960 <forward_conv2d+0x7a4>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	683a      	ldr	r2, [r7, #0]
 8009a40:	1a9b      	subs	r3, r3, r2
 8009a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a46:	6a3b      	ldr	r3, [r7, #32]
 8009a48:	f10e 0e04 	add.w	lr, lr, #4
 8009a4c:	459e      	cmp	lr, r3
 8009a4e:	f4ff af7d 	bcc.w	800994c <forward_conv2d+0x790>
 8009a52:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009a56:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009a5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a5e:	440a      	add	r2, r1
 8009a60:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8009a64:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009a68:	4608      	mov	r0, r1
 8009a6a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009a6e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8009a72:	4410      	add	r0, r2
 8009a74:	1a8a      	subs	r2, r1, r2
 8009a76:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009a7a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009a7e:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8009a82:	3301      	adds	r3, #1
 8009a84:	429a      	cmp	r2, r3
 8009a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009a8a:	f47f aefd 	bne.w	8009888 <forward_conv2d+0x6cc>
 8009a8e:	e64f      	b.n	8009730 <forward_conv2d+0x574>
 8009a90:	2000      	movs	r0, #0
 8009a92:	e7a9      	b.n	80099e8 <forward_conv2d+0x82c>
 8009a94:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8009a98:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8009a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa0:	1b19      	subs	r1, r3, r4
 8009aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009aa6:	eef0 3a48 	vmov.f32	s7, s16
 8009aaa:	1b1a      	subs	r2, r3, r4
 8009aac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009ab0:	e71c      	b.n	80098ec <forward_conv2d+0x730>
 8009ab2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8009ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ab8:	460a      	mov	r2, r1
 8009aba:	440b      	add	r3, r1
 8009abc:	e6ec      	b.n	8009898 <forward_conv2d+0x6dc>
 8009abe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8009ac0:	2801      	cmp	r0, #1
 8009ac2:	f47f ace1 	bne.w	8009488 <forward_conv2d+0x2cc>
 8009ac6:	1ad2      	subs	r2, r2, r3
 8009ac8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8009aca:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8009ace:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009ad2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ad4:	fb00 4101 	mla	r1, r0, r1, r4
 8009ad8:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8009adc:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8009ae0:	f080 8191 	bcs.w	8009e06 <forward_conv2d+0xc4a>
 8009ae4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009ae8:	2a00      	cmp	r2, #0
 8009aea:	f43f ae21 	beq.w	8009730 <forward_conv2d+0x574>
 8009aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009af0:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 8009af4:	fb02 f303 	mul.w	r3, r2, r3
 8009af8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009afa:	667b      	str	r3, [r7, #100]	; 0x64
 8009afc:	1a9b      	subs	r3, r3, r2
 8009afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b00:	188b      	adds	r3, r1, r2
 8009b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b04:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009b08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 8133 	beq.w	8009d92 <forward_conv2d+0xbd6>
 8009b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b30:	ed93 6a00 	vldr	s12, [r3]
 8009b34:	3304      	adds	r3, #4
 8009b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009b3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 8101 	beq.w	8009d46 <forward_conv2d+0xb8a>
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b4c:	eb03 0802 	add.w	r8, r3, r2
 8009b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b60:	673b      	str	r3, [r7, #112]	; 0x70
 8009b62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009b66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b6a:	f04f 0b00 	mov.w	fp, #0
 8009b6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f2c0 8104 	blt.w	8009d80 <forward_conv2d+0xbc4>
 8009b78:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009b7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009b7e:	2300      	movs	r3, #0
 8009b80:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 8009b84:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009b88:	eb02 0c04 	add.w	ip, r2, r4
 8009b8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009b90:	4540      	cmp	r0, r8
 8009b92:	bf94      	ite	ls
 8009b94:	ebc3 0300 	rsbls	r3, r3, r0
 8009b98:	ebc3 0308 	rsbhi	r3, r3, r8
 8009b9c:	eba2 0903 	sub.w	r9, r2, r3
 8009ba0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009ba4:	1ac4      	subs	r4, r0, r3
 8009ba6:	fb03 f302 	mul.w	r3, r3, r2
 8009baa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009bae:	2a00      	cmp	r2, #0
 8009bb0:	f340 80e3 	ble.w	8009d7a <forward_conv2d+0xbbe>
 8009bb4:	f023 050f 	bic.w	r5, r3, #15
 8009bb8:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8009bbc:	1e68      	subs	r0, r5, #1
 8009bbe:	0900      	lsrs	r0, r0, #4
 8009bc0:	3001      	adds	r0, #1
 8009bc2:	fb06 f204 	mul.w	r2, r6, r4
 8009bc6:	657a      	str	r2, [r7, #84]	; 0x54
 8009bc8:	0102      	lsls	r2, r0, #4
 8009bca:	653a      	str	r2, [r7, #80]	; 0x50
 8009bcc:	fb06 f909 	mul.w	r9, r6, r9
 8009bd0:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8009bd4:	eef0 6a46 	vmov.f32	s13, s12
 8009bd8:	f04f 0e00 	mov.w	lr, #0
 8009bdc:	4662      	mov	r2, ip
 8009bde:	2d00      	cmp	r5, #0
 8009be0:	f340 80c9 	ble.w	8009d76 <forward_conv2d+0xbba>
 8009be4:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8009be8:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009bec:	2600      	movs	r6, #0
 8009bee:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8009bf2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8009bf6:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8009bfa:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8009bfe:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 8009c02:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8009c06:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8009c0a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8009c0e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8009c12:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8009c16:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8009c1a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8009c1e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8009c22:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8009c26:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8009c2a:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8009c2e:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8009c32:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8009c36:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8009c3a:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8009c3e:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 8009c42:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8009c46:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8009c4a:	ed50 3a04 	vldr	s7, [r0, #-16]
 8009c4e:	ed14 4a04 	vldr	s8, [r4, #-16]
 8009c52:	ed50 4a03 	vldr	s9, [r0, #-12]
 8009c56:	ed14 5a03 	vldr	s10, [r4, #-12]
 8009c5a:	ed50 5a02 	vldr	s11, [r0, #-8]
 8009c5e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8009c62:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8009c66:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 8009c6a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009c6e:	3610      	adds	r6, #16
 8009c70:	42ae      	cmp	r6, r5
 8009c72:	ed14 fa01 	vldr	s30, [r4, #-4]
 8009c76:	ed50 ea01 	vldr	s29, [r0, #-4]
 8009c7a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8009c7e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009c82:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8009c86:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8009c8a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009c8e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009c92:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009c96:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009c9a:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009c9e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009ca2:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009ca6:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009caa:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009cae:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009cb2:	eee5 7a87 	vfma.f32	s15, s11, s14
 8009cb6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009cba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009cbe:	db96      	blt.n	8009bee <forward_conv2d+0xa32>
 8009cc0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009cc2:	4451      	add	r1, sl
 8009cc4:	4452      	add	r2, sl
 8009cc6:	4283      	cmp	r3, r0
 8009cc8:	dd0f      	ble.n	8009cea <forward_conv2d+0xb2e>
 8009cca:	4604      	mov	r4, r0
 8009ccc:	468c      	mov	ip, r1
 8009cce:	4616      	mov	r6, r2
 8009cd0:	ecb6 7a01 	vldmia	r6!, {s14}
 8009cd4:	ecfc 7a01 	vldmia	ip!, {s15}
 8009cd8:	3401      	adds	r4, #1
 8009cda:	42a3      	cmp	r3, r4
 8009cdc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8009ce0:	d1f6      	bne.n	8009cd0 <forward_conv2d+0xb14>
 8009ce2:	1a18      	subs	r0, r3, r0
 8009ce4:	0080      	lsls	r0, r0, #2
 8009ce6:	4402      	add	r2, r0
 8009ce8:	4401      	add	r1, r0
 8009cea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009cec:	4402      	add	r2, r0
 8009cee:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8009cf2:	f10e 0e01 	add.w	lr, lr, #1
 8009cf6:	4570      	cmp	r0, lr
 8009cf8:	4449      	add	r1, r9
 8009cfa:	f47f af70 	bne.w	8009bde <forward_conv2d+0xa22>
 8009cfe:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8009d02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d04:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009d08:	edc3 6a00 	vstr	s13, [r3]
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8009d12:	440b      	add	r3, r1
 8009d14:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009d18:	673b      	str	r3, [r7, #112]	; 0x70
 8009d1a:	4410      	add	r0, r2
 8009d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d1e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8009d22:	4608      	mov	r0, r1
 8009d24:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8009d28:	4418      	add	r0, r3
 8009d2a:	1acb      	subs	r3, r1, r3
 8009d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009d30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009d34:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8009d38:	f10b 0b01 	add.w	fp, fp, #1
 8009d3c:	455b      	cmp	r3, fp
 8009d3e:	eba8 0802 	sub.w	r8, r8, r2
 8009d42:	f47f af14 	bne.w	8009b6e <forward_conv2d+0x9b2>
 8009d46:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009d4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009d50:	440a      	add	r2, r1
 8009d52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009d5a:	3204      	adds	r2, #4
 8009d5c:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8009d60:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009d64:	3301      	adds	r3, #1
 8009d66:	429a      	cmp	r2, r3
 8009d68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009d6c:	f47f aed9 	bne.w	8009b22 <forward_conv2d+0x966>
 8009d70:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 8009d74:	e4dc      	b.n	8009730 <forward_conv2d+0x574>
 8009d76:	2000      	movs	r0, #0
 8009d78:	e7a5      	b.n	8009cc6 <forward_conv2d+0xb0a>
 8009d7a:	eef0 6a46 	vmov.f32	s13, s12
 8009d7e:	e7be      	b.n	8009cfe <forward_conv2d+0xb42>
 8009d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009d88:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8009d8c:	eba8 0303 	sub.w	r3, r8, r3
 8009d90:	e6f6      	b.n	8009b80 <forward_conv2d+0x9c4>
 8009d92:	eeb0 6a48 	vmov.f32	s12, s16
 8009d96:	e6d0      	b.n	8009b3a <forward_conv2d+0x97e>
 8009d98:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8009d9c:	68ca      	ldr	r2, [r1, #12]
 8009d9e:	2a00      	cmp	r2, #0
 8009da0:	f43f aaca 	beq.w	8009338 <forward_conv2d+0x17c>
 8009da4:	69b3      	ldr	r3, [r6, #24]
 8009da6:	8818      	ldrh	r0, [r3, #0]
 8009da8:	2803      	cmp	r0, #3
 8009daa:	f240 819f 	bls.w	800a0ec <forward_conv2d+0xf30>
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db2:	b32b      	cbz	r3, 8009e00 <forward_conv2d+0xc44>
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	b31b      	cbz	r3, 8009e00 <forward_conv2d+0xc44>
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	6889      	ldr	r1, [r1, #8]
 8009dbc:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8009dc0:	9301      	str	r3, [sp, #4]
 8009dc2:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8009dc6:	9000      	str	r0, [sp, #0]
 8009dc8:	462b      	mov	r3, r5
 8009dca:	4620      	mov	r0, r4
 8009dcc:	f7ff f9a6 	bl	800911c <ai_dict_decompress_f32>
 8009dd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009dd4:	2c00      	cmp	r4, #0
 8009dd6:	bf18      	it	ne
 8009dd8:	4623      	movne	r3, r4
 8009dda:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009dde:	f7ff baab 	b.w	8009338 <forward_conv2d+0x17c>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	f000 8185 	beq.w	800a0f2 <forward_conv2d+0xf36>
 8009de8:	6883      	ldr	r3, [r0, #8]
 8009dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009dee:	2301      	movs	r3, #1
 8009df0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009df4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009df8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009dfc:	f7ff ba6d 	b.w	80092da <forward_conv2d+0x11e>
 8009e00:	2300      	movs	r3, #0
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	deff      	udf	#255	; 0xff
 8009e06:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009e0a:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 8009e0e:	320a      	adds	r2, #10
 8009e10:	f022 0207 	bic.w	r2, r2, #7
 8009e14:	ebad 0d02 	sub.w	sp, sp, r2
 8009e18:	aa02      	add	r2, sp, #8
 8009e1a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e1e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8009e22:	2a00      	cmp	r2, #0
 8009e24:	f000 814d 	beq.w	800a0c2 <forward_conv2d+0xf06>
 8009e28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e2a:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 8009e2e:	fb02 f303 	mul.w	r3, r2, r3
 8009e32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009e34:	657b      	str	r3, [r7, #84]	; 0x54
 8009e36:	1a9b      	subs	r3, r3, r2
 8009e38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009e3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e3e:	4413      	add	r3, r2
 8009e40:	637b      	str	r3, [r7, #52]	; 0x34
 8009e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8009e50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8009e54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e58:	2300      	movs	r3, #0
 8009e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e60:	b13b      	cbz	r3, 8009e72 <forward_conv2d+0xcb6>
 8009e62:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8009e66:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8009e6a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8009e6e:	f001 f8b7 	bl	800afe0 <memcpy>
 8009e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 8135 	beq.w	800a0e6 <forward_conv2d+0xf2a>
 8009e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e7e:	ed93 6a00 	vldr	s12, [r3]
 8009e82:	3304      	adds	r3, #4
 8009e84:	673b      	str	r3, [r7, #112]	; 0x70
 8009e86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 8101 	beq.w	800a092 <forward_conv2d+0xed6>
 8009e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e98:	eb03 0802 	add.w	r8, r3, r2
 8009e9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009eae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009eb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009eb6:	f04f 0b00 	mov.w	fp, #0
 8009eba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f2c0 8108 	blt.w	800a0d4 <forward_conv2d+0xf18>
 8009ec4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8009ec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8009ed0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8009ed4:	eb02 0c04 	add.w	ip, r2, r4
 8009ed8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8009edc:	4540      	cmp	r0, r8
 8009ede:	bf94      	ite	ls
 8009ee0:	ebc3 0300 	rsbls	r3, r3, r0
 8009ee4:	ebc3 0308 	rsbhi	r3, r3, r8
 8009ee8:	eba2 0903 	sub.w	r9, r2, r3
 8009eec:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8009ef0:	1ac4      	subs	r4, r0, r3
 8009ef2:	fb03 f302 	mul.w	r3, r3, r2
 8009ef6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009efa:	2a00      	cmp	r2, #0
 8009efc:	f340 80e7 	ble.w	800a0ce <forward_conv2d+0xf12>
 8009f00:	f023 050f 	bic.w	r5, r3, #15
 8009f04:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 8009f08:	1e68      	subs	r0, r5, #1
 8009f0a:	0900      	lsrs	r0, r0, #4
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	fb06 f204 	mul.w	r2, r6, r4
 8009f12:	653a      	str	r2, [r7, #80]	; 0x50
 8009f14:	0102      	lsls	r2, r0, #4
 8009f16:	633a      	str	r2, [r7, #48]	; 0x30
 8009f18:	fb06 f909 	mul.w	r9, r6, r9
 8009f1c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8009f20:	eef0 6a46 	vmov.f32	s13, s12
 8009f24:	f04f 0e00 	mov.w	lr, #0
 8009f28:	4662      	mov	r2, ip
 8009f2a:	2d00      	cmp	r5, #0
 8009f2c:	f340 80cd 	ble.w	800a0ca <forward_conv2d+0xf0e>
 8009f30:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8009f34:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8009f38:	2600      	movs	r6, #0
 8009f3a:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 8009f3e:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 8009f42:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 8009f46:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 8009f4a:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8009f4e:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8009f52:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8009f56:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 8009f5a:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 8009f5e:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 8009f62:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 8009f66:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8009f6a:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 8009f6e:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 8009f72:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8009f76:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8009f7a:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8009f7e:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 8009f82:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8009f86:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8009f8a:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8009f8e:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 8009f92:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 8009f96:	ed54 3a04 	vldr	s7, [r4, #-16]
 8009f9a:	ed10 4a04 	vldr	s8, [r0, #-16]
 8009f9e:	ed50 4a03 	vldr	s9, [r0, #-12]
 8009fa2:	ed14 5a03 	vldr	s10, [r4, #-12]
 8009fa6:	ed54 5a02 	vldr	s11, [r4, #-8]
 8009faa:	ed10 7a02 	vldr	s14, [r0, #-8]
 8009fae:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8009fb2:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8009fb6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8009fba:	3610      	adds	r6, #16
 8009fbc:	42b5      	cmp	r5, r6
 8009fbe:	ed14 fa01 	vldr	s30, [r4, #-4]
 8009fc2:	ed50 ea01 	vldr	s29, [r0, #-4]
 8009fc6:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8009fca:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009fce:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8009fd2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8009fd6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009fda:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8009fde:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8009fe2:	eee9 7a89 	vfma.f32	s15, s19, s18
 8009fe6:	eee8 7a80 	vfma.f32	s15, s17, s0
 8009fea:	eee0 7a81 	vfma.f32	s15, s1, s2
 8009fee:	eee1 7a82 	vfma.f32	s15, s3, s4
 8009ff2:	eee2 7a83 	vfma.f32	s15, s5, s6
 8009ff6:	eee3 7a84 	vfma.f32	s15, s7, s8
 8009ffa:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009ffe:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a002:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800a006:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a00a:	dc96      	bgt.n	8009f3a <forward_conv2d+0xd7e>
 800a00c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a00e:	4451      	add	r1, sl
 800a010:	4452      	add	r2, sl
 800a012:	4283      	cmp	r3, r0
 800a014:	dd0f      	ble.n	800a036 <forward_conv2d+0xe7a>
 800a016:	4604      	mov	r4, r0
 800a018:	468c      	mov	ip, r1
 800a01a:	4616      	mov	r6, r2
 800a01c:	ecb6 7a01 	vldmia	r6!, {s14}
 800a020:	ecfc 7a01 	vldmia	ip!, {s15}
 800a024:	3401      	adds	r4, #1
 800a026:	42a3      	cmp	r3, r4
 800a028:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a02c:	d1f6      	bne.n	800a01c <forward_conv2d+0xe60>
 800a02e:	1a18      	subs	r0, r3, r0
 800a030:	0080      	lsls	r0, r0, #2
 800a032:	4402      	add	r2, r0
 800a034:	4401      	add	r1, r0
 800a036:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a038:	4402      	add	r2, r0
 800a03a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800a03e:	f10e 0e01 	add.w	lr, lr, #1
 800a042:	4570      	cmp	r0, lr
 800a044:	4449      	add	r1, r9
 800a046:	f47f af70 	bne.w	8009f2a <forward_conv2d+0xd6e>
 800a04a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800a04e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a050:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a054:	edc3 6a00 	vstr	s13, [r3]
 800a058:	4608      	mov	r0, r1
 800a05a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800a05e:	440b      	add	r3, r1
 800a060:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800a064:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a066:	4410      	add	r0, r2
 800a068:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a06a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800a06e:	4608      	mov	r0, r1
 800a070:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800a074:	4418      	add	r0, r3
 800a076:	1acb      	subs	r3, r1, r3
 800a078:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a07c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800a080:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800a084:	f10b 0b01 	add.w	fp, fp, #1
 800a088:	455b      	cmp	r3, fp
 800a08a:	eba8 0802 	sub.w	r8, r8, r2
 800a08e:	f47f af14 	bne.w	8009eba <forward_conv2d+0xcfe>
 800a092:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a096:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a09a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a09e:	440a      	add	r2, r1
 800a0a0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a0a4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a0a8:	3204      	adds	r2, #4
 800a0aa:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800a0ae:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a0ba:	f47f aed0 	bne.w	8009e5e <forward_conv2d+0xca2>
 800a0be:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 800a0c2:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 800a0c6:	f7ff bb33 	b.w	8009730 <forward_conv2d+0x574>
 800a0ca:	2000      	movs	r0, #0
 800a0cc:	e7a1      	b.n	800a012 <forward_conv2d+0xe56>
 800a0ce:	eef0 6a46 	vmov.f32	s13, s12
 800a0d2:	e7ba      	b.n	800a04a <forward_conv2d+0xe8e>
 800a0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a0dc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800a0e0:	eba8 0303 	sub.w	r3, r8, r3
 800a0e4:	e6f2      	b.n	8009ecc <forward_conv2d+0xd10>
 800a0e6:	eeb0 6a48 	vmov.f32	s12, s16
 800a0ea:	e6cc      	b.n	8009e86 <forward_conv2d+0xcca>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	deff      	udf	#255	; 0xff
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a102:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a106:	f7ff b8e8 	b.w	80092da <forward_conv2d+0x11e>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d0f2      	beq.n	800a0f4 <forward_conv2d+0xf38>
 800a10e:	6882      	ldr	r2, [r0, #8]
 800a110:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a114:	2301      	movs	r3, #1
 800a116:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a11a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800a11e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a122:	f7ff b8da 	b.w	80092da <forward_conv2d+0x11e>
 800a126:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800a12a:	f7ff b8b7 	b.w	800929c <forward_conv2d+0xe0>
 800a12e:	3318      	adds	r3, #24
 800a130:	d007      	beq.n	800a142 <forward_conv2d+0xf86>
 800a132:	462a      	mov	r2, r5
 800a134:	462c      	mov	r4, r5
 800a136:	462b      	mov	r3, r5
 800a138:	f7ff b86a 	b.w	8009210 <forward_conv2d+0x54>
 800a13c:	2300      	movs	r3, #0
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	deff      	udf	#255	; 0xff
 800a142:	68db      	ldr	r3, [r3, #12]
 800a144:	deff      	udf	#255	; 0xff
 800a146:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800a14a:	f7ff b850 	b.w	80091ee <forward_conv2d+0x32>
 800a14e:	2300      	movs	r3, #0
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	deff      	udf	#255	; 0xff
 800a154:	6853      	ldr	r3, [r2, #4]
 800a156:	deff      	udf	#255	; 0xff
 800a158:	2200      	movs	r2, #0
 800a15a:	f7ff b858 	b.w	800920e <forward_conv2d+0x52>
 800a15e:	bf00      	nop

0800a160 <forward_dense>:
 800a160:	6983      	ldr	r3, [r0, #24]
 800a162:	881a      	ldrh	r2, [r3, #0]
 800a164:	2a00      	cmp	r2, #0
 800a166:	f000 8193 	beq.w	800a490 <forward_dense+0x330>
 800a16a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a16e:	ed2d 8b10 	vpush	{d8-d15}
 800a172:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800a176:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a17a:	b099      	sub	sp, #100	; 0x64
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f000 8194 	beq.w	800a4aa <forward_dense+0x34a>
 800a182:	f8d3 8000 	ldr.w	r8, [r3]
 800a186:	2a01      	cmp	r2, #1
 800a188:	f240 817f 	bls.w	800a48a <forward_dense+0x32a>
 800a18c:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800a190:	b104      	cbz	r4, 800a194 <forward_dense+0x34>
 800a192:	6824      	ldr	r4, [r4, #0]
 800a194:	2a02      	cmp	r2, #2
 800a196:	f000 817d 	beq.w	800a494 <forward_dense+0x334>
 800a19a:	f8dc 301c 	ldr.w	r3, [ip, #28]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f040 817b 	bne.w	800a49a <forward_dense+0x33a>
 800a1a4:	f11c 0118 	adds.w	r1, ip, #24
 800a1a8:	930e      	str	r3, [sp, #56]	; 0x38
 800a1aa:	f000 817c 	beq.w	800a4a6 <forward_dense+0x346>
 800a1ae:	f8bc 1018 	ldrh.w	r1, [ip, #24]
 800a1b2:	2901      	cmp	r1, #1
 800a1b4:	f240 83ab 	bls.w	800a90e <forward_dense+0x7ae>
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f000 8178 	beq.w	800a4ae <forward_dense+0x34e>
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1c4:	68e7      	ldr	r7, [r4, #12]
 800a1c6:	6998      	ldr	r0, [r3, #24]
 800a1c8:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800a1cc:	6803      	ldr	r3, [r0, #0]
 800a1ce:	6849      	ldr	r1, [r1, #4]
 800a1d0:	9115      	str	r1, [sp, #84]	; 0x54
 800a1d2:	e9d7 6501 	ldrd	r6, r5, [r7, #4]
 800a1d6:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800a1da:	f3c3 5141 	ubfx	r1, r3, #21, #2
 800a1de:	fa4e f101 	asr.w	r1, lr, r1
 800a1e2:	2a03      	cmp	r2, #3
 800a1e4:	68ff      	ldr	r7, [r7, #12]
 800a1e6:	9113      	str	r1, [sp, #76]	; 0x4c
 800a1e8:	fb05 f506 	mul.w	r5, r5, r6
 800a1ec:	f000 8373 	beq.w	800a8d6 <forward_dense+0x776>
 800a1f0:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800a1f4:	2a00      	cmp	r2, #0
 800a1f6:	f000 8371 	beq.w	800a8dc <forward_dense+0x77c>
 800a1fa:	6812      	ldr	r2, [r2, #0]
 800a1fc:	2a00      	cmp	r2, #0
 800a1fe:	f000 836d 	beq.w	800a8dc <forward_dense+0x77c>
 800a202:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a206:	2b04      	cmp	r3, #4
 800a208:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800a20c:	f000 836c 	beq.w	800a8e8 <forward_dense+0x788>
 800a210:	2b08      	cmp	r3, #8
 800a212:	f000 8369 	beq.w	800a8e8 <forward_dense+0x788>
 800a216:	f04f 0a00 	mov.w	sl, #0
 800a21a:	69a3      	ldr	r3, [r4, #24]
 800a21c:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800a220:	6899      	ldr	r1, [r3, #8]
 800a222:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a224:	9102      	str	r1, [sp, #8]
 800a226:	695b      	ldr	r3, [r3, #20]
 800a228:	6892      	ldr	r2, [r2, #8]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	9305      	str	r3, [sp, #20]
 800a22e:	00ad      	lsls	r5, r5, #2
 800a230:	fb07 1005 	mla	r0, r7, r5, r1
 800a234:	00b4      	lsls	r4, r6, #2
 800a236:	4281      	cmp	r1, r0
 800a238:	9011      	str	r0, [sp, #68]	; 0x44
 800a23a:	9410      	str	r4, [sp, #64]	; 0x40
 800a23c:	eb01 0804 	add.w	r8, r1, r4
 800a240:	f080 811e 	bcs.w	800a480 <forward_dense+0x320>
 800a244:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a246:	eddf faa0 	vldr	s31, [pc, #640]	; 800a4c8 <forward_dense+0x368>
 800a24a:	08e8      	lsrs	r0, r5, #3
 800a24c:	0141      	lsls	r1, r0, #5
 800a24e:	f025 0301 	bic.w	r3, r5, #1
 800a252:	4606      	mov	r6, r0
 800a254:	ebc1 0383 	rsb	r3, r1, r3, lsl #2
 800a258:	9001      	str	r0, [sp, #4]
 800a25a:	ebc0 60c0 	rsb	r0, r0, r0, lsl #27
 800a25e:	00f7      	lsls	r7, r6, #3
 800a260:	9316      	str	r3, [sp, #88]	; 0x58
 800a262:	0143      	lsls	r3, r0, #5
 800a264:	00b6      	lsls	r6, r6, #2
 800a266:	f1a5 0410 	sub.w	r4, r5, #16
 800a26a:	9307      	str	r3, [sp, #28]
 800a26c:	f107 0308 	add.w	r3, r7, #8
 800a270:	0924      	lsrs	r4, r4, #4
 800a272:	9304      	str	r3, [sp, #16]
 800a274:	1d33      	adds	r3, r6, #4
 800a276:	3401      	adds	r4, #1
 800a278:	930d      	str	r3, [sp, #52]	; 0x34
 800a27a:	f005 0301 	and.w	r3, r5, #1
 800a27e:	01a4      	lsls	r4, r4, #6
 800a280:	f005 0907 	and.w	r9, r5, #7
 800a284:	9309      	str	r3, [sp, #36]	; 0x24
 800a286:	00ab      	lsls	r3, r5, #2
 800a288:	9312      	str	r3, [sp, #72]	; 0x48
 800a28a:	9703      	str	r7, [sp, #12]
 800a28c:	960c      	str	r6, [sp, #48]	; 0x30
 800a28e:	9417      	str	r4, [sp, #92]	; 0x5c
 800a290:	eb02 0b01 	add.w	fp, r2, r1
 800a294:	4653      	mov	r3, sl
 800a296:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 800a29a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a29c:	9907      	ldr	r1, [sp, #28]
 800a29e:	6992      	ldr	r2, [r2, #24]
 800a2a0:	6894      	ldr	r4, [r2, #8]
 800a2a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2a4:	4459      	add	r1, fp
 800a2a6:	9106      	str	r1, [sp, #24]
 800a2a8:	2a00      	cmp	r2, #0
 800a2aa:	f000 810f 	beq.w	800a4cc <forward_dense+0x36c>
 800a2ae:	6992      	ldr	r2, [r2, #24]
 800a2b0:	6896      	ldr	r6, [r2, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 810e 	beq.w	800a4d4 <forward_dense+0x374>
 800a2b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2ba:	2a04      	cmp	r2, #4
 800a2bc:	f000 821e 	beq.w	800a6fc <forward_dense+0x59c>
 800a2c0:	9a02      	ldr	r2, [sp, #8]
 800a2c2:	4590      	cmp	r8, r2
 800a2c4:	f240 80d3 	bls.w	800a46e <forward_dense+0x30e>
 800a2c8:	4694      	mov	ip, r2
 800a2ca:	9a07      	ldr	r2, [sp, #28]
 800a2cc:	f8dd a014 	ldr.w	sl, [sp, #20]
 800a2d0:	f102 0e20 	add.w	lr, r2, #32
 800a2d4:	46b1      	mov	r9, r6
 800a2d6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a2d8:	44de      	add	lr, fp
 800a2da:	f1b9 0f00 	cmp.w	r9, #0
 800a2de:	f000 80e8 	beq.w	800a4b2 <forward_dense+0x352>
 800a2e2:	9a01      	ldr	r2, [sp, #4]
 800a2e4:	edd9 2a00 	vldr	s5, [r9]
 800a2e8:	eddf 6a77 	vldr	s13, [pc, #476]	; 800a4c8 <forward_dense+0x368>
 800a2ec:	f109 0904 	add.w	r9, r9, #4
 800a2f0:	2a00      	cmp	r2, #0
 800a2f2:	f000 80e6 	beq.w	800a4c2 <forward_dense+0x362>
 800a2f6:	9904      	ldr	r1, [sp, #16]
 800a2f8:	f104 0208 	add.w	r2, r4, #8
 800a2fc:	190f      	adds	r7, r1, r4
 800a2fe:	4671      	mov	r1, lr
 800a300:	f812 5c07 	ldrb.w	r5, [r2, #-7]
 800a304:	f812 0c08 	ldrb.w	r0, [r2, #-8]
 800a308:	ed51 7a07 	vldr	s15, [r1, #-28]	; 0xffffffe4
 800a30c:	ed11 3a08 	vldr	s6, [r1, #-32]	; 0xffffffe0
 800a310:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800a314:	ed11 5a05 	vldr	s10, [r1, #-20]	; 0xffffffec
 800a318:	ed51 3a04 	vldr	s7, [r1, #-16]
 800a31c:	ed51 4a03 	vldr	s9, [r1, #-12]
 800a320:	ed51 5a02 	vldr	s11, [r1, #-8]
 800a324:	ed11 6a01 	vldr	s12, [r1, #-4]
 800a328:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a32c:	ed95 7a00 	vldr	s14, [r5]
 800a330:	f812 5c06 	ldrb.w	r5, [r2, #-6]
 800a334:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a33c:	ed90 7a00 	vldr	s14, [r0]
 800a340:	f812 0c05 	ldrb.w	r0, [r2, #-5]
 800a344:	eee7 7a03 	vfma.f32	s15, s14, s6
 800a348:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a34c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a350:	ed95 3a00 	vldr	s6, [r5]
 800a354:	ed90 7a00 	vldr	s14, [r0]
 800a358:	f812 5c04 	ldrb.w	r5, [r2, #-4]
 800a35c:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 800a360:	eee3 7a04 	vfma.f32	s15, s6, s8
 800a364:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a368:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a36c:	ed95 3a00 	vldr	s6, [r5]
 800a370:	ed90 4a00 	vldr	s8, [r0]
 800a374:	f812 5c02 	ldrb.w	r5, [r2, #-2]
 800a378:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 800a37c:	eee7 7a05 	vfma.f32	s15, s14, s10
 800a380:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a384:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a388:	ed95 5a00 	vldr	s10, [r5]
 800a38c:	ed90 7a00 	vldr	s14, [r0]
 800a390:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a394:	3208      	adds	r2, #8
 800a396:	4297      	cmp	r7, r2
 800a398:	f101 0120 	add.w	r1, r1, #32
 800a39c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a3a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a3a4:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a3a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a3ac:	d1a8      	bne.n	800a300 <forward_dense+0x1a0>
 800a3ae:	9a03      	ldr	r2, [sp, #12]
 800a3b0:	18a1      	adds	r1, r4, r2
 800a3b2:	465a      	mov	r2, fp
 800a3b4:	2e00      	cmp	r6, #0
 800a3b6:	d04a      	beq.n	800a44e <forward_dense+0x2ee>
 800a3b8:	7808      	ldrb	r0, [r1, #0]
 800a3ba:	ed92 7a00 	vldr	s14, [r2]
 800a3be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a3c2:	edd0 7a00 	vldr	s15, [r0]
 800a3c6:	2e01      	cmp	r6, #1
 800a3c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a3cc:	d03f      	beq.n	800a44e <forward_dense+0x2ee>
 800a3ce:	7848      	ldrb	r0, [r1, #1]
 800a3d0:	edd2 7a01 	vldr	s15, [r2, #4]
 800a3d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a3d8:	ed90 7a00 	vldr	s14, [r0]
 800a3dc:	2e02      	cmp	r6, #2
 800a3de:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a3e2:	d034      	beq.n	800a44e <forward_dense+0x2ee>
 800a3e4:	7888      	ldrb	r0, [r1, #2]
 800a3e6:	edd2 7a02 	vldr	s15, [r2, #8]
 800a3ea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a3ee:	ed90 7a00 	vldr	s14, [r0]
 800a3f2:	2e03      	cmp	r6, #3
 800a3f4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a3f8:	d029      	beq.n	800a44e <forward_dense+0x2ee>
 800a3fa:	78c8      	ldrb	r0, [r1, #3]
 800a3fc:	edd2 7a03 	vldr	s15, [r2, #12]
 800a400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a404:	ed90 7a00 	vldr	s14, [r0]
 800a408:	2e04      	cmp	r6, #4
 800a40a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a40e:	d01e      	beq.n	800a44e <forward_dense+0x2ee>
 800a410:	7908      	ldrb	r0, [r1, #4]
 800a412:	edd2 7a04 	vldr	s15, [r2, #16]
 800a416:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a41a:	ed90 7a00 	vldr	s14, [r0]
 800a41e:	2e05      	cmp	r6, #5
 800a420:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a424:	d013      	beq.n	800a44e <forward_dense+0x2ee>
 800a426:	7948      	ldrb	r0, [r1, #5]
 800a428:	edd2 7a05 	vldr	s15, [r2, #20]
 800a42c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a430:	ed90 7a00 	vldr	s14, [r0]
 800a434:	2e06      	cmp	r6, #6
 800a436:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a43a:	d008      	beq.n	800a44e <forward_dense+0x2ee>
 800a43c:	7989      	ldrb	r1, [r1, #6]
 800a43e:	edd2 7a06 	vldr	s15, [r2, #24]
 800a442:	eb03 0281 	add.w	r2, r3, r1, lsl #2
 800a446:	ed92 7a00 	vldr	s14, [r2]
 800a44a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a44e:	4454      	add	r4, sl
 800a450:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800a454:	ecec 6a01 	vstmia	ip!, {s13}
 800a458:	45c4      	cmp	ip, r8
 800a45a:	f4ff af3e 	bcc.w	800a2da <forward_dense+0x17a>
 800a45e:	9902      	ldr	r1, [sp, #8]
 800a460:	43ca      	mvns	r2, r1
 800a462:	4442      	add	r2, r8
 800a464:	f022 0203 	bic.w	r2, r2, #3
 800a468:	3204      	adds	r2, #4
 800a46a:	188a      	adds	r2, r1, r2
 800a46c:	9202      	str	r2, [sp, #8]
 800a46e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a470:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a472:	4490      	add	r8, r2
 800a474:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a476:	4493      	add	fp, r2
 800a478:	9a02      	ldr	r2, [sp, #8]
 800a47a:	428a      	cmp	r2, r1
 800a47c:	f4ff af0d 	bcc.w	800a29a <forward_dense+0x13a>
 800a480:	b019      	add	sp, #100	; 0x64
 800a482:	ecbd 8b10 	vpop	{d8-d15}
 800a486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48a:	2300      	movs	r3, #0
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	deff      	udf	#255	; 0xff
 800a490:	6853      	ldr	r3, [r2, #4]
 800a492:	deff      	udf	#255	; 0xff
 800a494:	2300      	movs	r3, #0
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	deff      	udf	#255	; 0xff
 800a49a:	6819      	ldr	r1, [r3, #0]
 800a49c:	910e      	str	r1, [sp, #56]	; 0x38
 800a49e:	f11c 0118 	adds.w	r1, ip, #24
 800a4a2:	f47f ae84 	bne.w	800a1ae <forward_dense+0x4e>
 800a4a6:	910f      	str	r1, [sp, #60]	; 0x3c
 800a4a8:	e68b      	b.n	800a1c2 <forward_dense+0x62>
 800a4aa:	4698      	mov	r8, r3
 800a4ac:	e66b      	b.n	800a186 <forward_dense+0x26>
 800a4ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800a4b0:	e687      	b.n	800a1c2 <forward_dense+0x62>
 800a4b2:	9a01      	ldr	r2, [sp, #4]
 800a4b4:	eddf 6a04 	vldr	s13, [pc, #16]	; 800a4c8 <forward_dense+0x368>
 800a4b8:	eef0 2a6f 	vmov.f32	s5, s31
 800a4bc:	2a00      	cmp	r2, #0
 800a4be:	f47f af1a 	bne.w	800a2f6 <forward_dense+0x196>
 800a4c2:	9a06      	ldr	r2, [sp, #24]
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	e775      	b.n	800a3b4 <forward_dense+0x254>
 800a4c8:	00000000 	.word	0x00000000
 800a4cc:	4616      	mov	r6, r2
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f47f aef2 	bne.w	800a2b8 <forward_dense+0x158>
 800a4d4:	9a02      	ldr	r2, [sp, #8]
 800a4d6:	4590      	cmp	r8, r2
 800a4d8:	d9c9      	bls.n	800a46e <forward_dense+0x30e>
 800a4da:	4615      	mov	r5, r2
 800a4dc:	9a07      	ldr	r2, [sp, #28]
 800a4de:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a4e0:	9308      	str	r3, [sp, #32]
 800a4e2:	f102 0740 	add.w	r7, r2, #64	; 0x40
 800a4e6:	9a06      	ldr	r2, [sp, #24]
 800a4e8:	9b05      	ldr	r3, [sp, #20]
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a4ee:	445f      	add	r7, fp
 800a4f0:	eb00 0c02 	add.w	ip, r0, r2
 800a4f4:	f001 0e0f 	and.w	lr, r1, #15
 800a4f8:	468a      	mov	sl, r1
 800a4fa:	4691      	mov	r9, r2
 800a4fc:	2e00      	cmp	r6, #0
 800a4fe:	f000 81de 	beq.w	800a8be <forward_dense+0x75e>
 800a502:	f1ba 0f0f 	cmp.w	sl, #15
 800a506:	ed96 fa00 	vldr	s30, [r6]
 800a50a:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 800a4c8 <forward_dense+0x368>
 800a50e:	f106 0604 	add.w	r6, r6, #4
 800a512:	f240 81dc 	bls.w	800a8ce <forward_dense+0x76e>
 800a516:	f104 0140 	add.w	r1, r4, #64	; 0x40
 800a51a:	463a      	mov	r2, r7
 800a51c:	4650      	mov	r0, sl
 800a51e:	ed52 ea0f 	vldr	s29, [r2, #-60]	; 0xffffffc4
 800a522:	ed51 7a0f 	vldr	s15, [r1, #-60]	; 0xffffffc4
 800a526:	ed11 ea10 	vldr	s28, [r1, #-64]	; 0xffffffc0
 800a52a:	ed52 da10 	vldr	s27, [r2, #-64]	; 0xffffffc0
 800a52e:	ed11 da0e 	vldr	s26, [r1, #-56]	; 0xffffffc8
 800a532:	ed51 ca0d 	vldr	s25, [r1, #-52]	; 0xffffffcc
 800a536:	ed12 ca0d 	vldr	s24, [r2, #-52]	; 0xffffffcc
 800a53a:	ed52 ba0c 	vldr	s23, [r2, #-48]	; 0xffffffd0
 800a53e:	ed11 ba0c 	vldr	s22, [r1, #-48]	; 0xffffffd0
 800a542:	ed52 aa0b 	vldr	s21, [r2, #-44]	; 0xffffffd4
 800a546:	ed11 aa0b 	vldr	s20, [r1, #-44]	; 0xffffffd4
 800a54a:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 800a54e:	ed11 9a0a 	vldr	s18, [r1, #-40]	; 0xffffffd8
 800a552:	ed51 8a09 	vldr	s17, [r1, #-36]	; 0xffffffdc
 800a556:	ed12 8a09 	vldr	s16, [r2, #-36]	; 0xffffffdc
 800a55a:	ed11 0a08 	vldr	s0, [r1, #-32]	; 0xffffffe0
 800a55e:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800a562:	ed11 1a07 	vldr	s2, [r1, #-28]	; 0xffffffe4
 800a566:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 800a56a:	ed11 2a06 	vldr	s4, [r1, #-24]	; 0xffffffe8
 800a56e:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800a572:	ed11 3a05 	vldr	s6, [r1, #-20]	; 0xffffffec
 800a576:	ed52 3a05 	vldr	s7, [r2, #-20]	; 0xffffffec
 800a57a:	ed12 4a04 	vldr	s8, [r2, #-16]
 800a57e:	ed51 4a04 	vldr	s9, [r1, #-16]
 800a582:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a586:	ed51 5a03 	vldr	s11, [r1, #-12]
 800a58a:	ed12 6a02 	vldr	s12, [r2, #-8]
 800a58e:	ed11 7a02 	vldr	s14, [r1, #-8]
 800a592:	ee67 7aae 	vmul.f32	s15, s15, s29
 800a596:	ed52 ea0e 	vldr	s29, [r2, #-56]	; 0xffffffc8
 800a59a:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800a59e:	3810      	subs	r0, #16
 800a5a0:	280f      	cmp	r0, #15
 800a5a2:	ed11 ea01 	vldr	s28, [r1, #-4]
 800a5a6:	ed52 da01 	vldr	s27, [r2, #-4]
 800a5aa:	eeed 7a2e 	vfma.f32	s15, s26, s29
 800a5ae:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800a5b2:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800a5b6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800a5ba:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800a5be:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800a5c2:	eee9 7a89 	vfma.f32	s15, s19, s18
 800a5c6:	eee8 7a88 	vfma.f32	s15, s17, s16
 800a5ca:	eee0 7a20 	vfma.f32	s15, s0, s1
 800a5ce:	eee1 7a21 	vfma.f32	s15, s2, s3
 800a5d2:	eee2 7a22 	vfma.f32	s15, s4, s5
 800a5d6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800a5da:	eee4 7a24 	vfma.f32	s15, s8, s9
 800a5de:	eee5 7a25 	vfma.f32	s15, s10, s11
 800a5e2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800a5e6:	eeee 7a2d 	vfma.f32	s15, s28, s27
 800a5ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a5ee:	d896      	bhi.n	800a51e <forward_dense+0x3be>
 800a5f0:	eb04 0009 	add.w	r0, r4, r9
 800a5f4:	4672      	mov	r2, lr
 800a5f6:	4661      	mov	r1, ip
 800a5f8:	2a00      	cmp	r2, #0
 800a5fa:	d075      	beq.n	800a6e8 <forward_dense+0x588>
 800a5fc:	ed90 7a00 	vldr	s14, [r0]
 800a600:	edd1 7a00 	vldr	s15, [r1]
 800a604:	2a01      	cmp	r2, #1
 800a606:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a60a:	d06d      	beq.n	800a6e8 <forward_dense+0x588>
 800a60c:	ed90 7a01 	vldr	s14, [r0, #4]
 800a610:	edd1 7a01 	vldr	s15, [r1, #4]
 800a614:	2a02      	cmp	r2, #2
 800a616:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a61a:	d065      	beq.n	800a6e8 <forward_dense+0x588>
 800a61c:	ed90 7a02 	vldr	s14, [r0, #8]
 800a620:	edd1 7a02 	vldr	s15, [r1, #8]
 800a624:	2a03      	cmp	r2, #3
 800a626:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a62a:	d05d      	beq.n	800a6e8 <forward_dense+0x588>
 800a62c:	ed90 7a03 	vldr	s14, [r0, #12]
 800a630:	edd1 7a03 	vldr	s15, [r1, #12]
 800a634:	2a04      	cmp	r2, #4
 800a636:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a63a:	d055      	beq.n	800a6e8 <forward_dense+0x588>
 800a63c:	ed90 7a04 	vldr	s14, [r0, #16]
 800a640:	edd1 7a04 	vldr	s15, [r1, #16]
 800a644:	2a05      	cmp	r2, #5
 800a646:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a64a:	d04d      	beq.n	800a6e8 <forward_dense+0x588>
 800a64c:	ed90 7a05 	vldr	s14, [r0, #20]
 800a650:	edd1 7a05 	vldr	s15, [r1, #20]
 800a654:	2a06      	cmp	r2, #6
 800a656:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a65a:	d045      	beq.n	800a6e8 <forward_dense+0x588>
 800a65c:	ed90 7a06 	vldr	s14, [r0, #24]
 800a660:	edd1 7a06 	vldr	s15, [r1, #24]
 800a664:	2a07      	cmp	r2, #7
 800a666:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a66a:	d03d      	beq.n	800a6e8 <forward_dense+0x588>
 800a66c:	ed90 7a07 	vldr	s14, [r0, #28]
 800a670:	edd1 7a07 	vldr	s15, [r1, #28]
 800a674:	2a08      	cmp	r2, #8
 800a676:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a67a:	d035      	beq.n	800a6e8 <forward_dense+0x588>
 800a67c:	ed90 7a08 	vldr	s14, [r0, #32]
 800a680:	edd1 7a08 	vldr	s15, [r1, #32]
 800a684:	2a09      	cmp	r2, #9
 800a686:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a68a:	d02d      	beq.n	800a6e8 <forward_dense+0x588>
 800a68c:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 800a690:	edd1 7a09 	vldr	s15, [r1, #36]	; 0x24
 800a694:	2a0a      	cmp	r2, #10
 800a696:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a69a:	d025      	beq.n	800a6e8 <forward_dense+0x588>
 800a69c:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 800a6a0:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
 800a6a4:	2a0b      	cmp	r2, #11
 800a6a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6aa:	d01d      	beq.n	800a6e8 <forward_dense+0x588>
 800a6ac:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 800a6b0:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
 800a6b4:	2a0c      	cmp	r2, #12
 800a6b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6ba:	d015      	beq.n	800a6e8 <forward_dense+0x588>
 800a6bc:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 800a6c0:	edd1 7a0c 	vldr	s15, [r1, #48]	; 0x30
 800a6c4:	2a0d      	cmp	r2, #13
 800a6c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6ca:	d00d      	beq.n	800a6e8 <forward_dense+0x588>
 800a6cc:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
 800a6d0:	edd1 7a0d 	vldr	s15, [r1, #52]	; 0x34
 800a6d4:	2a0e      	cmp	r2, #14
 800a6d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6da:	d005      	beq.n	800a6e8 <forward_dense+0x588>
 800a6dc:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 800a6e0:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 800a6e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a6e8:	441c      	add	r4, r3
 800a6ea:	ee7f 6a26 	vadd.f32	s13, s30, s13
 800a6ee:	ece5 6a01 	vstmia	r5!, {s13}
 800a6f2:	4545      	cmp	r5, r8
 800a6f4:	f4ff af02 	bcc.w	800a4fc <forward_dense+0x39c>
 800a6f8:	9b08      	ldr	r3, [sp, #32]
 800a6fa:	e6b0      	b.n	800a45e <forward_dense+0x2fe>
 800a6fc:	9902      	ldr	r1, [sp, #8]
 800a6fe:	4588      	cmp	r8, r1
 800a700:	f67f aeb5 	bls.w	800a46e <forward_dense+0x30e>
 800a704:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a706:	eb02 000b 	add.w	r0, r2, fp
 800a70a:	9a07      	ldr	r2, [sp, #28]
 800a70c:	9008      	str	r0, [sp, #32]
 800a70e:	3220      	adds	r2, #32
 800a710:	3007      	adds	r0, #7
 800a712:	445a      	add	r2, fp
 800a714:	900b      	str	r0, [sp, #44]	; 0x2c
 800a716:	920a      	str	r2, [sp, #40]	; 0x28
 800a718:	4689      	mov	r9, r1
 800a71a:	2e00      	cmp	r6, #0
 800a71c:	f000 80b9 	beq.w	800a892 <forward_dense+0x732>
 800a720:	9a01      	ldr	r2, [sp, #4]
 800a722:	edd6 2a00 	vldr	s5, [r6]
 800a726:	ed5f 6a98 	vldr	s13, [pc, #-608]	; 800a4c8 <forward_dense+0x368>
 800a72a:	3604      	adds	r6, #4
 800a72c:	2a00      	cmp	r2, #0
 800a72e:	f000 80b8 	beq.w	800a8a2 <forward_dense+0x742>
 800a732:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a734:	1917      	adds	r7, r2, r4
 800a736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a738:	1d21      	adds	r1, r4, #4
 800a73a:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 800a73e:	ed52 7a07 	vldr	s15, [r2, #-28]	; 0xffffffe4
 800a742:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 800a746:	ed12 3a08 	vldr	s6, [r2, #-32]	; 0xffffffe0
 800a74a:	ed52 3a06 	vldr	s7, [r2, #-24]	; 0xffffffe8
 800a74e:	ed12 4a05 	vldr	s8, [r2, #-20]	; 0xffffffec
 800a752:	ed52 4a04 	vldr	s9, [r2, #-16]
 800a756:	ed12 5a03 	vldr	s10, [r2, #-12]
 800a75a:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a75e:	ed12 6a01 	vldr	s12, [r2, #-4]
 800a762:	f005 0e0f 	and.w	lr, r5, #15
 800a766:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800a76a:	ed9e 7a00 	vldr	s14, [lr]
 800a76e:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800a772:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a77a:	ed9c 7a00 	vldr	s14, [ip]
 800a77e:	f811 5c02 	ldrb.w	r5, [r1, #-2]
 800a782:	ea4f 1e10 	mov.w	lr, r0, lsr #4
 800a786:	eee7 7a03 	vfma.f32	s15, s14, s6
 800a78a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800a78e:	f000 0c0f 	and.w	ip, r0, #15
 800a792:	ed9e 7a00 	vldr	s14, [lr]
 800a796:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 800a79a:	eee7 7a23 	vfma.f32	s15, s14, s7
 800a79e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a7a2:	3104      	adds	r1, #4
 800a7a4:	ed9c 7a00 	vldr	s14, [ip]
 800a7a8:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 800a7ac:	eee7 7a04 	vfma.f32	s15, s14, s8
 800a7b0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800a7b4:	f005 050f 	and.w	r5, r5, #15
 800a7b8:	ed9c 7a00 	vldr	s14, [ip]
 800a7bc:	eee7 7a24 	vfma.f32	s15, s14, s9
 800a7c0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a7c4:	428f      	cmp	r7, r1
 800a7c6:	ed95 7a00 	vldr	s14, [r5]
 800a7ca:	ea4f 1510 	mov.w	r5, r0, lsr #4
 800a7ce:	eee7 7a05 	vfma.f32	s15, s14, s10
 800a7d2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800a7d6:	f000 000f 	and.w	r0, r0, #15
 800a7da:	ed95 7a00 	vldr	s14, [r5]
 800a7de:	eee7 7a25 	vfma.f32	s15, s14, s11
 800a7e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a7e6:	f102 0220 	add.w	r2, r2, #32
 800a7ea:	ed90 7a00 	vldr	s14, [r0]
 800a7ee:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a7f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a7f6:	d1a0      	bne.n	800a73a <forward_dense+0x5da>
 800a7f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7fa:	46de      	mov	lr, fp
 800a7fc:	eb04 0a02 	add.w	sl, r4, r2
 800a800:	9a08      	ldr	r2, [sp, #32]
 800a802:	4596      	cmp	lr, r2
 800a804:	d22c      	bcs.n	800a860 <forward_dense+0x700>
 800a806:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a808:	f10e 0108 	add.w	r1, lr, #8
 800a80c:	eba2 0c01 	sub.w	ip, r2, r1
 800a810:	f02c 0207 	bic.w	r2, ip, #7
 800a814:	f10e 0710 	add.w	r7, lr, #16
 800a818:	4417      	add	r7, r2
 800a81a:	f10a 35ff 	add.w	r5, sl, #4294967295
 800a81e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a822:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a826:	ed11 6a02 	vldr	s12, [r1, #-8]
 800a82a:	f002 000f 	and.w	r0, r2, #15
 800a82e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a832:	ed90 7a00 	vldr	s14, [r0]
 800a836:	0912      	lsrs	r2, r2, #4
 800a838:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a83c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a840:	ed92 7a00 	vldr	s14, [r2]
 800a844:	eee7 7a06 	vfma.f32	s15, s14, s12
 800a848:	3108      	adds	r1, #8
 800a84a:	428f      	cmp	r7, r1
 800a84c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a850:	d1e5      	bne.n	800a81e <forward_dense+0x6be>
 800a852:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a856:	f10c 0c01 	add.w	ip, ip, #1
 800a85a:	44e2      	add	sl, ip
 800a85c:	eb0e 0ecc 	add.w	lr, lr, ip, lsl #3
 800a860:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a862:	b312      	cbz	r2, 800a8aa <forward_dense+0x74a>
 800a864:	f89a 2000 	ldrb.w	r2, [sl]
 800a868:	edde 7a00 	vldr	s15, [lr]
 800a86c:	0912      	lsrs	r2, r2, #4
 800a86e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a872:	ed92 7a00 	vldr	s14, [r2]
 800a876:	9a05      	ldr	r2, [sp, #20]
 800a878:	eee7 6a27 	vfma.f32	s13, s14, s15
 800a87c:	4414      	add	r4, r2
 800a87e:	ee76 2aa2 	vadd.f32	s5, s13, s5
 800a882:	ece9 2a01 	vstmia	r9!, {s5}
 800a886:	45c8      	cmp	r8, r9
 800a888:	f67f ade9 	bls.w	800a45e <forward_dense+0x2fe>
 800a88c:	2e00      	cmp	r6, #0
 800a88e:	f47f af47 	bne.w	800a720 <forward_dense+0x5c0>
 800a892:	9a01      	ldr	r2, [sp, #4]
 800a894:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800a914 <forward_dense+0x7b4>
 800a898:	eef0 2a6f 	vmov.f32	s5, s31
 800a89c:	2a00      	cmp	r2, #0
 800a89e:	f47f af48 	bne.w	800a732 <forward_dense+0x5d2>
 800a8a2:	f8dd e018 	ldr.w	lr, [sp, #24]
 800a8a6:	46a2      	mov	sl, r4
 800a8a8:	e7aa      	b.n	800a800 <forward_dense+0x6a0>
 800a8aa:	ee72 6aa6 	vadd.f32	s13, s5, s13
 800a8ae:	9a05      	ldr	r2, [sp, #20]
 800a8b0:	ece9 6a01 	vstmia	r9!, {s13}
 800a8b4:	45c1      	cmp	r9, r8
 800a8b6:	4414      	add	r4, r2
 800a8b8:	f4ff af2f 	bcc.w	800a71a <forward_dense+0x5ba>
 800a8bc:	e5cf      	b.n	800a45e <forward_dense+0x2fe>
 800a8be:	f1ba 0f0f 	cmp.w	sl, #15
 800a8c2:	eeb0 fa6f 	vmov.f32	s30, s31
 800a8c6:	eddf 6a13 	vldr	s13, [pc, #76]	; 800a914 <forward_dense+0x7b4>
 800a8ca:	f63f ae24 	bhi.w	800a516 <forward_dense+0x3b6>
 800a8ce:	4652      	mov	r2, sl
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	9906      	ldr	r1, [sp, #24]
 800a8d4:	e690      	b.n	800a5f8 <forward_dense+0x498>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	deff      	udf	#255	; 0xff
 800a8dc:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800a8e0:	2b04      	cmp	r3, #4
 800a8e2:	4691      	mov	r9, r2
 800a8e4:	f47f ac94 	bne.w	800a210 <forward_dense+0xb0>
 800a8e8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800a8ec:	f1b9 0f00 	cmp.w	r9, #0
 800a8f0:	f43f ac93 	beq.w	800a21a <forward_dense+0xba>
 800a8f4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a8f8:	f000 fb0c 	bl	800af14 <ai_array_get_byte_size>
 800a8fc:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800a900:	4602      	mov	r2, r0
 800a902:	4651      	mov	r1, sl
 800a904:	4618      	mov	r0, r3
 800a906:	f000 fb6b 	bl	800afe0 <memcpy>
 800a90a:	4682      	mov	sl, r0
 800a90c:	e485      	b.n	800a21a <forward_dense+0xba>
 800a90e:	2300      	movs	r3, #0
 800a910:	930f      	str	r3, [sp, #60]	; 0x3c
 800a912:	e456      	b.n	800a1c2 <forward_dense+0x62>
 800a914:	00000000 	.word	0x00000000

0800a918 <nl_func_relu_array_f32>:
 800a918:	b410      	push	{r4}
 800a91a:	698c      	ldr	r4, [r1, #24]
 800a91c:	6981      	ldr	r1, [r0, #24]
 800a91e:	68a3      	ldr	r3, [r4, #8]
 800a920:	6889      	ldr	r1, [r1, #8]
 800a922:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a926:	3a01      	subs	r2, #1
 800a928:	0092      	lsls	r2, r2, #2
 800a92a:	189b      	adds	r3, r3, r2
 800a92c:	d216      	bcs.n	800a95c <nl_func_relu_array_f32+0x44>
 800a92e:	3204      	adds	r2, #4
 800a930:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800a964 <nl_func_relu_array_f32+0x4c>
 800a934:	4411      	add	r1, r2
 800a936:	3304      	adds	r3, #4
 800a938:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a93c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a944:	bfb8      	it	lt
 800a946:	eef0 7a47 	vmovlt.f32	s15, s14
 800a94a:	ed61 7a01 	vstmdb	r1!, {s15}
 800a94e:	68a0      	ldr	r0, [r4, #8]
 800a950:	f1a3 0208 	sub.w	r2, r3, #8
 800a954:	4290      	cmp	r0, r2
 800a956:	f1a3 0304 	sub.w	r3, r3, #4
 800a95a:	d9ed      	bls.n	800a938 <nl_func_relu_array_f32+0x20>
 800a95c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	00000000 	.word	0x00000000

0800a968 <nl_func_sm_array_f32>:
 800a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	ed2d 8b04 	vpush	{d8-d9}
 800a970:	b089      	sub	sp, #36	; 0x24
 800a972:	698f      	ldr	r7, [r1, #24]
 800a974:	6984      	ldr	r4, [r0, #24]
 800a976:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 800a97a:	68bd      	ldr	r5, [r7, #8]
 800a97c:	9402      	str	r4, [sp, #8]
 800a97e:	4626      	mov	r6, r4
 800a980:	4696      	mov	lr, r2
 800a982:	eba2 020c 	sub.w	r2, r2, ip
 800a986:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 800a98a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	68b6      	ldr	r6, [r6, #8]
 800a990:	ebae 0e04 	sub.w	lr, lr, r4
 800a994:	4295      	cmp	r5, r2
 800a996:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 800a99a:	d354      	bcc.n	800aa46 <nl_func_sm_array_f32+0xde>
 800a99c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800a9a0:	f1cc 0200 	rsb	r2, ip, #0
 800a9a4:	00a4      	lsls	r4, r4, #2
 800a9a6:	e9cd 1006 	strd	r1, r0, [sp, #24]
 800a9aa:	9303      	str	r3, [sp, #12]
 800a9ac:	9204      	str	r2, [sp, #16]
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4262      	negs	r2, r4
 800a9b2:	9205      	str	r2, [sp, #20]
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800a9ba:	9b02      	ldr	r3, [sp, #8]
 800a9bc:	9a07      	ldr	r2, [sp, #28]
 800a9be:	60bd      	str	r5, [r7, #8]
 800a9c0:	609e      	str	r6, [r3, #8]
 800a9c2:	9b06      	ldr	r3, [sp, #24]
 800a9c4:	6992      	ldr	r2, [r2, #24]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	6894      	ldr	r4, [r2, #8]
 800a9ca:	9a03      	ldr	r2, [sp, #12]
 800a9cc:	689b      	ldr	r3, [r3, #8]
 800a9ce:	2a01      	cmp	r2, #1
 800a9d0:	ed93 8a00 	vldr	s16, [r3]
 800a9d4:	d940      	bls.n	800aa58 <nl_func_sm_array_f32+0xf0>
 800a9d6:	9901      	ldr	r1, [sp, #4]
 800a9d8:	1d1a      	adds	r2, r3, #4
 800a9da:	eb03 0b01 	add.w	fp, r3, r1
 800a9de:	ecf2 7a01 	vldmia	r2!, {s15}
 800a9e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800a9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9ea:	bfb8      	it	lt
 800a9ec:	eeb0 8a67 	vmovlt.f32	s16, s15
 800a9f0:	4593      	cmp	fp, r2
 800a9f2:	d1f4      	bne.n	800a9de <nl_func_sm_array_f32+0x76>
 800a9f4:	eddf 8a1b 	vldr	s17, [pc, #108]	; 800aa64 <nl_func_sm_array_f32+0xfc>
 800a9f8:	469a      	mov	sl, r3
 800a9fa:	46a1      	mov	r9, r4
 800a9fc:	46a0      	mov	r8, r4
 800a9fe:	ecba 0a01 	vldmia	sl!, {s0}
 800aa02:	ee30 0a48 	vsub.f32	s0, s0, s16
 800aa06:	f003 f819 	bl	800da3c <expf>
 800aa0a:	45d3      	cmp	fp, sl
 800aa0c:	eca8 0a01 	vstmia	r8!, {s0}
 800aa10:	ee78 8a80 	vadd.f32	s17, s17, s0
 800aa14:	d1f3      	bne.n	800a9fe <nl_func_sm_array_f32+0x96>
 800aa16:	eef5 8a40 	vcmp.f32	s17, #0.0
 800aa1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa1e:	d00b      	beq.n	800aa38 <nl_func_sm_array_f32+0xd0>
 800aa20:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800aa24:	9b01      	ldr	r3, [sp, #4]
 800aa26:	441c      	add	r4, r3
 800aa28:	edd9 7a00 	vldr	s15, [r9]
 800aa2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa30:	ece9 7a01 	vstmia	r9!, {s15}
 800aa34:	454c      	cmp	r4, r9
 800aa36:	d1f7      	bne.n	800aa28 <nl_func_sm_array_f32+0xc0>
 800aa38:	9b04      	ldr	r3, [sp, #16]
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	441d      	add	r5, r3
 800aa3e:	9b05      	ldr	r3, [sp, #20]
 800aa40:	42aa      	cmp	r2, r5
 800aa42:	441e      	add	r6, r3
 800aa44:	d9b9      	bls.n	800a9ba <nl_func_sm_array_f32+0x52>
 800aa46:	60ba      	str	r2, [r7, #8]
 800aa48:	9a02      	ldr	r2, [sp, #8]
 800aa4a:	68d3      	ldr	r3, [r2, #12]
 800aa4c:	6093      	str	r3, [r2, #8]
 800aa4e:	b009      	add	sp, #36	; 0x24
 800aa50:	ecbd 8b04 	vpop	{d8-d9}
 800aa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa58:	2a00      	cmp	r2, #0
 800aa5a:	d0ed      	beq.n	800aa38 <nl_func_sm_array_f32+0xd0>
 800aa5c:	9a01      	ldr	r2, [sp, #4]
 800aa5e:	eb03 0b02 	add.w	fp, r3, r2
 800aa62:	e7c7      	b.n	800a9f4 <nl_func_sm_array_f32+0x8c>
 800aa64:	00000000 	.word	0x00000000

0800aa68 <nl_func_relu_generic_array_f32>:
 800aa68:	b430      	push	{r4, r5}
 800aa6a:	6989      	ldr	r1, [r1, #24]
 800aa6c:	6980      	ldr	r0, [r0, #24]
 800aa6e:	edd3 6a02 	vldr	s13, [r3, #8]
 800aa72:	688c      	ldr	r4, [r1, #8]
 800aa74:	6880      	ldr	r0, [r0, #8]
 800aa76:	ed93 7a00 	vldr	s14, [r3]
 800aa7a:	ed93 6a01 	vldr	s12, [r3, #4]
 800aa7e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800aa82:	3a01      	subs	r2, #1
 800aa84:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800aa88:	0092      	lsls	r2, r2, #2
 800aa8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa8e:	4410      	add	r0, r2
 800aa90:	4422      	add	r2, r4
 800aa92:	d421      	bmi.n	800aad8 <nl_func_relu_generic_array_f32+0x70>
 800aa94:	4294      	cmp	r4, r2
 800aa96:	d83d      	bhi.n	800ab14 <nl_func_relu_generic_array_f32+0xac>
 800aa98:	1d13      	adds	r3, r2, #4
 800aa9a:	1d02      	adds	r2, r0, #4
 800aa9c:	e010      	b.n	800aac0 <nl_func_relu_generic_array_f32+0x58>
 800aa9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaa6:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800aaaa:	d501      	bpl.n	800aab0 <nl_func_relu_generic_array_f32+0x48>
 800aaac:	ee65 7a86 	vmul.f32	s15, s11, s12
 800aab0:	ed62 7a01 	vstmdb	r2!, {s15}
 800aab4:	6888      	ldr	r0, [r1, #8]
 800aab6:	f1a3 0408 	sub.w	r4, r3, #8
 800aaba:	4284      	cmp	r4, r0
 800aabc:	462b      	mov	r3, r5
 800aabe:	d329      	bcc.n	800ab14 <nl_func_relu_generic_array_f32+0xac>
 800aac0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800aac4:	eef4 7ae6 	vcmpe.f32	s15, s13
 800aac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aacc:	f1a3 0504 	sub.w	r5, r3, #4
 800aad0:	d4e5      	bmi.n	800aa9e <nl_func_relu_generic_array_f32+0x36>
 800aad2:	eef0 7a66 	vmov.f32	s15, s13
 800aad6:	e7eb      	b.n	800aab0 <nl_func_relu_generic_array_f32+0x48>
 800aad8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800aadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae0:	d01a      	beq.n	800ab18 <nl_func_relu_generic_array_f32+0xb0>
 800aae2:	4294      	cmp	r4, r2
 800aae4:	d816      	bhi.n	800ab14 <nl_func_relu_generic_array_f32+0xac>
 800aae6:	1d13      	adds	r3, r2, #4
 800aae8:	1d02      	adds	r2, r0, #4
 800aaea:	ed53 7a01 	vldr	s15, [r3, #-4]
 800aaee:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800aaf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aaf6:	f1a3 0408 	sub.w	r4, r3, #8
 800aafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aafe:	f1a3 0004 	sub.w	r0, r3, #4
 800ab02:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ab06:	4623      	mov	r3, r4
 800ab08:	d51e      	bpl.n	800ab48 <nl_func_relu_generic_array_f32+0xe0>
 800ab0a:	ed62 6a01 	vstmdb	r2!, {s13}
 800ab0e:	688b      	ldr	r3, [r1, #8]
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	d91e      	bls.n	800ab52 <nl_func_relu_generic_array_f32+0xea>
 800ab14:	bc30      	pop	{r4, r5}
 800ab16:	4770      	bx	lr
 800ab18:	4294      	cmp	r4, r2
 800ab1a:	d8fb      	bhi.n	800ab14 <nl_func_relu_generic_array_f32+0xac>
 800ab1c:	1d13      	adds	r3, r2, #4
 800ab1e:	2500      	movs	r5, #0
 800ab20:	1d02      	adds	r2, r0, #4
 800ab22:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ab26:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ab2a:	f1a3 0408 	sub.w	r4, r3, #8
 800ab2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab32:	f1a3 0004 	sub.w	r0, r3, #4
 800ab36:	4623      	mov	r3, r4
 800ab38:	db0d      	blt.n	800ab56 <nl_func_relu_generic_array_f32+0xee>
 800ab3a:	ed62 7a01 	vstmdb	r2!, {s15}
 800ab3e:	688b      	ldr	r3, [r1, #8]
 800ab40:	42a3      	cmp	r3, r4
 800ab42:	d8e7      	bhi.n	800ab14 <nl_func_relu_generic_array_f32+0xac>
 800ab44:	4603      	mov	r3, r0
 800ab46:	e7ec      	b.n	800ab22 <nl_func_relu_generic_array_f32+0xba>
 800ab48:	ed62 7a01 	vstmdb	r2!, {s15}
 800ab4c:	688c      	ldr	r4, [r1, #8]
 800ab4e:	429c      	cmp	r4, r3
 800ab50:	d8e0      	bhi.n	800ab14 <nl_func_relu_generic_array_f32+0xac>
 800ab52:	4603      	mov	r3, r0
 800ab54:	e7c9      	b.n	800aaea <nl_func_relu_generic_array_f32+0x82>
 800ab56:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ab5a:	688c      	ldr	r4, [r1, #8]
 800ab5c:	429c      	cmp	r4, r3
 800ab5e:	d8d9      	bhi.n	800ab14 <nl_func_relu_generic_array_f32+0xac>
 800ab60:	4603      	mov	r3, r0
 800ab62:	e7de      	b.n	800ab22 <nl_func_relu_generic_array_f32+0xba>

0800ab64 <forward_relu>:
 800ab64:	6982      	ldr	r2, [r0, #24]
 800ab66:	8813      	ldrh	r3, [r2, #0]
 800ab68:	b333      	cbz	r3, 800abb8 <forward_relu+0x54>
 800ab6a:	6852      	ldr	r2, [r2, #4]
 800ab6c:	6851      	ldr	r1, [r2, #4]
 800ab6e:	b101      	cbz	r1, 800ab72 <forward_relu+0xe>
 800ab70:	6809      	ldr	r1, [r1, #0]
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d91d      	bls.n	800abb2 <forward_relu+0x4e>
 800ab76:	b4f0      	push	{r4, r5, r6, r7}
 800ab78:	6917      	ldr	r7, [r2, #16]
 800ab7a:	b107      	cbz	r7, 800ab7e <forward_relu+0x1a>
 800ab7c:	683f      	ldr	r7, [r7, #0]
 800ab7e:	688c      	ldr	r4, [r1, #8]
 800ab80:	69c3      	ldr	r3, [r0, #28]
 800ab82:	f3c4 2417 	ubfx	r4, r4, #8, #24
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d044      	beq.n	800ac14 <forward_relu+0xb0>
 800ab8a:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 800ab8e:	2d01      	cmp	r5, #1
 800ab90:	d014      	beq.n	800abbc <forward_relu+0x58>
 800ab92:	2c00      	cmp	r4, #0
 800ab94:	d074      	beq.n	800ac80 <forward_relu+0x11c>
 800ab96:	68ce      	ldr	r6, [r1, #12]
 800ab98:	2201      	movs	r2, #1
 800ab9a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800ab9e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aba2:	42a6      	cmp	r6, r4
 800aba4:	fb05 f202 	mul.w	r2, r5, r2
 800aba8:	d1f9      	bne.n	800ab9e <forward_relu+0x3a>
 800abaa:	4638      	mov	r0, r7
 800abac:	bcf0      	pop	{r4, r5, r6, r7}
 800abae:	f7ff bf5b 	b.w	800aa68 <nl_func_relu_generic_array_f32>
 800abb2:	2300      	movs	r3, #0
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	deff      	udf	#255	; 0xff
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	deff      	udf	#255	; 0xff
 800abbc:	69ba      	ldr	r2, [r7, #24]
 800abbe:	6988      	ldr	r0, [r1, #24]
 800abc0:	6896      	ldr	r6, [r2, #8]
 800abc2:	ed93 7a00 	vldr	s14, [r3]
 800abc6:	6882      	ldr	r2, [r0, #8]
 800abc8:	b184      	cbz	r4, 800abec <forward_relu+0x88>
 800abca:	68cf      	ldr	r7, [r1, #12]
 800abcc:	462b      	mov	r3, r5
 800abce:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800abd2:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800abd6:	42a7      	cmp	r7, r4
 800abd8:	fb01 f303 	mul.w	r3, r1, r3
 800abdc:	d1f9      	bne.n	800abd2 <forward_relu+0x6e>
 800abde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800abe2:	3b01      	subs	r3, #1
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	18d2      	adds	r2, r2, r3
 800abe8:	441e      	add	r6, r3
 800abea:	d23f      	bcs.n	800ac6c <forward_relu+0x108>
 800abec:	1d13      	adds	r3, r2, #4
 800abee:	2500      	movs	r5, #0
 800abf0:	1d32      	adds	r2, r6, #4
 800abf2:	ed53 7a01 	vldr	s15, [r3, #-4]
 800abf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800abfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abfe:	f1a3 0104 	sub.w	r1, r3, #4
 800ac02:	d835      	bhi.n	800ac70 <forward_relu+0x10c>
 800ac04:	ed62 7a01 	vstmdb	r2!, {s15}
 800ac08:	6884      	ldr	r4, [r0, #8]
 800ac0a:	3b08      	subs	r3, #8
 800ac0c:	429c      	cmp	r4, r3
 800ac0e:	d82d      	bhi.n	800ac6c <forward_relu+0x108>
 800ac10:	460b      	mov	r3, r1
 800ac12:	e7ee      	b.n	800abf2 <forward_relu+0x8e>
 800ac14:	69bb      	ldr	r3, [r7, #24]
 800ac16:	698d      	ldr	r5, [r1, #24]
 800ac18:	6898      	ldr	r0, [r3, #8]
 800ac1a:	68ab      	ldr	r3, [r5, #8]
 800ac1c:	b184      	cbz	r4, 800ac40 <forward_relu+0xdc>
 800ac1e:	68ce      	ldr	r6, [r1, #12]
 800ac20:	2201      	movs	r2, #1
 800ac22:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800ac26:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 800ac2a:	42a6      	cmp	r6, r4
 800ac2c:	fb01 f202 	mul.w	r2, r1, r2
 800ac30:	d1f9      	bne.n	800ac26 <forward_relu+0xc2>
 800ac32:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ac36:	3a01      	subs	r2, #1
 800ac38:	0092      	lsls	r2, r2, #2
 800ac3a:	189b      	adds	r3, r3, r2
 800ac3c:	4410      	add	r0, r2
 800ac3e:	d215      	bcs.n	800ac6c <forward_relu+0x108>
 800ac40:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800ac84 <forward_relu+0x120>
 800ac44:	3304      	adds	r3, #4
 800ac46:	1d01      	adds	r1, r0, #4
 800ac48:	ed53 7a01 	vldr	s15, [r3, #-4]
 800ac4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ac50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac54:	bfb8      	it	lt
 800ac56:	eef0 7a47 	vmovlt.f32	s15, s14
 800ac5a:	ed61 7a01 	vstmdb	r1!, {s15}
 800ac5e:	68a8      	ldr	r0, [r5, #8]
 800ac60:	f1a3 0208 	sub.w	r2, r3, #8
 800ac64:	4290      	cmp	r0, r2
 800ac66:	f1a3 0304 	sub.w	r3, r3, #4
 800ac6a:	d9ed      	bls.n	800ac48 <forward_relu+0xe4>
 800ac6c:	bcf0      	pop	{r4, r5, r6, r7}
 800ac6e:	4770      	bx	lr
 800ac70:	f842 5d04 	str.w	r5, [r2, #-4]!
 800ac74:	6884      	ldr	r4, [r0, #8]
 800ac76:	3b08      	subs	r3, #8
 800ac78:	429c      	cmp	r4, r3
 800ac7a:	d8f7      	bhi.n	800ac6c <forward_relu+0x108>
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	e7b8      	b.n	800abf2 <forward_relu+0x8e>
 800ac80:	2201      	movs	r2, #1
 800ac82:	e792      	b.n	800abaa <forward_relu+0x46>
 800ac84:	00000000 	.word	0x00000000

0800ac88 <forward_sm>:
 800ac88:	6982      	ldr	r2, [r0, #24]
 800ac8a:	8813      	ldrh	r3, [r2, #0]
 800ac8c:	b32b      	cbz	r3, 800acda <forward_sm+0x52>
 800ac8e:	6852      	ldr	r2, [r2, #4]
 800ac90:	6851      	ldr	r1, [r2, #4]
 800ac92:	b101      	cbz	r1, 800ac96 <forward_sm+0xe>
 800ac94:	6809      	ldr	r1, [r1, #0]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d91c      	bls.n	800acd4 <forward_sm+0x4c>
 800ac9a:	6913      	ldr	r3, [r2, #16]
 800ac9c:	b1c3      	cbz	r3, 800acd0 <forward_sm+0x48>
 800ac9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aca0:	6818      	ldr	r0, [r3, #0]
 800aca2:	688c      	ldr	r4, [r1, #8]
 800aca4:	68c3      	ldr	r3, [r0, #12]
 800aca6:	68ce      	ldr	r6, [r1, #12]
 800aca8:	685f      	ldr	r7, [r3, #4]
 800acaa:	6873      	ldr	r3, [r6, #4]
 800acac:	0a24      	lsrs	r4, r4, #8
 800acae:	b083      	sub	sp, #12
 800acb0:	d015      	beq.n	800acde <forward_sm+0x56>
 800acb2:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800acb6:	2201      	movs	r2, #1
 800acb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800acbc:	42a6      	cmp	r6, r4
 800acbe:	fb05 f202 	mul.w	r2, r5, r2
 800acc2:	d1f9      	bne.n	800acb8 <forward_sm+0x30>
 800acc4:	e9cd 3700 	strd	r3, r7, [sp]
 800acc8:	f7ff fe4e 	bl	800a968 <nl_func_sm_array_f32>
 800accc:	b003      	add	sp, #12
 800acce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	deff      	udf	#255	; 0xff
 800acd4:	2300      	movs	r3, #0
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	deff      	udf	#255	; 0xff
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	deff      	udf	#255	; 0xff
 800acde:	2201      	movs	r2, #1
 800ace0:	e9cd 3700 	strd	r3, r7, [sp]
 800ace4:	f7ff fe40 	bl	800a968 <nl_func_sm_array_f32>
 800ace8:	b003      	add	sp, #12
 800acea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800acec <ai_check_custom_types>:
 800acec:	4b13      	ldr	r3, [pc, #76]	; (800ad3c <ai_check_custom_types+0x50>)
 800acee:	b082      	sub	sp, #8
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	b118      	cbz	r0, 800acfe <ai_check_custom_types+0x12>
 800acf6:	7803      	ldrb	r3, [r0, #0]
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d002      	beq.n	800ad02 <ai_check_custom_types+0x16>
 800acfc:	2000      	movs	r0, #0
 800acfe:	b002      	add	sp, #8
 800ad00:	4770      	bx	lr
 800ad02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d004      	beq.n	800ad14 <ai_check_custom_types+0x28>
 800ad0a:	2001      	movs	r0, #1
 800ad0c:	f080 0001 	eor.w	r0, r0, #1
 800ad10:	b002      	add	sp, #8
 800ad12:	4770      	bx	lr
 800ad14:	7842      	ldrb	r2, [r0, #1]
 800ad16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	f100 0001 	add.w	r0, r0, #1
 800ad20:	d1f3      	bne.n	800ad0a <ai_check_custom_types+0x1e>
 800ad22:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800ad26:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d1ed      	bne.n	800ad0a <ai_check_custom_types+0x1e>
 800ad2e:	7842      	ldrb	r2, [r0, #1]
 800ad30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d1e8      	bne.n	800ad0a <ai_check_custom_types+0x1e>
 800ad38:	2000      	movs	r0, #0
 800ad3a:	e7e7      	b.n	800ad0c <ai_check_custom_types+0x20>
 800ad3c:	0800ddf8 	.word	0x0800ddf8

0800ad40 <ai_layers_init_all>:
 800ad40:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ad42:	b17a      	cbz	r2, 800ad64 <ai_layers_init_all+0x24>
 800ad44:	6913      	ldr	r3, [r2, #16]
 800ad46:	60d0      	str	r0, [r2, #12]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	f04f 0201 	mov.w	r2, #1
 800ad4e:	d009      	beq.n	800ad64 <ai_layers_init_all+0x24>
 800ad50:	b143      	cbz	r3, 800ad64 <ai_layers_init_all+0x24>
 800ad52:	6919      	ldr	r1, [r3, #16]
 800ad54:	60d8      	str	r0, [r3, #12]
 800ad56:	4299      	cmp	r1, r3
 800ad58:	f102 0201 	add.w	r2, r2, #1
 800ad5c:	d002      	beq.n	800ad64 <ai_layers_init_all+0x24>
 800ad5e:	460b      	mov	r3, r1
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1f6      	bne.n	800ad52 <ai_layers_init_all+0x12>
 800ad64:	4610      	mov	r0, r2
 800ad66:	4770      	bx	lr

0800ad68 <ai_layers_post_init_all>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ad6c:	b18c      	cbz	r4, 800ad92 <ai_layers_post_init_all+0x2a>
 800ad6e:	2500      	movs	r5, #0
 800ad70:	6863      	ldr	r3, [r4, #4]
 800ad72:	f013 0f01 	tst.w	r3, #1
 800ad76:	4620      	mov	r0, r4
 800ad78:	d003      	beq.n	800ad82 <ai_layers_post_init_all+0x1a>
 800ad7a:	6a23      	ldr	r3, [r4, #32]
 800ad7c:	b10b      	cbz	r3, 800ad82 <ai_layers_post_init_all+0x1a>
 800ad7e:	4798      	blx	r3
 800ad80:	3501      	adds	r5, #1
 800ad82:	6923      	ldr	r3, [r4, #16]
 800ad84:	42a3      	cmp	r3, r4
 800ad86:	d002      	beq.n	800ad8e <ai_layers_post_init_all+0x26>
 800ad88:	461c      	mov	r4, r3
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1f0      	bne.n	800ad70 <ai_layers_post_init_all+0x8>
 800ad8e:	4628      	mov	r0, r5
 800ad90:	bd38      	pop	{r3, r4, r5, pc}
 800ad92:	4625      	mov	r5, r4
 800ad94:	e7fb      	b.n	800ad8e <ai_layers_post_init_all+0x26>
 800ad96:	bf00      	nop

0800ad98 <ai_layers_forward_all>:
 800ad98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9c:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800ad9e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800ada0:	4604      	mov	r4, r0
 800ada2:	2f00      	cmp	r7, #0
 800ada4:	d02c      	beq.n	800ae00 <ai_layers_forward_all+0x68>
 800ada6:	2d00      	cmp	r5, #0
 800ada8:	d03f      	beq.n	800ae2a <ai_layers_forward_all+0x92>
 800adaa:	6385      	str	r5, [r0, #56]	; 0x38
 800adac:	4629      	mov	r1, r5
 800adae:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800adb0:	2001      	movs	r0, #1
 800adb2:	47b8      	blx	r7
 800adb4:	2600      	movs	r6, #0
 800adb6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800adb8:	46b0      	mov	r8, r6
 800adba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800adbc:	2002      	movs	r0, #2
 800adbe:	47b8      	blx	r7
 800adc0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800adc2:	696b      	ldr	r3, [r5, #20]
 800adc4:	4628      	mov	r0, r5
 800adc6:	4798      	blx	r3
 800adc8:	692b      	ldr	r3, [r5, #16]
 800adca:	429d      	cmp	r5, r3
 800adcc:	f04f 0003 	mov.w	r0, #3
 800add0:	4619      	mov	r1, r3
 800add2:	d009      	beq.n	800ade8 <ai_layers_forward_all+0x50>
 800add4:	63a3      	str	r3, [r4, #56]	; 0x38
 800add6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800add8:	47b8      	blx	r7
 800adda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800addc:	3601      	adds	r6, #1
 800adde:	2900      	cmp	r1, #0
 800ade0:	d1eb      	bne.n	800adba <ai_layers_forward_all+0x22>
 800ade2:	4630      	mov	r0, r6
 800ade4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ade8:	2100      	movs	r1, #0
 800adea:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 800adee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800adf0:	47b8      	blx	r7
 800adf2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800adf4:	3601      	adds	r6, #1
 800adf6:	2900      	cmp	r1, #0
 800adf8:	d1df      	bne.n	800adba <ai_layers_forward_all+0x22>
 800adfa:	4630      	mov	r0, r6
 800adfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae00:	b19d      	cbz	r5, 800ae2a <ai_layers_forward_all+0x92>
 800ae02:	6385      	str	r5, [r0, #56]	; 0x38
 800ae04:	463e      	mov	r6, r7
 800ae06:	696b      	ldr	r3, [r5, #20]
 800ae08:	4628      	mov	r0, r5
 800ae0a:	4798      	blx	r3
 800ae0c:	692b      	ldr	r3, [r5, #16]
 800ae0e:	42ab      	cmp	r3, r5
 800ae10:	f106 0601 	add.w	r6, r6, #1
 800ae14:	d004      	beq.n	800ae20 <ai_layers_forward_all+0x88>
 800ae16:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae18:	461d      	mov	r5, r3
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1f3      	bne.n	800ae06 <ai_layers_forward_all+0x6e>
 800ae1e:	e7e0      	b.n	800ade2 <ai_layers_forward_all+0x4a>
 800ae20:	2300      	movs	r3, #0
 800ae22:	63a3      	str	r3, [r4, #56]	; 0x38
 800ae24:	4630      	mov	r0, r6
 800ae26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2a:	462e      	mov	r6, r5
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae32:	bf00      	nop

0800ae34 <ai_version_get>:
 800ae34:	0212      	lsls	r2, r2, #8
 800ae36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ae3a:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800ae3e:	4770      	bx	lr

0800ae40 <get_tensor_byte_size>:
 800ae40:	6983      	ldr	r3, [r0, #24]
 800ae42:	68c1      	ldr	r1, [r0, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	6940      	ldr	r0, [r0, #20]
 800ae48:	4a06      	ldr	r2, [pc, #24]	; (800ae64 <get_tensor_byte_size+0x24>)
 800ae4a:	68c9      	ldr	r1, [r1, #12]
 800ae4c:	68c0      	ldr	r0, [r0, #12]
 800ae4e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 800ae52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ae56:	fb00 f001 	mul.w	r0, r0, r1
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	bf04      	itt	eq
 800ae5e:	3007      	addeq	r0, #7
 800ae60:	08c0      	lsreq	r0, r0, #3
 800ae62:	4770      	bx	lr
 800ae64:	000400c0 	.word	0x000400c0

0800ae68 <ai_array_to_buffer_fmt>:
 800ae68:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d036      	beq.n	800aede <ai_array_to_buffer_fmt+0x76>
 800ae70:	4a21      	ldr	r2, [pc, #132]	; (800aef8 <ai_array_to_buffer_fmt+0x90>)
 800ae72:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d00f      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800ae7a:	dd12      	ble.n	800aea2 <ai_array_to_buffer_fmt+0x3a>
 800ae7c:	4a1f      	ldr	r2, [pc, #124]	; (800aefc <ai_array_to_buffer_fmt+0x94>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d00b      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800ae82:	dd1e      	ble.n	800aec2 <ai_array_to_buffer_fmt+0x5a>
 800ae84:	4a1e      	ldr	r2, [pc, #120]	; (800af00 <ai_array_to_buffer_fmt+0x98>)
 800ae86:	4293      	cmp	r3, r2
 800ae88:	d007      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800ae8a:	dd30      	ble.n	800aeee <ai_array_to_buffer_fmt+0x86>
 800ae8c:	4a1d      	ldr	r2, [pc, #116]	; (800af04 <ai_array_to_buffer_fmt+0x9c>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d003      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800ae92:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d11f      	bne.n	800aeda <ai_array_to_buffer_fmt+0x72>
 800ae9a:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ae9e:	4318      	orrs	r0, r3
 800aea0:	4770      	bx	lr
 800aea2:	4a19      	ldr	r2, [pc, #100]	; (800af08 <ai_array_to_buffer_fmt+0xa0>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d0f8      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800aea8:	dd0b      	ble.n	800aec2 <ai_array_to_buffer_fmt+0x5a>
 800aeaa:	4a18      	ldr	r2, [pc, #96]	; (800af0c <ai_array_to_buffer_fmt+0xa4>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d0f4      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800aeb0:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d0f0      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800aeb8:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d10c      	bne.n	800aeda <ai_array_to_buffer_fmt+0x72>
 800aec0:	e7eb      	b.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800aec2:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d0e7      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800aeca:	f502 7260 	add.w	r2, r2, #896	; 0x380
 800aece:	4293      	cmp	r3, r2
 800aed0:	d0e3      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800aed2:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d0df      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800aeda:	2340      	movs	r3, #64	; 0x40
 800aedc:	e7dd      	b.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800aede:	4b0c      	ldr	r3, [pc, #48]	; (800af10 <ai_array_to_buffer_fmt+0xa8>)
 800aee0:	4003      	ands	r3, r0
 800aee2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aee6:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800aeea:	4318      	orrs	r0, r3
 800aeec:	4770      	bx	lr
 800aeee:	3a0f      	subs	r2, #15
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d0d2      	beq.n	800ae9a <ai_array_to_buffer_fmt+0x32>
 800aef4:	e7f1      	b.n	800aeda <ai_array_to_buffer_fmt+0x72>
 800aef6:	bf00      	nop
 800aef8:	00060440 	.word	0x00060440
 800aefc:	00840447 	.word	0x00840447
 800af00:	0084084f 	.word	0x0084084f
 800af04:	00841040 	.word	0x00841040
 800af08:	00040447 	.word	0x00040447
 800af0c:	0004084f 	.word	0x0004084f
 800af10:	00803fff 	.word	0x00803fff

0800af14 <ai_array_get_byte_size>:
 800af14:	b1c1      	cbz	r1, 800af48 <ai_array_get_byte_size+0x34>
 800af16:	11c3      	asrs	r3, r0, #7
 800af18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af1c:	fb01 f102 	mul.w	r1, r1, r2
 800af20:	3107      	adds	r1, #7
 800af22:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800af26:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800af2a:	f021 0107 	bic.w	r1, r1, #7
 800af2e:	2804      	cmp	r0, #4
 800af30:	fa21 f102 	lsr.w	r1, r1, r2
 800af34:	d00a      	beq.n	800af4c <ai_array_get_byte_size+0x38>
 800af36:	2808      	cmp	r0, #8
 800af38:	d103      	bne.n	800af42 <ai_array_get_byte_size+0x2e>
 800af3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af3e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800af42:	3107      	adds	r1, #7
 800af44:	08c8      	lsrs	r0, r1, #3
 800af46:	4770      	bx	lr
 800af48:	4608      	mov	r0, r1
 800af4a:	4770      	bx	lr
 800af4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af50:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800af54:	3107      	adds	r1, #7
 800af56:	08c8      	lsrs	r0, r1, #3
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop

0800af5c <ai_array_get_data_byte_size>:
 800af5c:	b161      	cbz	r1, 800af78 <ai_array_get_data_byte_size+0x1c>
 800af5e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800af62:	fb01 f103 	mul.w	r1, r1, r3
 800af66:	3107      	adds	r1, #7
 800af68:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800af6c:	f021 0107 	bic.w	r1, r1, #7
 800af70:	40c1      	lsrs	r1, r0
 800af72:	3107      	adds	r1, #7
 800af74:	08c8      	lsrs	r0, r1, #3
 800af76:	4770      	bx	lr
 800af78:	4608      	mov	r0, r1
 800af7a:	4770      	bx	lr

0800af7c <__errno>:
 800af7c:	4b01      	ldr	r3, [pc, #4]	; (800af84 <__errno+0x8>)
 800af7e:	6818      	ldr	r0, [r3, #0]
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	20000878 	.word	0x20000878

0800af88 <__libc_init_array>:
 800af88:	b570      	push	{r4, r5, r6, lr}
 800af8a:	4d0d      	ldr	r5, [pc, #52]	; (800afc0 <__libc_init_array+0x38>)
 800af8c:	4c0d      	ldr	r4, [pc, #52]	; (800afc4 <__libc_init_array+0x3c>)
 800af8e:	1b64      	subs	r4, r4, r5
 800af90:	10a4      	asrs	r4, r4, #2
 800af92:	2600      	movs	r6, #0
 800af94:	42a6      	cmp	r6, r4
 800af96:	d109      	bne.n	800afac <__libc_init_array+0x24>
 800af98:	4d0b      	ldr	r5, [pc, #44]	; (800afc8 <__libc_init_array+0x40>)
 800af9a:	4c0c      	ldr	r4, [pc, #48]	; (800afcc <__libc_init_array+0x44>)
 800af9c:	f002 febc 	bl	800dd18 <_init>
 800afa0:	1b64      	subs	r4, r4, r5
 800afa2:	10a4      	asrs	r4, r4, #2
 800afa4:	2600      	movs	r6, #0
 800afa6:	42a6      	cmp	r6, r4
 800afa8:	d105      	bne.n	800afb6 <__libc_init_array+0x2e>
 800afaa:	bd70      	pop	{r4, r5, r6, pc}
 800afac:	f855 3b04 	ldr.w	r3, [r5], #4
 800afb0:	4798      	blx	r3
 800afb2:	3601      	adds	r6, #1
 800afb4:	e7ee      	b.n	800af94 <__libc_init_array+0xc>
 800afb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800afba:	4798      	blx	r3
 800afbc:	3601      	adds	r6, #1
 800afbe:	e7f2      	b.n	800afa6 <__libc_init_array+0x1e>
 800afc0:	08019f2c 	.word	0x08019f2c
 800afc4:	08019f2c 	.word	0x08019f2c
 800afc8:	08019f2c 	.word	0x08019f2c
 800afcc:	08019f30 	.word	0x08019f30

0800afd0 <malloc>:
 800afd0:	4b02      	ldr	r3, [pc, #8]	; (800afdc <malloc+0xc>)
 800afd2:	4601      	mov	r1, r0
 800afd4:	6818      	ldr	r0, [r3, #0]
 800afd6:	f000 b885 	b.w	800b0e4 <_malloc_r>
 800afda:	bf00      	nop
 800afdc:	20000878 	.word	0x20000878

0800afe0 <memcpy>:
 800afe0:	440a      	add	r2, r1
 800afe2:	4291      	cmp	r1, r2
 800afe4:	f100 33ff 	add.w	r3, r0, #4294967295
 800afe8:	d100      	bne.n	800afec <memcpy+0xc>
 800afea:	4770      	bx	lr
 800afec:	b510      	push	{r4, lr}
 800afee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aff2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aff6:	4291      	cmp	r1, r2
 800aff8:	d1f9      	bne.n	800afee <memcpy+0xe>
 800affa:	bd10      	pop	{r4, pc}

0800affc <memset>:
 800affc:	4402      	add	r2, r0
 800affe:	4603      	mov	r3, r0
 800b000:	4293      	cmp	r3, r2
 800b002:	d100      	bne.n	800b006 <memset+0xa>
 800b004:	4770      	bx	lr
 800b006:	f803 1b01 	strb.w	r1, [r3], #1
 800b00a:	e7f9      	b.n	800b000 <memset+0x4>

0800b00c <_free_r>:
 800b00c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b00e:	2900      	cmp	r1, #0
 800b010:	d044      	beq.n	800b09c <_free_r+0x90>
 800b012:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b016:	9001      	str	r0, [sp, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f1a1 0404 	sub.w	r4, r1, #4
 800b01e:	bfb8      	it	lt
 800b020:	18e4      	addlt	r4, r4, r3
 800b022:	f001 fcdd 	bl	800c9e0 <__malloc_lock>
 800b026:	4a1e      	ldr	r2, [pc, #120]	; (800b0a0 <_free_r+0x94>)
 800b028:	9801      	ldr	r0, [sp, #4]
 800b02a:	6813      	ldr	r3, [r2, #0]
 800b02c:	b933      	cbnz	r3, 800b03c <_free_r+0x30>
 800b02e:	6063      	str	r3, [r4, #4]
 800b030:	6014      	str	r4, [r2, #0]
 800b032:	b003      	add	sp, #12
 800b034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b038:	f001 bcd8 	b.w	800c9ec <__malloc_unlock>
 800b03c:	42a3      	cmp	r3, r4
 800b03e:	d908      	bls.n	800b052 <_free_r+0x46>
 800b040:	6825      	ldr	r5, [r4, #0]
 800b042:	1961      	adds	r1, r4, r5
 800b044:	428b      	cmp	r3, r1
 800b046:	bf01      	itttt	eq
 800b048:	6819      	ldreq	r1, [r3, #0]
 800b04a:	685b      	ldreq	r3, [r3, #4]
 800b04c:	1949      	addeq	r1, r1, r5
 800b04e:	6021      	streq	r1, [r4, #0]
 800b050:	e7ed      	b.n	800b02e <_free_r+0x22>
 800b052:	461a      	mov	r2, r3
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	b10b      	cbz	r3, 800b05c <_free_r+0x50>
 800b058:	42a3      	cmp	r3, r4
 800b05a:	d9fa      	bls.n	800b052 <_free_r+0x46>
 800b05c:	6811      	ldr	r1, [r2, #0]
 800b05e:	1855      	adds	r5, r2, r1
 800b060:	42a5      	cmp	r5, r4
 800b062:	d10b      	bne.n	800b07c <_free_r+0x70>
 800b064:	6824      	ldr	r4, [r4, #0]
 800b066:	4421      	add	r1, r4
 800b068:	1854      	adds	r4, r2, r1
 800b06a:	42a3      	cmp	r3, r4
 800b06c:	6011      	str	r1, [r2, #0]
 800b06e:	d1e0      	bne.n	800b032 <_free_r+0x26>
 800b070:	681c      	ldr	r4, [r3, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	6053      	str	r3, [r2, #4]
 800b076:	4421      	add	r1, r4
 800b078:	6011      	str	r1, [r2, #0]
 800b07a:	e7da      	b.n	800b032 <_free_r+0x26>
 800b07c:	d902      	bls.n	800b084 <_free_r+0x78>
 800b07e:	230c      	movs	r3, #12
 800b080:	6003      	str	r3, [r0, #0]
 800b082:	e7d6      	b.n	800b032 <_free_r+0x26>
 800b084:	6825      	ldr	r5, [r4, #0]
 800b086:	1961      	adds	r1, r4, r5
 800b088:	428b      	cmp	r3, r1
 800b08a:	bf04      	itt	eq
 800b08c:	6819      	ldreq	r1, [r3, #0]
 800b08e:	685b      	ldreq	r3, [r3, #4]
 800b090:	6063      	str	r3, [r4, #4]
 800b092:	bf04      	itt	eq
 800b094:	1949      	addeq	r1, r1, r5
 800b096:	6021      	streq	r1, [r4, #0]
 800b098:	6054      	str	r4, [r2, #4]
 800b09a:	e7ca      	b.n	800b032 <_free_r+0x26>
 800b09c:	b003      	add	sp, #12
 800b09e:	bd30      	pop	{r4, r5, pc}
 800b0a0:	20001acc 	.word	0x20001acc

0800b0a4 <sbrk_aligned>:
 800b0a4:	b570      	push	{r4, r5, r6, lr}
 800b0a6:	4e0e      	ldr	r6, [pc, #56]	; (800b0e0 <sbrk_aligned+0x3c>)
 800b0a8:	460c      	mov	r4, r1
 800b0aa:	6831      	ldr	r1, [r6, #0]
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	b911      	cbnz	r1, 800b0b6 <sbrk_aligned+0x12>
 800b0b0:	f000 fd0e 	bl	800bad0 <_sbrk_r>
 800b0b4:	6030      	str	r0, [r6, #0]
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4628      	mov	r0, r5
 800b0ba:	f000 fd09 	bl	800bad0 <_sbrk_r>
 800b0be:	1c43      	adds	r3, r0, #1
 800b0c0:	d00a      	beq.n	800b0d8 <sbrk_aligned+0x34>
 800b0c2:	1cc4      	adds	r4, r0, #3
 800b0c4:	f024 0403 	bic.w	r4, r4, #3
 800b0c8:	42a0      	cmp	r0, r4
 800b0ca:	d007      	beq.n	800b0dc <sbrk_aligned+0x38>
 800b0cc:	1a21      	subs	r1, r4, r0
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f000 fcfe 	bl	800bad0 <_sbrk_r>
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	d101      	bne.n	800b0dc <sbrk_aligned+0x38>
 800b0d8:	f04f 34ff 	mov.w	r4, #4294967295
 800b0dc:	4620      	mov	r0, r4
 800b0de:	bd70      	pop	{r4, r5, r6, pc}
 800b0e0:	20001ad0 	.word	0x20001ad0

0800b0e4 <_malloc_r>:
 800b0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e8:	1ccd      	adds	r5, r1, #3
 800b0ea:	f025 0503 	bic.w	r5, r5, #3
 800b0ee:	3508      	adds	r5, #8
 800b0f0:	2d0c      	cmp	r5, #12
 800b0f2:	bf38      	it	cc
 800b0f4:	250c      	movcc	r5, #12
 800b0f6:	2d00      	cmp	r5, #0
 800b0f8:	4607      	mov	r7, r0
 800b0fa:	db01      	blt.n	800b100 <_malloc_r+0x1c>
 800b0fc:	42a9      	cmp	r1, r5
 800b0fe:	d905      	bls.n	800b10c <_malloc_r+0x28>
 800b100:	230c      	movs	r3, #12
 800b102:	603b      	str	r3, [r7, #0]
 800b104:	2600      	movs	r6, #0
 800b106:	4630      	mov	r0, r6
 800b108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b10c:	4e2e      	ldr	r6, [pc, #184]	; (800b1c8 <_malloc_r+0xe4>)
 800b10e:	f001 fc67 	bl	800c9e0 <__malloc_lock>
 800b112:	6833      	ldr	r3, [r6, #0]
 800b114:	461c      	mov	r4, r3
 800b116:	bb34      	cbnz	r4, 800b166 <_malloc_r+0x82>
 800b118:	4629      	mov	r1, r5
 800b11a:	4638      	mov	r0, r7
 800b11c:	f7ff ffc2 	bl	800b0a4 <sbrk_aligned>
 800b120:	1c43      	adds	r3, r0, #1
 800b122:	4604      	mov	r4, r0
 800b124:	d14d      	bne.n	800b1c2 <_malloc_r+0xde>
 800b126:	6834      	ldr	r4, [r6, #0]
 800b128:	4626      	mov	r6, r4
 800b12a:	2e00      	cmp	r6, #0
 800b12c:	d140      	bne.n	800b1b0 <_malloc_r+0xcc>
 800b12e:	6823      	ldr	r3, [r4, #0]
 800b130:	4631      	mov	r1, r6
 800b132:	4638      	mov	r0, r7
 800b134:	eb04 0803 	add.w	r8, r4, r3
 800b138:	f000 fcca 	bl	800bad0 <_sbrk_r>
 800b13c:	4580      	cmp	r8, r0
 800b13e:	d13a      	bne.n	800b1b6 <_malloc_r+0xd2>
 800b140:	6821      	ldr	r1, [r4, #0]
 800b142:	3503      	adds	r5, #3
 800b144:	1a6d      	subs	r5, r5, r1
 800b146:	f025 0503 	bic.w	r5, r5, #3
 800b14a:	3508      	adds	r5, #8
 800b14c:	2d0c      	cmp	r5, #12
 800b14e:	bf38      	it	cc
 800b150:	250c      	movcc	r5, #12
 800b152:	4629      	mov	r1, r5
 800b154:	4638      	mov	r0, r7
 800b156:	f7ff ffa5 	bl	800b0a4 <sbrk_aligned>
 800b15a:	3001      	adds	r0, #1
 800b15c:	d02b      	beq.n	800b1b6 <_malloc_r+0xd2>
 800b15e:	6823      	ldr	r3, [r4, #0]
 800b160:	442b      	add	r3, r5
 800b162:	6023      	str	r3, [r4, #0]
 800b164:	e00e      	b.n	800b184 <_malloc_r+0xa0>
 800b166:	6822      	ldr	r2, [r4, #0]
 800b168:	1b52      	subs	r2, r2, r5
 800b16a:	d41e      	bmi.n	800b1aa <_malloc_r+0xc6>
 800b16c:	2a0b      	cmp	r2, #11
 800b16e:	d916      	bls.n	800b19e <_malloc_r+0xba>
 800b170:	1961      	adds	r1, r4, r5
 800b172:	42a3      	cmp	r3, r4
 800b174:	6025      	str	r5, [r4, #0]
 800b176:	bf18      	it	ne
 800b178:	6059      	strne	r1, [r3, #4]
 800b17a:	6863      	ldr	r3, [r4, #4]
 800b17c:	bf08      	it	eq
 800b17e:	6031      	streq	r1, [r6, #0]
 800b180:	5162      	str	r2, [r4, r5]
 800b182:	604b      	str	r3, [r1, #4]
 800b184:	4638      	mov	r0, r7
 800b186:	f104 060b 	add.w	r6, r4, #11
 800b18a:	f001 fc2f 	bl	800c9ec <__malloc_unlock>
 800b18e:	f026 0607 	bic.w	r6, r6, #7
 800b192:	1d23      	adds	r3, r4, #4
 800b194:	1af2      	subs	r2, r6, r3
 800b196:	d0b6      	beq.n	800b106 <_malloc_r+0x22>
 800b198:	1b9b      	subs	r3, r3, r6
 800b19a:	50a3      	str	r3, [r4, r2]
 800b19c:	e7b3      	b.n	800b106 <_malloc_r+0x22>
 800b19e:	6862      	ldr	r2, [r4, #4]
 800b1a0:	42a3      	cmp	r3, r4
 800b1a2:	bf0c      	ite	eq
 800b1a4:	6032      	streq	r2, [r6, #0]
 800b1a6:	605a      	strne	r2, [r3, #4]
 800b1a8:	e7ec      	b.n	800b184 <_malloc_r+0xa0>
 800b1aa:	4623      	mov	r3, r4
 800b1ac:	6864      	ldr	r4, [r4, #4]
 800b1ae:	e7b2      	b.n	800b116 <_malloc_r+0x32>
 800b1b0:	4634      	mov	r4, r6
 800b1b2:	6876      	ldr	r6, [r6, #4]
 800b1b4:	e7b9      	b.n	800b12a <_malloc_r+0x46>
 800b1b6:	230c      	movs	r3, #12
 800b1b8:	603b      	str	r3, [r7, #0]
 800b1ba:	4638      	mov	r0, r7
 800b1bc:	f001 fc16 	bl	800c9ec <__malloc_unlock>
 800b1c0:	e7a1      	b.n	800b106 <_malloc_r+0x22>
 800b1c2:	6025      	str	r5, [r4, #0]
 800b1c4:	e7de      	b.n	800b184 <_malloc_r+0xa0>
 800b1c6:	bf00      	nop
 800b1c8:	20001acc 	.word	0x20001acc

0800b1cc <__cvt>:
 800b1cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d0:	ec55 4b10 	vmov	r4, r5, d0
 800b1d4:	2d00      	cmp	r5, #0
 800b1d6:	460e      	mov	r6, r1
 800b1d8:	4619      	mov	r1, r3
 800b1da:	462b      	mov	r3, r5
 800b1dc:	bfbb      	ittet	lt
 800b1de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b1e2:	461d      	movlt	r5, r3
 800b1e4:	2300      	movge	r3, #0
 800b1e6:	232d      	movlt	r3, #45	; 0x2d
 800b1e8:	700b      	strb	r3, [r1, #0]
 800b1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b1f0:	4691      	mov	r9, r2
 800b1f2:	f023 0820 	bic.w	r8, r3, #32
 800b1f6:	bfbc      	itt	lt
 800b1f8:	4622      	movlt	r2, r4
 800b1fa:	4614      	movlt	r4, r2
 800b1fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b200:	d005      	beq.n	800b20e <__cvt+0x42>
 800b202:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b206:	d100      	bne.n	800b20a <__cvt+0x3e>
 800b208:	3601      	adds	r6, #1
 800b20a:	2102      	movs	r1, #2
 800b20c:	e000      	b.n	800b210 <__cvt+0x44>
 800b20e:	2103      	movs	r1, #3
 800b210:	ab03      	add	r3, sp, #12
 800b212:	9301      	str	r3, [sp, #4]
 800b214:	ab02      	add	r3, sp, #8
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	ec45 4b10 	vmov	d0, r4, r5
 800b21c:	4653      	mov	r3, sl
 800b21e:	4632      	mov	r2, r6
 800b220:	f000 fcf2 	bl	800bc08 <_dtoa_r>
 800b224:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b228:	4607      	mov	r7, r0
 800b22a:	d102      	bne.n	800b232 <__cvt+0x66>
 800b22c:	f019 0f01 	tst.w	r9, #1
 800b230:	d022      	beq.n	800b278 <__cvt+0xac>
 800b232:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b236:	eb07 0906 	add.w	r9, r7, r6
 800b23a:	d110      	bne.n	800b25e <__cvt+0x92>
 800b23c:	783b      	ldrb	r3, [r7, #0]
 800b23e:	2b30      	cmp	r3, #48	; 0x30
 800b240:	d10a      	bne.n	800b258 <__cvt+0x8c>
 800b242:	2200      	movs	r2, #0
 800b244:	2300      	movs	r3, #0
 800b246:	4620      	mov	r0, r4
 800b248:	4629      	mov	r1, r5
 800b24a:	f7f5 fc3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800b24e:	b918      	cbnz	r0, 800b258 <__cvt+0x8c>
 800b250:	f1c6 0601 	rsb	r6, r6, #1
 800b254:	f8ca 6000 	str.w	r6, [sl]
 800b258:	f8da 3000 	ldr.w	r3, [sl]
 800b25c:	4499      	add	r9, r3
 800b25e:	2200      	movs	r2, #0
 800b260:	2300      	movs	r3, #0
 800b262:	4620      	mov	r0, r4
 800b264:	4629      	mov	r1, r5
 800b266:	f7f5 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b26a:	b108      	cbz	r0, 800b270 <__cvt+0xa4>
 800b26c:	f8cd 900c 	str.w	r9, [sp, #12]
 800b270:	2230      	movs	r2, #48	; 0x30
 800b272:	9b03      	ldr	r3, [sp, #12]
 800b274:	454b      	cmp	r3, r9
 800b276:	d307      	bcc.n	800b288 <__cvt+0xbc>
 800b278:	9b03      	ldr	r3, [sp, #12]
 800b27a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b27c:	1bdb      	subs	r3, r3, r7
 800b27e:	4638      	mov	r0, r7
 800b280:	6013      	str	r3, [r2, #0]
 800b282:	b004      	add	sp, #16
 800b284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b288:	1c59      	adds	r1, r3, #1
 800b28a:	9103      	str	r1, [sp, #12]
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	e7f0      	b.n	800b272 <__cvt+0xa6>

0800b290 <__exponent>:
 800b290:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b292:	4603      	mov	r3, r0
 800b294:	2900      	cmp	r1, #0
 800b296:	bfb8      	it	lt
 800b298:	4249      	neglt	r1, r1
 800b29a:	f803 2b02 	strb.w	r2, [r3], #2
 800b29e:	bfb4      	ite	lt
 800b2a0:	222d      	movlt	r2, #45	; 0x2d
 800b2a2:	222b      	movge	r2, #43	; 0x2b
 800b2a4:	2909      	cmp	r1, #9
 800b2a6:	7042      	strb	r2, [r0, #1]
 800b2a8:	dd2a      	ble.n	800b300 <__exponent+0x70>
 800b2aa:	f10d 0407 	add.w	r4, sp, #7
 800b2ae:	46a4      	mov	ip, r4
 800b2b0:	270a      	movs	r7, #10
 800b2b2:	46a6      	mov	lr, r4
 800b2b4:	460a      	mov	r2, r1
 800b2b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800b2ba:	fb07 1516 	mls	r5, r7, r6, r1
 800b2be:	3530      	adds	r5, #48	; 0x30
 800b2c0:	2a63      	cmp	r2, #99	; 0x63
 800b2c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800b2c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	dcf1      	bgt.n	800b2b2 <__exponent+0x22>
 800b2ce:	3130      	adds	r1, #48	; 0x30
 800b2d0:	f1ae 0502 	sub.w	r5, lr, #2
 800b2d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b2d8:	1c44      	adds	r4, r0, #1
 800b2da:	4629      	mov	r1, r5
 800b2dc:	4561      	cmp	r1, ip
 800b2de:	d30a      	bcc.n	800b2f6 <__exponent+0x66>
 800b2e0:	f10d 0209 	add.w	r2, sp, #9
 800b2e4:	eba2 020e 	sub.w	r2, r2, lr
 800b2e8:	4565      	cmp	r5, ip
 800b2ea:	bf88      	it	hi
 800b2ec:	2200      	movhi	r2, #0
 800b2ee:	4413      	add	r3, r2
 800b2f0:	1a18      	subs	r0, r3, r0
 800b2f2:	b003      	add	sp, #12
 800b2f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b2fe:	e7ed      	b.n	800b2dc <__exponent+0x4c>
 800b300:	2330      	movs	r3, #48	; 0x30
 800b302:	3130      	adds	r1, #48	; 0x30
 800b304:	7083      	strb	r3, [r0, #2]
 800b306:	70c1      	strb	r1, [r0, #3]
 800b308:	1d03      	adds	r3, r0, #4
 800b30a:	e7f1      	b.n	800b2f0 <__exponent+0x60>

0800b30c <_printf_float>:
 800b30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b310:	ed2d 8b02 	vpush	{d8}
 800b314:	b08d      	sub	sp, #52	; 0x34
 800b316:	460c      	mov	r4, r1
 800b318:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b31c:	4616      	mov	r6, r2
 800b31e:	461f      	mov	r7, r3
 800b320:	4605      	mov	r5, r0
 800b322:	f001 fb55 	bl	800c9d0 <_localeconv_r>
 800b326:	f8d0 a000 	ldr.w	sl, [r0]
 800b32a:	4650      	mov	r0, sl
 800b32c:	f7f4 ff50 	bl	80001d0 <strlen>
 800b330:	2300      	movs	r3, #0
 800b332:	930a      	str	r3, [sp, #40]	; 0x28
 800b334:	6823      	ldr	r3, [r4, #0]
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	f8d8 3000 	ldr.w	r3, [r8]
 800b33c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b340:	3307      	adds	r3, #7
 800b342:	f023 0307 	bic.w	r3, r3, #7
 800b346:	f103 0208 	add.w	r2, r3, #8
 800b34a:	f8c8 2000 	str.w	r2, [r8]
 800b34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b352:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b356:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b35a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b35e:	9307      	str	r3, [sp, #28]
 800b360:	f8cd 8018 	str.w	r8, [sp, #24]
 800b364:	ee08 0a10 	vmov	s16, r0
 800b368:	4b9f      	ldr	r3, [pc, #636]	; (800b5e8 <_printf_float+0x2dc>)
 800b36a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b36e:	f04f 32ff 	mov.w	r2, #4294967295
 800b372:	f7f5 fbdb 	bl	8000b2c <__aeabi_dcmpun>
 800b376:	bb88      	cbnz	r0, 800b3dc <_printf_float+0xd0>
 800b378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b37c:	4b9a      	ldr	r3, [pc, #616]	; (800b5e8 <_printf_float+0x2dc>)
 800b37e:	f04f 32ff 	mov.w	r2, #4294967295
 800b382:	f7f5 fbb5 	bl	8000af0 <__aeabi_dcmple>
 800b386:	bb48      	cbnz	r0, 800b3dc <_printf_float+0xd0>
 800b388:	2200      	movs	r2, #0
 800b38a:	2300      	movs	r3, #0
 800b38c:	4640      	mov	r0, r8
 800b38e:	4649      	mov	r1, r9
 800b390:	f7f5 fba4 	bl	8000adc <__aeabi_dcmplt>
 800b394:	b110      	cbz	r0, 800b39c <_printf_float+0x90>
 800b396:	232d      	movs	r3, #45	; 0x2d
 800b398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b39c:	4b93      	ldr	r3, [pc, #588]	; (800b5ec <_printf_float+0x2e0>)
 800b39e:	4894      	ldr	r0, [pc, #592]	; (800b5f0 <_printf_float+0x2e4>)
 800b3a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b3a4:	bf94      	ite	ls
 800b3a6:	4698      	movls	r8, r3
 800b3a8:	4680      	movhi	r8, r0
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	6123      	str	r3, [r4, #16]
 800b3ae:	9b05      	ldr	r3, [sp, #20]
 800b3b0:	f023 0204 	bic.w	r2, r3, #4
 800b3b4:	6022      	str	r2, [r4, #0]
 800b3b6:	f04f 0900 	mov.w	r9, #0
 800b3ba:	9700      	str	r7, [sp, #0]
 800b3bc:	4633      	mov	r3, r6
 800b3be:	aa0b      	add	r2, sp, #44	; 0x2c
 800b3c0:	4621      	mov	r1, r4
 800b3c2:	4628      	mov	r0, r5
 800b3c4:	f000 f9d8 	bl	800b778 <_printf_common>
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	f040 8090 	bne.w	800b4ee <_printf_float+0x1e2>
 800b3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d2:	b00d      	add	sp, #52	; 0x34
 800b3d4:	ecbd 8b02 	vpop	{d8}
 800b3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3dc:	4642      	mov	r2, r8
 800b3de:	464b      	mov	r3, r9
 800b3e0:	4640      	mov	r0, r8
 800b3e2:	4649      	mov	r1, r9
 800b3e4:	f7f5 fba2 	bl	8000b2c <__aeabi_dcmpun>
 800b3e8:	b140      	cbz	r0, 800b3fc <_printf_float+0xf0>
 800b3ea:	464b      	mov	r3, r9
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	bfbc      	itt	lt
 800b3f0:	232d      	movlt	r3, #45	; 0x2d
 800b3f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b3f6:	487f      	ldr	r0, [pc, #508]	; (800b5f4 <_printf_float+0x2e8>)
 800b3f8:	4b7f      	ldr	r3, [pc, #508]	; (800b5f8 <_printf_float+0x2ec>)
 800b3fa:	e7d1      	b.n	800b3a0 <_printf_float+0x94>
 800b3fc:	6863      	ldr	r3, [r4, #4]
 800b3fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b402:	9206      	str	r2, [sp, #24]
 800b404:	1c5a      	adds	r2, r3, #1
 800b406:	d13f      	bne.n	800b488 <_printf_float+0x17c>
 800b408:	2306      	movs	r3, #6
 800b40a:	6063      	str	r3, [r4, #4]
 800b40c:	9b05      	ldr	r3, [sp, #20]
 800b40e:	6861      	ldr	r1, [r4, #4]
 800b410:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b414:	2300      	movs	r3, #0
 800b416:	9303      	str	r3, [sp, #12]
 800b418:	ab0a      	add	r3, sp, #40	; 0x28
 800b41a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b41e:	ab09      	add	r3, sp, #36	; 0x24
 800b420:	ec49 8b10 	vmov	d0, r8, r9
 800b424:	9300      	str	r3, [sp, #0]
 800b426:	6022      	str	r2, [r4, #0]
 800b428:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b42c:	4628      	mov	r0, r5
 800b42e:	f7ff fecd 	bl	800b1cc <__cvt>
 800b432:	9b06      	ldr	r3, [sp, #24]
 800b434:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b436:	2b47      	cmp	r3, #71	; 0x47
 800b438:	4680      	mov	r8, r0
 800b43a:	d108      	bne.n	800b44e <_printf_float+0x142>
 800b43c:	1cc8      	adds	r0, r1, #3
 800b43e:	db02      	blt.n	800b446 <_printf_float+0x13a>
 800b440:	6863      	ldr	r3, [r4, #4]
 800b442:	4299      	cmp	r1, r3
 800b444:	dd41      	ble.n	800b4ca <_printf_float+0x1be>
 800b446:	f1ab 0b02 	sub.w	fp, fp, #2
 800b44a:	fa5f fb8b 	uxtb.w	fp, fp
 800b44e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b452:	d820      	bhi.n	800b496 <_printf_float+0x18a>
 800b454:	3901      	subs	r1, #1
 800b456:	465a      	mov	r2, fp
 800b458:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b45c:	9109      	str	r1, [sp, #36]	; 0x24
 800b45e:	f7ff ff17 	bl	800b290 <__exponent>
 800b462:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b464:	1813      	adds	r3, r2, r0
 800b466:	2a01      	cmp	r2, #1
 800b468:	4681      	mov	r9, r0
 800b46a:	6123      	str	r3, [r4, #16]
 800b46c:	dc02      	bgt.n	800b474 <_printf_float+0x168>
 800b46e:	6822      	ldr	r2, [r4, #0]
 800b470:	07d2      	lsls	r2, r2, #31
 800b472:	d501      	bpl.n	800b478 <_printf_float+0x16c>
 800b474:	3301      	adds	r3, #1
 800b476:	6123      	str	r3, [r4, #16]
 800b478:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d09c      	beq.n	800b3ba <_printf_float+0xae>
 800b480:	232d      	movs	r3, #45	; 0x2d
 800b482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b486:	e798      	b.n	800b3ba <_printf_float+0xae>
 800b488:	9a06      	ldr	r2, [sp, #24]
 800b48a:	2a47      	cmp	r2, #71	; 0x47
 800b48c:	d1be      	bne.n	800b40c <_printf_float+0x100>
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1bc      	bne.n	800b40c <_printf_float+0x100>
 800b492:	2301      	movs	r3, #1
 800b494:	e7b9      	b.n	800b40a <_printf_float+0xfe>
 800b496:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b49a:	d118      	bne.n	800b4ce <_printf_float+0x1c2>
 800b49c:	2900      	cmp	r1, #0
 800b49e:	6863      	ldr	r3, [r4, #4]
 800b4a0:	dd0b      	ble.n	800b4ba <_printf_float+0x1ae>
 800b4a2:	6121      	str	r1, [r4, #16]
 800b4a4:	b913      	cbnz	r3, 800b4ac <_printf_float+0x1a0>
 800b4a6:	6822      	ldr	r2, [r4, #0]
 800b4a8:	07d0      	lsls	r0, r2, #31
 800b4aa:	d502      	bpl.n	800b4b2 <_printf_float+0x1a6>
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	440b      	add	r3, r1
 800b4b0:	6123      	str	r3, [r4, #16]
 800b4b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800b4b4:	f04f 0900 	mov.w	r9, #0
 800b4b8:	e7de      	b.n	800b478 <_printf_float+0x16c>
 800b4ba:	b913      	cbnz	r3, 800b4c2 <_printf_float+0x1b6>
 800b4bc:	6822      	ldr	r2, [r4, #0]
 800b4be:	07d2      	lsls	r2, r2, #31
 800b4c0:	d501      	bpl.n	800b4c6 <_printf_float+0x1ba>
 800b4c2:	3302      	adds	r3, #2
 800b4c4:	e7f4      	b.n	800b4b0 <_printf_float+0x1a4>
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e7f2      	b.n	800b4b0 <_printf_float+0x1a4>
 800b4ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d0:	4299      	cmp	r1, r3
 800b4d2:	db05      	blt.n	800b4e0 <_printf_float+0x1d4>
 800b4d4:	6823      	ldr	r3, [r4, #0]
 800b4d6:	6121      	str	r1, [r4, #16]
 800b4d8:	07d8      	lsls	r0, r3, #31
 800b4da:	d5ea      	bpl.n	800b4b2 <_printf_float+0x1a6>
 800b4dc:	1c4b      	adds	r3, r1, #1
 800b4de:	e7e7      	b.n	800b4b0 <_printf_float+0x1a4>
 800b4e0:	2900      	cmp	r1, #0
 800b4e2:	bfd4      	ite	le
 800b4e4:	f1c1 0202 	rsble	r2, r1, #2
 800b4e8:	2201      	movgt	r2, #1
 800b4ea:	4413      	add	r3, r2
 800b4ec:	e7e0      	b.n	800b4b0 <_printf_float+0x1a4>
 800b4ee:	6823      	ldr	r3, [r4, #0]
 800b4f0:	055a      	lsls	r2, r3, #21
 800b4f2:	d407      	bmi.n	800b504 <_printf_float+0x1f8>
 800b4f4:	6923      	ldr	r3, [r4, #16]
 800b4f6:	4642      	mov	r2, r8
 800b4f8:	4631      	mov	r1, r6
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	47b8      	blx	r7
 800b4fe:	3001      	adds	r0, #1
 800b500:	d12c      	bne.n	800b55c <_printf_float+0x250>
 800b502:	e764      	b.n	800b3ce <_printf_float+0xc2>
 800b504:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b508:	f240 80e0 	bls.w	800b6cc <_printf_float+0x3c0>
 800b50c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b510:	2200      	movs	r2, #0
 800b512:	2300      	movs	r3, #0
 800b514:	f7f5 fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d034      	beq.n	800b586 <_printf_float+0x27a>
 800b51c:	4a37      	ldr	r2, [pc, #220]	; (800b5fc <_printf_float+0x2f0>)
 800b51e:	2301      	movs	r3, #1
 800b520:	4631      	mov	r1, r6
 800b522:	4628      	mov	r0, r5
 800b524:	47b8      	blx	r7
 800b526:	3001      	adds	r0, #1
 800b528:	f43f af51 	beq.w	800b3ce <_printf_float+0xc2>
 800b52c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b530:	429a      	cmp	r2, r3
 800b532:	db02      	blt.n	800b53a <_printf_float+0x22e>
 800b534:	6823      	ldr	r3, [r4, #0]
 800b536:	07d8      	lsls	r0, r3, #31
 800b538:	d510      	bpl.n	800b55c <_printf_float+0x250>
 800b53a:	ee18 3a10 	vmov	r3, s16
 800b53e:	4652      	mov	r2, sl
 800b540:	4631      	mov	r1, r6
 800b542:	4628      	mov	r0, r5
 800b544:	47b8      	blx	r7
 800b546:	3001      	adds	r0, #1
 800b548:	f43f af41 	beq.w	800b3ce <_printf_float+0xc2>
 800b54c:	f04f 0800 	mov.w	r8, #0
 800b550:	f104 091a 	add.w	r9, r4, #26
 800b554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b556:	3b01      	subs	r3, #1
 800b558:	4543      	cmp	r3, r8
 800b55a:	dc09      	bgt.n	800b570 <_printf_float+0x264>
 800b55c:	6823      	ldr	r3, [r4, #0]
 800b55e:	079b      	lsls	r3, r3, #30
 800b560:	f100 8105 	bmi.w	800b76e <_printf_float+0x462>
 800b564:	68e0      	ldr	r0, [r4, #12]
 800b566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b568:	4298      	cmp	r0, r3
 800b56a:	bfb8      	it	lt
 800b56c:	4618      	movlt	r0, r3
 800b56e:	e730      	b.n	800b3d2 <_printf_float+0xc6>
 800b570:	2301      	movs	r3, #1
 800b572:	464a      	mov	r2, r9
 800b574:	4631      	mov	r1, r6
 800b576:	4628      	mov	r0, r5
 800b578:	47b8      	blx	r7
 800b57a:	3001      	adds	r0, #1
 800b57c:	f43f af27 	beq.w	800b3ce <_printf_float+0xc2>
 800b580:	f108 0801 	add.w	r8, r8, #1
 800b584:	e7e6      	b.n	800b554 <_printf_float+0x248>
 800b586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b588:	2b00      	cmp	r3, #0
 800b58a:	dc39      	bgt.n	800b600 <_printf_float+0x2f4>
 800b58c:	4a1b      	ldr	r2, [pc, #108]	; (800b5fc <_printf_float+0x2f0>)
 800b58e:	2301      	movs	r3, #1
 800b590:	4631      	mov	r1, r6
 800b592:	4628      	mov	r0, r5
 800b594:	47b8      	blx	r7
 800b596:	3001      	adds	r0, #1
 800b598:	f43f af19 	beq.w	800b3ce <_printf_float+0xc2>
 800b59c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	d102      	bne.n	800b5aa <_printf_float+0x29e>
 800b5a4:	6823      	ldr	r3, [r4, #0]
 800b5a6:	07d9      	lsls	r1, r3, #31
 800b5a8:	d5d8      	bpl.n	800b55c <_printf_float+0x250>
 800b5aa:	ee18 3a10 	vmov	r3, s16
 800b5ae:	4652      	mov	r2, sl
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	47b8      	blx	r7
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	f43f af09 	beq.w	800b3ce <_printf_float+0xc2>
 800b5bc:	f04f 0900 	mov.w	r9, #0
 800b5c0:	f104 0a1a 	add.w	sl, r4, #26
 800b5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c6:	425b      	negs	r3, r3
 800b5c8:	454b      	cmp	r3, r9
 800b5ca:	dc01      	bgt.n	800b5d0 <_printf_float+0x2c4>
 800b5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ce:	e792      	b.n	800b4f6 <_printf_float+0x1ea>
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	4652      	mov	r2, sl
 800b5d4:	4631      	mov	r1, r6
 800b5d6:	4628      	mov	r0, r5
 800b5d8:	47b8      	blx	r7
 800b5da:	3001      	adds	r0, #1
 800b5dc:	f43f aef7 	beq.w	800b3ce <_printf_float+0xc2>
 800b5e0:	f109 0901 	add.w	r9, r9, #1
 800b5e4:	e7ee      	b.n	800b5c4 <_printf_float+0x2b8>
 800b5e6:	bf00      	nop
 800b5e8:	7fefffff 	.word	0x7fefffff
 800b5ec:	08019b34 	.word	0x08019b34
 800b5f0:	08019b38 	.word	0x08019b38
 800b5f4:	08019b40 	.word	0x08019b40
 800b5f8:	08019b3c 	.word	0x08019b3c
 800b5fc:	08019b44 	.word	0x08019b44
 800b600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b602:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b604:	429a      	cmp	r2, r3
 800b606:	bfa8      	it	ge
 800b608:	461a      	movge	r2, r3
 800b60a:	2a00      	cmp	r2, #0
 800b60c:	4691      	mov	r9, r2
 800b60e:	dc37      	bgt.n	800b680 <_printf_float+0x374>
 800b610:	f04f 0b00 	mov.w	fp, #0
 800b614:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b618:	f104 021a 	add.w	r2, r4, #26
 800b61c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b61e:	9305      	str	r3, [sp, #20]
 800b620:	eba3 0309 	sub.w	r3, r3, r9
 800b624:	455b      	cmp	r3, fp
 800b626:	dc33      	bgt.n	800b690 <_printf_float+0x384>
 800b628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b62c:	429a      	cmp	r2, r3
 800b62e:	db3b      	blt.n	800b6a8 <_printf_float+0x39c>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	07da      	lsls	r2, r3, #31
 800b634:	d438      	bmi.n	800b6a8 <_printf_float+0x39c>
 800b636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b638:	9a05      	ldr	r2, [sp, #20]
 800b63a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b63c:	1a9a      	subs	r2, r3, r2
 800b63e:	eba3 0901 	sub.w	r9, r3, r1
 800b642:	4591      	cmp	r9, r2
 800b644:	bfa8      	it	ge
 800b646:	4691      	movge	r9, r2
 800b648:	f1b9 0f00 	cmp.w	r9, #0
 800b64c:	dc35      	bgt.n	800b6ba <_printf_float+0x3ae>
 800b64e:	f04f 0800 	mov.w	r8, #0
 800b652:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b656:	f104 0a1a 	add.w	sl, r4, #26
 800b65a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b65e:	1a9b      	subs	r3, r3, r2
 800b660:	eba3 0309 	sub.w	r3, r3, r9
 800b664:	4543      	cmp	r3, r8
 800b666:	f77f af79 	ble.w	800b55c <_printf_float+0x250>
 800b66a:	2301      	movs	r3, #1
 800b66c:	4652      	mov	r2, sl
 800b66e:	4631      	mov	r1, r6
 800b670:	4628      	mov	r0, r5
 800b672:	47b8      	blx	r7
 800b674:	3001      	adds	r0, #1
 800b676:	f43f aeaa 	beq.w	800b3ce <_printf_float+0xc2>
 800b67a:	f108 0801 	add.w	r8, r8, #1
 800b67e:	e7ec      	b.n	800b65a <_printf_float+0x34e>
 800b680:	4613      	mov	r3, r2
 800b682:	4631      	mov	r1, r6
 800b684:	4642      	mov	r2, r8
 800b686:	4628      	mov	r0, r5
 800b688:	47b8      	blx	r7
 800b68a:	3001      	adds	r0, #1
 800b68c:	d1c0      	bne.n	800b610 <_printf_float+0x304>
 800b68e:	e69e      	b.n	800b3ce <_printf_float+0xc2>
 800b690:	2301      	movs	r3, #1
 800b692:	4631      	mov	r1, r6
 800b694:	4628      	mov	r0, r5
 800b696:	9205      	str	r2, [sp, #20]
 800b698:	47b8      	blx	r7
 800b69a:	3001      	adds	r0, #1
 800b69c:	f43f ae97 	beq.w	800b3ce <_printf_float+0xc2>
 800b6a0:	9a05      	ldr	r2, [sp, #20]
 800b6a2:	f10b 0b01 	add.w	fp, fp, #1
 800b6a6:	e7b9      	b.n	800b61c <_printf_float+0x310>
 800b6a8:	ee18 3a10 	vmov	r3, s16
 800b6ac:	4652      	mov	r2, sl
 800b6ae:	4631      	mov	r1, r6
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	47b8      	blx	r7
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	d1be      	bne.n	800b636 <_printf_float+0x32a>
 800b6b8:	e689      	b.n	800b3ce <_printf_float+0xc2>
 800b6ba:	9a05      	ldr	r2, [sp, #20]
 800b6bc:	464b      	mov	r3, r9
 800b6be:	4442      	add	r2, r8
 800b6c0:	4631      	mov	r1, r6
 800b6c2:	4628      	mov	r0, r5
 800b6c4:	47b8      	blx	r7
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	d1c1      	bne.n	800b64e <_printf_float+0x342>
 800b6ca:	e680      	b.n	800b3ce <_printf_float+0xc2>
 800b6cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b6ce:	2a01      	cmp	r2, #1
 800b6d0:	dc01      	bgt.n	800b6d6 <_printf_float+0x3ca>
 800b6d2:	07db      	lsls	r3, r3, #31
 800b6d4:	d538      	bpl.n	800b748 <_printf_float+0x43c>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	4642      	mov	r2, r8
 800b6da:	4631      	mov	r1, r6
 800b6dc:	4628      	mov	r0, r5
 800b6de:	47b8      	blx	r7
 800b6e0:	3001      	adds	r0, #1
 800b6e2:	f43f ae74 	beq.w	800b3ce <_printf_float+0xc2>
 800b6e6:	ee18 3a10 	vmov	r3, s16
 800b6ea:	4652      	mov	r2, sl
 800b6ec:	4631      	mov	r1, r6
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	47b8      	blx	r7
 800b6f2:	3001      	adds	r0, #1
 800b6f4:	f43f ae6b 	beq.w	800b3ce <_printf_float+0xc2>
 800b6f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	2300      	movs	r3, #0
 800b700:	f7f5 f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b704:	b9d8      	cbnz	r0, 800b73e <_printf_float+0x432>
 800b706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b708:	f108 0201 	add.w	r2, r8, #1
 800b70c:	3b01      	subs	r3, #1
 800b70e:	4631      	mov	r1, r6
 800b710:	4628      	mov	r0, r5
 800b712:	47b8      	blx	r7
 800b714:	3001      	adds	r0, #1
 800b716:	d10e      	bne.n	800b736 <_printf_float+0x42a>
 800b718:	e659      	b.n	800b3ce <_printf_float+0xc2>
 800b71a:	2301      	movs	r3, #1
 800b71c:	4652      	mov	r2, sl
 800b71e:	4631      	mov	r1, r6
 800b720:	4628      	mov	r0, r5
 800b722:	47b8      	blx	r7
 800b724:	3001      	adds	r0, #1
 800b726:	f43f ae52 	beq.w	800b3ce <_printf_float+0xc2>
 800b72a:	f108 0801 	add.w	r8, r8, #1
 800b72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b730:	3b01      	subs	r3, #1
 800b732:	4543      	cmp	r3, r8
 800b734:	dcf1      	bgt.n	800b71a <_printf_float+0x40e>
 800b736:	464b      	mov	r3, r9
 800b738:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b73c:	e6dc      	b.n	800b4f8 <_printf_float+0x1ec>
 800b73e:	f04f 0800 	mov.w	r8, #0
 800b742:	f104 0a1a 	add.w	sl, r4, #26
 800b746:	e7f2      	b.n	800b72e <_printf_float+0x422>
 800b748:	2301      	movs	r3, #1
 800b74a:	4642      	mov	r2, r8
 800b74c:	e7df      	b.n	800b70e <_printf_float+0x402>
 800b74e:	2301      	movs	r3, #1
 800b750:	464a      	mov	r2, r9
 800b752:	4631      	mov	r1, r6
 800b754:	4628      	mov	r0, r5
 800b756:	47b8      	blx	r7
 800b758:	3001      	adds	r0, #1
 800b75a:	f43f ae38 	beq.w	800b3ce <_printf_float+0xc2>
 800b75e:	f108 0801 	add.w	r8, r8, #1
 800b762:	68e3      	ldr	r3, [r4, #12]
 800b764:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b766:	1a5b      	subs	r3, r3, r1
 800b768:	4543      	cmp	r3, r8
 800b76a:	dcf0      	bgt.n	800b74e <_printf_float+0x442>
 800b76c:	e6fa      	b.n	800b564 <_printf_float+0x258>
 800b76e:	f04f 0800 	mov.w	r8, #0
 800b772:	f104 0919 	add.w	r9, r4, #25
 800b776:	e7f4      	b.n	800b762 <_printf_float+0x456>

0800b778 <_printf_common>:
 800b778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b77c:	4616      	mov	r6, r2
 800b77e:	4699      	mov	r9, r3
 800b780:	688a      	ldr	r2, [r1, #8]
 800b782:	690b      	ldr	r3, [r1, #16]
 800b784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b788:	4293      	cmp	r3, r2
 800b78a:	bfb8      	it	lt
 800b78c:	4613      	movlt	r3, r2
 800b78e:	6033      	str	r3, [r6, #0]
 800b790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b794:	4607      	mov	r7, r0
 800b796:	460c      	mov	r4, r1
 800b798:	b10a      	cbz	r2, 800b79e <_printf_common+0x26>
 800b79a:	3301      	adds	r3, #1
 800b79c:	6033      	str	r3, [r6, #0]
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	0699      	lsls	r1, r3, #26
 800b7a2:	bf42      	ittt	mi
 800b7a4:	6833      	ldrmi	r3, [r6, #0]
 800b7a6:	3302      	addmi	r3, #2
 800b7a8:	6033      	strmi	r3, [r6, #0]
 800b7aa:	6825      	ldr	r5, [r4, #0]
 800b7ac:	f015 0506 	ands.w	r5, r5, #6
 800b7b0:	d106      	bne.n	800b7c0 <_printf_common+0x48>
 800b7b2:	f104 0a19 	add.w	sl, r4, #25
 800b7b6:	68e3      	ldr	r3, [r4, #12]
 800b7b8:	6832      	ldr	r2, [r6, #0]
 800b7ba:	1a9b      	subs	r3, r3, r2
 800b7bc:	42ab      	cmp	r3, r5
 800b7be:	dc26      	bgt.n	800b80e <_printf_common+0x96>
 800b7c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b7c4:	1e13      	subs	r3, r2, #0
 800b7c6:	6822      	ldr	r2, [r4, #0]
 800b7c8:	bf18      	it	ne
 800b7ca:	2301      	movne	r3, #1
 800b7cc:	0692      	lsls	r2, r2, #26
 800b7ce:	d42b      	bmi.n	800b828 <_printf_common+0xb0>
 800b7d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b7d4:	4649      	mov	r1, r9
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	47c0      	blx	r8
 800b7da:	3001      	adds	r0, #1
 800b7dc:	d01e      	beq.n	800b81c <_printf_common+0xa4>
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	68e5      	ldr	r5, [r4, #12]
 800b7e2:	6832      	ldr	r2, [r6, #0]
 800b7e4:	f003 0306 	and.w	r3, r3, #6
 800b7e8:	2b04      	cmp	r3, #4
 800b7ea:	bf08      	it	eq
 800b7ec:	1aad      	subeq	r5, r5, r2
 800b7ee:	68a3      	ldr	r3, [r4, #8]
 800b7f0:	6922      	ldr	r2, [r4, #16]
 800b7f2:	bf0c      	ite	eq
 800b7f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7f8:	2500      	movne	r5, #0
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	bfc4      	itt	gt
 800b7fe:	1a9b      	subgt	r3, r3, r2
 800b800:	18ed      	addgt	r5, r5, r3
 800b802:	2600      	movs	r6, #0
 800b804:	341a      	adds	r4, #26
 800b806:	42b5      	cmp	r5, r6
 800b808:	d11a      	bne.n	800b840 <_printf_common+0xc8>
 800b80a:	2000      	movs	r0, #0
 800b80c:	e008      	b.n	800b820 <_printf_common+0xa8>
 800b80e:	2301      	movs	r3, #1
 800b810:	4652      	mov	r2, sl
 800b812:	4649      	mov	r1, r9
 800b814:	4638      	mov	r0, r7
 800b816:	47c0      	blx	r8
 800b818:	3001      	adds	r0, #1
 800b81a:	d103      	bne.n	800b824 <_printf_common+0xac>
 800b81c:	f04f 30ff 	mov.w	r0, #4294967295
 800b820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b824:	3501      	adds	r5, #1
 800b826:	e7c6      	b.n	800b7b6 <_printf_common+0x3e>
 800b828:	18e1      	adds	r1, r4, r3
 800b82a:	1c5a      	adds	r2, r3, #1
 800b82c:	2030      	movs	r0, #48	; 0x30
 800b82e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b832:	4422      	add	r2, r4
 800b834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b83c:	3302      	adds	r3, #2
 800b83e:	e7c7      	b.n	800b7d0 <_printf_common+0x58>
 800b840:	2301      	movs	r3, #1
 800b842:	4622      	mov	r2, r4
 800b844:	4649      	mov	r1, r9
 800b846:	4638      	mov	r0, r7
 800b848:	47c0      	blx	r8
 800b84a:	3001      	adds	r0, #1
 800b84c:	d0e6      	beq.n	800b81c <_printf_common+0xa4>
 800b84e:	3601      	adds	r6, #1
 800b850:	e7d9      	b.n	800b806 <_printf_common+0x8e>
	...

0800b854 <_printf_i>:
 800b854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b858:	7e0f      	ldrb	r7, [r1, #24]
 800b85a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b85c:	2f78      	cmp	r7, #120	; 0x78
 800b85e:	4691      	mov	r9, r2
 800b860:	4680      	mov	r8, r0
 800b862:	460c      	mov	r4, r1
 800b864:	469a      	mov	sl, r3
 800b866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b86a:	d807      	bhi.n	800b87c <_printf_i+0x28>
 800b86c:	2f62      	cmp	r7, #98	; 0x62
 800b86e:	d80a      	bhi.n	800b886 <_printf_i+0x32>
 800b870:	2f00      	cmp	r7, #0
 800b872:	f000 80d8 	beq.w	800ba26 <_printf_i+0x1d2>
 800b876:	2f58      	cmp	r7, #88	; 0x58
 800b878:	f000 80a3 	beq.w	800b9c2 <_printf_i+0x16e>
 800b87c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b884:	e03a      	b.n	800b8fc <_printf_i+0xa8>
 800b886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b88a:	2b15      	cmp	r3, #21
 800b88c:	d8f6      	bhi.n	800b87c <_printf_i+0x28>
 800b88e:	a101      	add	r1, pc, #4	; (adr r1, 800b894 <_printf_i+0x40>)
 800b890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b894:	0800b8ed 	.word	0x0800b8ed
 800b898:	0800b901 	.word	0x0800b901
 800b89c:	0800b87d 	.word	0x0800b87d
 800b8a0:	0800b87d 	.word	0x0800b87d
 800b8a4:	0800b87d 	.word	0x0800b87d
 800b8a8:	0800b87d 	.word	0x0800b87d
 800b8ac:	0800b901 	.word	0x0800b901
 800b8b0:	0800b87d 	.word	0x0800b87d
 800b8b4:	0800b87d 	.word	0x0800b87d
 800b8b8:	0800b87d 	.word	0x0800b87d
 800b8bc:	0800b87d 	.word	0x0800b87d
 800b8c0:	0800ba0d 	.word	0x0800ba0d
 800b8c4:	0800b931 	.word	0x0800b931
 800b8c8:	0800b9ef 	.word	0x0800b9ef
 800b8cc:	0800b87d 	.word	0x0800b87d
 800b8d0:	0800b87d 	.word	0x0800b87d
 800b8d4:	0800ba2f 	.word	0x0800ba2f
 800b8d8:	0800b87d 	.word	0x0800b87d
 800b8dc:	0800b931 	.word	0x0800b931
 800b8e0:	0800b87d 	.word	0x0800b87d
 800b8e4:	0800b87d 	.word	0x0800b87d
 800b8e8:	0800b9f7 	.word	0x0800b9f7
 800b8ec:	682b      	ldr	r3, [r5, #0]
 800b8ee:	1d1a      	adds	r2, r3, #4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	602a      	str	r2, [r5, #0]
 800b8f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e0a3      	b.n	800ba48 <_printf_i+0x1f4>
 800b900:	6820      	ldr	r0, [r4, #0]
 800b902:	6829      	ldr	r1, [r5, #0]
 800b904:	0606      	lsls	r6, r0, #24
 800b906:	f101 0304 	add.w	r3, r1, #4
 800b90a:	d50a      	bpl.n	800b922 <_printf_i+0xce>
 800b90c:	680e      	ldr	r6, [r1, #0]
 800b90e:	602b      	str	r3, [r5, #0]
 800b910:	2e00      	cmp	r6, #0
 800b912:	da03      	bge.n	800b91c <_printf_i+0xc8>
 800b914:	232d      	movs	r3, #45	; 0x2d
 800b916:	4276      	negs	r6, r6
 800b918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b91c:	485e      	ldr	r0, [pc, #376]	; (800ba98 <_printf_i+0x244>)
 800b91e:	230a      	movs	r3, #10
 800b920:	e019      	b.n	800b956 <_printf_i+0x102>
 800b922:	680e      	ldr	r6, [r1, #0]
 800b924:	602b      	str	r3, [r5, #0]
 800b926:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b92a:	bf18      	it	ne
 800b92c:	b236      	sxthne	r6, r6
 800b92e:	e7ef      	b.n	800b910 <_printf_i+0xbc>
 800b930:	682b      	ldr	r3, [r5, #0]
 800b932:	6820      	ldr	r0, [r4, #0]
 800b934:	1d19      	adds	r1, r3, #4
 800b936:	6029      	str	r1, [r5, #0]
 800b938:	0601      	lsls	r1, r0, #24
 800b93a:	d501      	bpl.n	800b940 <_printf_i+0xec>
 800b93c:	681e      	ldr	r6, [r3, #0]
 800b93e:	e002      	b.n	800b946 <_printf_i+0xf2>
 800b940:	0646      	lsls	r6, r0, #25
 800b942:	d5fb      	bpl.n	800b93c <_printf_i+0xe8>
 800b944:	881e      	ldrh	r6, [r3, #0]
 800b946:	4854      	ldr	r0, [pc, #336]	; (800ba98 <_printf_i+0x244>)
 800b948:	2f6f      	cmp	r7, #111	; 0x6f
 800b94a:	bf0c      	ite	eq
 800b94c:	2308      	moveq	r3, #8
 800b94e:	230a      	movne	r3, #10
 800b950:	2100      	movs	r1, #0
 800b952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b956:	6865      	ldr	r5, [r4, #4]
 800b958:	60a5      	str	r5, [r4, #8]
 800b95a:	2d00      	cmp	r5, #0
 800b95c:	bfa2      	ittt	ge
 800b95e:	6821      	ldrge	r1, [r4, #0]
 800b960:	f021 0104 	bicge.w	r1, r1, #4
 800b964:	6021      	strge	r1, [r4, #0]
 800b966:	b90e      	cbnz	r6, 800b96c <_printf_i+0x118>
 800b968:	2d00      	cmp	r5, #0
 800b96a:	d04d      	beq.n	800ba08 <_printf_i+0x1b4>
 800b96c:	4615      	mov	r5, r2
 800b96e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b972:	fb03 6711 	mls	r7, r3, r1, r6
 800b976:	5dc7      	ldrb	r7, [r0, r7]
 800b978:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b97c:	4637      	mov	r7, r6
 800b97e:	42bb      	cmp	r3, r7
 800b980:	460e      	mov	r6, r1
 800b982:	d9f4      	bls.n	800b96e <_printf_i+0x11a>
 800b984:	2b08      	cmp	r3, #8
 800b986:	d10b      	bne.n	800b9a0 <_printf_i+0x14c>
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	07de      	lsls	r6, r3, #31
 800b98c:	d508      	bpl.n	800b9a0 <_printf_i+0x14c>
 800b98e:	6923      	ldr	r3, [r4, #16]
 800b990:	6861      	ldr	r1, [r4, #4]
 800b992:	4299      	cmp	r1, r3
 800b994:	bfde      	ittt	le
 800b996:	2330      	movle	r3, #48	; 0x30
 800b998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b99c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9a0:	1b52      	subs	r2, r2, r5
 800b9a2:	6122      	str	r2, [r4, #16]
 800b9a4:	f8cd a000 	str.w	sl, [sp]
 800b9a8:	464b      	mov	r3, r9
 800b9aa:	aa03      	add	r2, sp, #12
 800b9ac:	4621      	mov	r1, r4
 800b9ae:	4640      	mov	r0, r8
 800b9b0:	f7ff fee2 	bl	800b778 <_printf_common>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d14c      	bne.n	800ba52 <_printf_i+0x1fe>
 800b9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9bc:	b004      	add	sp, #16
 800b9be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c2:	4835      	ldr	r0, [pc, #212]	; (800ba98 <_printf_i+0x244>)
 800b9c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b9c8:	6829      	ldr	r1, [r5, #0]
 800b9ca:	6823      	ldr	r3, [r4, #0]
 800b9cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b9d0:	6029      	str	r1, [r5, #0]
 800b9d2:	061d      	lsls	r5, r3, #24
 800b9d4:	d514      	bpl.n	800ba00 <_printf_i+0x1ac>
 800b9d6:	07df      	lsls	r7, r3, #31
 800b9d8:	bf44      	itt	mi
 800b9da:	f043 0320 	orrmi.w	r3, r3, #32
 800b9de:	6023      	strmi	r3, [r4, #0]
 800b9e0:	b91e      	cbnz	r6, 800b9ea <_printf_i+0x196>
 800b9e2:	6823      	ldr	r3, [r4, #0]
 800b9e4:	f023 0320 	bic.w	r3, r3, #32
 800b9e8:	6023      	str	r3, [r4, #0]
 800b9ea:	2310      	movs	r3, #16
 800b9ec:	e7b0      	b.n	800b950 <_printf_i+0xfc>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	f043 0320 	orr.w	r3, r3, #32
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	2378      	movs	r3, #120	; 0x78
 800b9f8:	4828      	ldr	r0, [pc, #160]	; (800ba9c <_printf_i+0x248>)
 800b9fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9fe:	e7e3      	b.n	800b9c8 <_printf_i+0x174>
 800ba00:	0659      	lsls	r1, r3, #25
 800ba02:	bf48      	it	mi
 800ba04:	b2b6      	uxthmi	r6, r6
 800ba06:	e7e6      	b.n	800b9d6 <_printf_i+0x182>
 800ba08:	4615      	mov	r5, r2
 800ba0a:	e7bb      	b.n	800b984 <_printf_i+0x130>
 800ba0c:	682b      	ldr	r3, [r5, #0]
 800ba0e:	6826      	ldr	r6, [r4, #0]
 800ba10:	6961      	ldr	r1, [r4, #20]
 800ba12:	1d18      	adds	r0, r3, #4
 800ba14:	6028      	str	r0, [r5, #0]
 800ba16:	0635      	lsls	r5, r6, #24
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	d501      	bpl.n	800ba20 <_printf_i+0x1cc>
 800ba1c:	6019      	str	r1, [r3, #0]
 800ba1e:	e002      	b.n	800ba26 <_printf_i+0x1d2>
 800ba20:	0670      	lsls	r0, r6, #25
 800ba22:	d5fb      	bpl.n	800ba1c <_printf_i+0x1c8>
 800ba24:	8019      	strh	r1, [r3, #0]
 800ba26:	2300      	movs	r3, #0
 800ba28:	6123      	str	r3, [r4, #16]
 800ba2a:	4615      	mov	r5, r2
 800ba2c:	e7ba      	b.n	800b9a4 <_printf_i+0x150>
 800ba2e:	682b      	ldr	r3, [r5, #0]
 800ba30:	1d1a      	adds	r2, r3, #4
 800ba32:	602a      	str	r2, [r5, #0]
 800ba34:	681d      	ldr	r5, [r3, #0]
 800ba36:	6862      	ldr	r2, [r4, #4]
 800ba38:	2100      	movs	r1, #0
 800ba3a:	4628      	mov	r0, r5
 800ba3c:	f7f4 fbd0 	bl	80001e0 <memchr>
 800ba40:	b108      	cbz	r0, 800ba46 <_printf_i+0x1f2>
 800ba42:	1b40      	subs	r0, r0, r5
 800ba44:	6060      	str	r0, [r4, #4]
 800ba46:	6863      	ldr	r3, [r4, #4]
 800ba48:	6123      	str	r3, [r4, #16]
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba50:	e7a8      	b.n	800b9a4 <_printf_i+0x150>
 800ba52:	6923      	ldr	r3, [r4, #16]
 800ba54:	462a      	mov	r2, r5
 800ba56:	4649      	mov	r1, r9
 800ba58:	4640      	mov	r0, r8
 800ba5a:	47d0      	blx	sl
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d0ab      	beq.n	800b9b8 <_printf_i+0x164>
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	079b      	lsls	r3, r3, #30
 800ba64:	d413      	bmi.n	800ba8e <_printf_i+0x23a>
 800ba66:	68e0      	ldr	r0, [r4, #12]
 800ba68:	9b03      	ldr	r3, [sp, #12]
 800ba6a:	4298      	cmp	r0, r3
 800ba6c:	bfb8      	it	lt
 800ba6e:	4618      	movlt	r0, r3
 800ba70:	e7a4      	b.n	800b9bc <_printf_i+0x168>
 800ba72:	2301      	movs	r3, #1
 800ba74:	4632      	mov	r2, r6
 800ba76:	4649      	mov	r1, r9
 800ba78:	4640      	mov	r0, r8
 800ba7a:	47d0      	blx	sl
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	d09b      	beq.n	800b9b8 <_printf_i+0x164>
 800ba80:	3501      	adds	r5, #1
 800ba82:	68e3      	ldr	r3, [r4, #12]
 800ba84:	9903      	ldr	r1, [sp, #12]
 800ba86:	1a5b      	subs	r3, r3, r1
 800ba88:	42ab      	cmp	r3, r5
 800ba8a:	dcf2      	bgt.n	800ba72 <_printf_i+0x21e>
 800ba8c:	e7eb      	b.n	800ba66 <_printf_i+0x212>
 800ba8e:	2500      	movs	r5, #0
 800ba90:	f104 0619 	add.w	r6, r4, #25
 800ba94:	e7f5      	b.n	800ba82 <_printf_i+0x22e>
 800ba96:	bf00      	nop
 800ba98:	08019b46 	.word	0x08019b46
 800ba9c:	08019b57 	.word	0x08019b57

0800baa0 <iprintf>:
 800baa0:	b40f      	push	{r0, r1, r2, r3}
 800baa2:	4b0a      	ldr	r3, [pc, #40]	; (800bacc <iprintf+0x2c>)
 800baa4:	b513      	push	{r0, r1, r4, lr}
 800baa6:	681c      	ldr	r4, [r3, #0]
 800baa8:	b124      	cbz	r4, 800bab4 <iprintf+0x14>
 800baaa:	69a3      	ldr	r3, [r4, #24]
 800baac:	b913      	cbnz	r3, 800bab4 <iprintf+0x14>
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 fef0 	bl	800c894 <__sinit>
 800bab4:	ab05      	add	r3, sp, #20
 800bab6:	9a04      	ldr	r2, [sp, #16]
 800bab8:	68a1      	ldr	r1, [r4, #8]
 800baba:	9301      	str	r3, [sp, #4]
 800babc:	4620      	mov	r0, r4
 800babe:	f001 fb5f 	bl	800d180 <_vfiprintf_r>
 800bac2:	b002      	add	sp, #8
 800bac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bac8:	b004      	add	sp, #16
 800baca:	4770      	bx	lr
 800bacc:	20000878 	.word	0x20000878

0800bad0 <_sbrk_r>:
 800bad0:	b538      	push	{r3, r4, r5, lr}
 800bad2:	4d06      	ldr	r5, [pc, #24]	; (800baec <_sbrk_r+0x1c>)
 800bad4:	2300      	movs	r3, #0
 800bad6:	4604      	mov	r4, r0
 800bad8:	4608      	mov	r0, r1
 800bada:	602b      	str	r3, [r5, #0]
 800badc:	f7f6 f9d8 	bl	8001e90 <_sbrk>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	d102      	bne.n	800baea <_sbrk_r+0x1a>
 800bae4:	682b      	ldr	r3, [r5, #0]
 800bae6:	b103      	cbz	r3, 800baea <_sbrk_r+0x1a>
 800bae8:	6023      	str	r3, [r4, #0]
 800baea:	bd38      	pop	{r3, r4, r5, pc}
 800baec:	20001ad8 	.word	0x20001ad8

0800baf0 <quorem>:
 800baf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	6903      	ldr	r3, [r0, #16]
 800baf6:	690c      	ldr	r4, [r1, #16]
 800baf8:	42a3      	cmp	r3, r4
 800bafa:	4607      	mov	r7, r0
 800bafc:	f2c0 8081 	blt.w	800bc02 <quorem+0x112>
 800bb00:	3c01      	subs	r4, #1
 800bb02:	f101 0814 	add.w	r8, r1, #20
 800bb06:	f100 0514 	add.w	r5, r0, #20
 800bb0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb0e:	9301      	str	r3, [sp, #4]
 800bb10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb24:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb28:	d331      	bcc.n	800bb8e <quorem+0x9e>
 800bb2a:	f04f 0e00 	mov.w	lr, #0
 800bb2e:	4640      	mov	r0, r8
 800bb30:	46ac      	mov	ip, r5
 800bb32:	46f2      	mov	sl, lr
 800bb34:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb38:	b293      	uxth	r3, r2
 800bb3a:	fb06 e303 	mla	r3, r6, r3, lr
 800bb3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	ebaa 0303 	sub.w	r3, sl, r3
 800bb48:	f8dc a000 	ldr.w	sl, [ip]
 800bb4c:	0c12      	lsrs	r2, r2, #16
 800bb4e:	fa13 f38a 	uxtah	r3, r3, sl
 800bb52:	fb06 e202 	mla	r2, r6, r2, lr
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	9b00      	ldr	r3, [sp, #0]
 800bb5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb5e:	b292      	uxth	r2, r2
 800bb60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bb64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb68:	f8bd 3000 	ldrh.w	r3, [sp]
 800bb6c:	4581      	cmp	r9, r0
 800bb6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb72:	f84c 3b04 	str.w	r3, [ip], #4
 800bb76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb7a:	d2db      	bcs.n	800bb34 <quorem+0x44>
 800bb7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800bb80:	b92b      	cbnz	r3, 800bb8e <quorem+0x9e>
 800bb82:	9b01      	ldr	r3, [sp, #4]
 800bb84:	3b04      	subs	r3, #4
 800bb86:	429d      	cmp	r5, r3
 800bb88:	461a      	mov	r2, r3
 800bb8a:	d32e      	bcc.n	800bbea <quorem+0xfa>
 800bb8c:	613c      	str	r4, [r7, #16]
 800bb8e:	4638      	mov	r0, r7
 800bb90:	f001 f9b4 	bl	800cefc <__mcmp>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	db24      	blt.n	800bbe2 <quorem+0xf2>
 800bb98:	3601      	adds	r6, #1
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	f04f 0c00 	mov.w	ip, #0
 800bba0:	f858 2b04 	ldr.w	r2, [r8], #4
 800bba4:	f8d0 e000 	ldr.w	lr, [r0]
 800bba8:	b293      	uxth	r3, r2
 800bbaa:	ebac 0303 	sub.w	r3, ip, r3
 800bbae:	0c12      	lsrs	r2, r2, #16
 800bbb0:	fa13 f38e 	uxtah	r3, r3, lr
 800bbb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bbb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbc2:	45c1      	cmp	r9, r8
 800bbc4:	f840 3b04 	str.w	r3, [r0], #4
 800bbc8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bbcc:	d2e8      	bcs.n	800bba0 <quorem+0xb0>
 800bbce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbd6:	b922      	cbnz	r2, 800bbe2 <quorem+0xf2>
 800bbd8:	3b04      	subs	r3, #4
 800bbda:	429d      	cmp	r5, r3
 800bbdc:	461a      	mov	r2, r3
 800bbde:	d30a      	bcc.n	800bbf6 <quorem+0x106>
 800bbe0:	613c      	str	r4, [r7, #16]
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	b003      	add	sp, #12
 800bbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbea:	6812      	ldr	r2, [r2, #0]
 800bbec:	3b04      	subs	r3, #4
 800bbee:	2a00      	cmp	r2, #0
 800bbf0:	d1cc      	bne.n	800bb8c <quorem+0x9c>
 800bbf2:	3c01      	subs	r4, #1
 800bbf4:	e7c7      	b.n	800bb86 <quorem+0x96>
 800bbf6:	6812      	ldr	r2, [r2, #0]
 800bbf8:	3b04      	subs	r3, #4
 800bbfa:	2a00      	cmp	r2, #0
 800bbfc:	d1f0      	bne.n	800bbe0 <quorem+0xf0>
 800bbfe:	3c01      	subs	r4, #1
 800bc00:	e7eb      	b.n	800bbda <quorem+0xea>
 800bc02:	2000      	movs	r0, #0
 800bc04:	e7ee      	b.n	800bbe4 <quorem+0xf4>
	...

0800bc08 <_dtoa_r>:
 800bc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0c:	ed2d 8b04 	vpush	{d8-d9}
 800bc10:	ec57 6b10 	vmov	r6, r7, d0
 800bc14:	b093      	sub	sp, #76	; 0x4c
 800bc16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bc18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc1c:	9106      	str	r1, [sp, #24]
 800bc1e:	ee10 aa10 	vmov	sl, s0
 800bc22:	4604      	mov	r4, r0
 800bc24:	9209      	str	r2, [sp, #36]	; 0x24
 800bc26:	930c      	str	r3, [sp, #48]	; 0x30
 800bc28:	46bb      	mov	fp, r7
 800bc2a:	b975      	cbnz	r5, 800bc4a <_dtoa_r+0x42>
 800bc2c:	2010      	movs	r0, #16
 800bc2e:	f7ff f9cf 	bl	800afd0 <malloc>
 800bc32:	4602      	mov	r2, r0
 800bc34:	6260      	str	r0, [r4, #36]	; 0x24
 800bc36:	b920      	cbnz	r0, 800bc42 <_dtoa_r+0x3a>
 800bc38:	4ba7      	ldr	r3, [pc, #668]	; (800bed8 <_dtoa_r+0x2d0>)
 800bc3a:	21ea      	movs	r1, #234	; 0xea
 800bc3c:	48a7      	ldr	r0, [pc, #668]	; (800bedc <_dtoa_r+0x2d4>)
 800bc3e:	f001 fce5 	bl	800d60c <__assert_func>
 800bc42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc46:	6005      	str	r5, [r0, #0]
 800bc48:	60c5      	str	r5, [r0, #12]
 800bc4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc4c:	6819      	ldr	r1, [r3, #0]
 800bc4e:	b151      	cbz	r1, 800bc66 <_dtoa_r+0x5e>
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	604a      	str	r2, [r1, #4]
 800bc54:	2301      	movs	r3, #1
 800bc56:	4093      	lsls	r3, r2
 800bc58:	608b      	str	r3, [r1, #8]
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f000 ff0c 	bl	800ca78 <_Bfree>
 800bc60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc62:	2200      	movs	r2, #0
 800bc64:	601a      	str	r2, [r3, #0]
 800bc66:	1e3b      	subs	r3, r7, #0
 800bc68:	bfaa      	itet	ge
 800bc6a:	2300      	movge	r3, #0
 800bc6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bc70:	f8c8 3000 	strge.w	r3, [r8]
 800bc74:	4b9a      	ldr	r3, [pc, #616]	; (800bee0 <_dtoa_r+0x2d8>)
 800bc76:	bfbc      	itt	lt
 800bc78:	2201      	movlt	r2, #1
 800bc7a:	f8c8 2000 	strlt.w	r2, [r8]
 800bc7e:	ea33 030b 	bics.w	r3, r3, fp
 800bc82:	d11b      	bne.n	800bcbc <_dtoa_r+0xb4>
 800bc84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc86:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc8a:	6013      	str	r3, [r2, #0]
 800bc8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc90:	4333      	orrs	r3, r6
 800bc92:	f000 8592 	beq.w	800c7ba <_dtoa_r+0xbb2>
 800bc96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc98:	b963      	cbnz	r3, 800bcb4 <_dtoa_r+0xac>
 800bc9a:	4b92      	ldr	r3, [pc, #584]	; (800bee4 <_dtoa_r+0x2dc>)
 800bc9c:	e022      	b.n	800bce4 <_dtoa_r+0xdc>
 800bc9e:	4b92      	ldr	r3, [pc, #584]	; (800bee8 <_dtoa_r+0x2e0>)
 800bca0:	9301      	str	r3, [sp, #4]
 800bca2:	3308      	adds	r3, #8
 800bca4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bca6:	6013      	str	r3, [r2, #0]
 800bca8:	9801      	ldr	r0, [sp, #4]
 800bcaa:	b013      	add	sp, #76	; 0x4c
 800bcac:	ecbd 8b04 	vpop	{d8-d9}
 800bcb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	4b8b      	ldr	r3, [pc, #556]	; (800bee4 <_dtoa_r+0x2dc>)
 800bcb6:	9301      	str	r3, [sp, #4]
 800bcb8:	3303      	adds	r3, #3
 800bcba:	e7f3      	b.n	800bca4 <_dtoa_r+0x9c>
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	4650      	mov	r0, sl
 800bcc2:	4659      	mov	r1, fp
 800bcc4:	f7f4 ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcc8:	ec4b ab19 	vmov	d9, sl, fp
 800bccc:	4680      	mov	r8, r0
 800bcce:	b158      	cbz	r0, 800bce8 <_dtoa_r+0xe0>
 800bcd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	6013      	str	r3, [r2, #0]
 800bcd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 856b 	beq.w	800c7b4 <_dtoa_r+0xbac>
 800bcde:	4883      	ldr	r0, [pc, #524]	; (800beec <_dtoa_r+0x2e4>)
 800bce0:	6018      	str	r0, [r3, #0]
 800bce2:	1e43      	subs	r3, r0, #1
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	e7df      	b.n	800bca8 <_dtoa_r+0xa0>
 800bce8:	ec4b ab10 	vmov	d0, sl, fp
 800bcec:	aa10      	add	r2, sp, #64	; 0x40
 800bcee:	a911      	add	r1, sp, #68	; 0x44
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f001 f9a9 	bl	800d048 <__d2b>
 800bcf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bcfa:	ee08 0a10 	vmov	s16, r0
 800bcfe:	2d00      	cmp	r5, #0
 800bd00:	f000 8084 	beq.w	800be0c <_dtoa_r+0x204>
 800bd04:	ee19 3a90 	vmov	r3, s19
 800bd08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bd10:	4656      	mov	r6, sl
 800bd12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bd16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bd1e:	4b74      	ldr	r3, [pc, #464]	; (800bef0 <_dtoa_r+0x2e8>)
 800bd20:	2200      	movs	r2, #0
 800bd22:	4630      	mov	r0, r6
 800bd24:	4639      	mov	r1, r7
 800bd26:	f7f4 faaf 	bl	8000288 <__aeabi_dsub>
 800bd2a:	a365      	add	r3, pc, #404	; (adr r3, 800bec0 <_dtoa_r+0x2b8>)
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	f7f4 fc62 	bl	80005f8 <__aeabi_dmul>
 800bd34:	a364      	add	r3, pc, #400	; (adr r3, 800bec8 <_dtoa_r+0x2c0>)
 800bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3a:	f7f4 faa7 	bl	800028c <__adddf3>
 800bd3e:	4606      	mov	r6, r0
 800bd40:	4628      	mov	r0, r5
 800bd42:	460f      	mov	r7, r1
 800bd44:	f7f4 fbee 	bl	8000524 <__aeabi_i2d>
 800bd48:	a361      	add	r3, pc, #388	; (adr r3, 800bed0 <_dtoa_r+0x2c8>)
 800bd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4e:	f7f4 fc53 	bl	80005f8 <__aeabi_dmul>
 800bd52:	4602      	mov	r2, r0
 800bd54:	460b      	mov	r3, r1
 800bd56:	4630      	mov	r0, r6
 800bd58:	4639      	mov	r1, r7
 800bd5a:	f7f4 fa97 	bl	800028c <__adddf3>
 800bd5e:	4606      	mov	r6, r0
 800bd60:	460f      	mov	r7, r1
 800bd62:	f7f4 fef9 	bl	8000b58 <__aeabi_d2iz>
 800bd66:	2200      	movs	r2, #0
 800bd68:	9000      	str	r0, [sp, #0]
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	4639      	mov	r1, r7
 800bd70:	f7f4 feb4 	bl	8000adc <__aeabi_dcmplt>
 800bd74:	b150      	cbz	r0, 800bd8c <_dtoa_r+0x184>
 800bd76:	9800      	ldr	r0, [sp, #0]
 800bd78:	f7f4 fbd4 	bl	8000524 <__aeabi_i2d>
 800bd7c:	4632      	mov	r2, r6
 800bd7e:	463b      	mov	r3, r7
 800bd80:	f7f4 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd84:	b910      	cbnz	r0, 800bd8c <_dtoa_r+0x184>
 800bd86:	9b00      	ldr	r3, [sp, #0]
 800bd88:	3b01      	subs	r3, #1
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	9b00      	ldr	r3, [sp, #0]
 800bd8e:	2b16      	cmp	r3, #22
 800bd90:	d85a      	bhi.n	800be48 <_dtoa_r+0x240>
 800bd92:	9a00      	ldr	r2, [sp, #0]
 800bd94:	4b57      	ldr	r3, [pc, #348]	; (800bef4 <_dtoa_r+0x2ec>)
 800bd96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	ec51 0b19 	vmov	r0, r1, d9
 800bda2:	f7f4 fe9b 	bl	8000adc <__aeabi_dcmplt>
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d050      	beq.n	800be4c <_dtoa_r+0x244>
 800bdaa:	9b00      	ldr	r3, [sp, #0]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bdb6:	1b5d      	subs	r5, r3, r5
 800bdb8:	1e6b      	subs	r3, r5, #1
 800bdba:	9305      	str	r3, [sp, #20]
 800bdbc:	bf45      	ittet	mi
 800bdbe:	f1c5 0301 	rsbmi	r3, r5, #1
 800bdc2:	9304      	strmi	r3, [sp, #16]
 800bdc4:	2300      	movpl	r3, #0
 800bdc6:	2300      	movmi	r3, #0
 800bdc8:	bf4c      	ite	mi
 800bdca:	9305      	strmi	r3, [sp, #20]
 800bdcc:	9304      	strpl	r3, [sp, #16]
 800bdce:	9b00      	ldr	r3, [sp, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	db3d      	blt.n	800be50 <_dtoa_r+0x248>
 800bdd4:	9b05      	ldr	r3, [sp, #20]
 800bdd6:	9a00      	ldr	r2, [sp, #0]
 800bdd8:	920a      	str	r2, [sp, #40]	; 0x28
 800bdda:	4413      	add	r3, r2
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	2300      	movs	r3, #0
 800bde0:	9307      	str	r3, [sp, #28]
 800bde2:	9b06      	ldr	r3, [sp, #24]
 800bde4:	2b09      	cmp	r3, #9
 800bde6:	f200 8089 	bhi.w	800befc <_dtoa_r+0x2f4>
 800bdea:	2b05      	cmp	r3, #5
 800bdec:	bfc4      	itt	gt
 800bdee:	3b04      	subgt	r3, #4
 800bdf0:	9306      	strgt	r3, [sp, #24]
 800bdf2:	9b06      	ldr	r3, [sp, #24]
 800bdf4:	f1a3 0302 	sub.w	r3, r3, #2
 800bdf8:	bfcc      	ite	gt
 800bdfa:	2500      	movgt	r5, #0
 800bdfc:	2501      	movle	r5, #1
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	f200 8087 	bhi.w	800bf12 <_dtoa_r+0x30a>
 800be04:	e8df f003 	tbb	[pc, r3]
 800be08:	59383a2d 	.word	0x59383a2d
 800be0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800be10:	441d      	add	r5, r3
 800be12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be16:	2b20      	cmp	r3, #32
 800be18:	bfc1      	itttt	gt
 800be1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800be22:	fa0b f303 	lslgt.w	r3, fp, r3
 800be26:	fa26 f000 	lsrgt.w	r0, r6, r0
 800be2a:	bfda      	itte	le
 800be2c:	f1c3 0320 	rsble	r3, r3, #32
 800be30:	fa06 f003 	lslle.w	r0, r6, r3
 800be34:	4318      	orrgt	r0, r3
 800be36:	f7f4 fb65 	bl	8000504 <__aeabi_ui2d>
 800be3a:	2301      	movs	r3, #1
 800be3c:	4606      	mov	r6, r0
 800be3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800be42:	3d01      	subs	r5, #1
 800be44:	930e      	str	r3, [sp, #56]	; 0x38
 800be46:	e76a      	b.n	800bd1e <_dtoa_r+0x116>
 800be48:	2301      	movs	r3, #1
 800be4a:	e7b2      	b.n	800bdb2 <_dtoa_r+0x1aa>
 800be4c:	900b      	str	r0, [sp, #44]	; 0x2c
 800be4e:	e7b1      	b.n	800bdb4 <_dtoa_r+0x1ac>
 800be50:	9b04      	ldr	r3, [sp, #16]
 800be52:	9a00      	ldr	r2, [sp, #0]
 800be54:	1a9b      	subs	r3, r3, r2
 800be56:	9304      	str	r3, [sp, #16]
 800be58:	4253      	negs	r3, r2
 800be5a:	9307      	str	r3, [sp, #28]
 800be5c:	2300      	movs	r3, #0
 800be5e:	930a      	str	r3, [sp, #40]	; 0x28
 800be60:	e7bf      	b.n	800bde2 <_dtoa_r+0x1da>
 800be62:	2300      	movs	r3, #0
 800be64:	9308      	str	r3, [sp, #32]
 800be66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be68:	2b00      	cmp	r3, #0
 800be6a:	dc55      	bgt.n	800bf18 <_dtoa_r+0x310>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800be72:	461a      	mov	r2, r3
 800be74:	9209      	str	r2, [sp, #36]	; 0x24
 800be76:	e00c      	b.n	800be92 <_dtoa_r+0x28a>
 800be78:	2301      	movs	r3, #1
 800be7a:	e7f3      	b.n	800be64 <_dtoa_r+0x25c>
 800be7c:	2300      	movs	r3, #0
 800be7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be80:	9308      	str	r3, [sp, #32]
 800be82:	9b00      	ldr	r3, [sp, #0]
 800be84:	4413      	add	r3, r2
 800be86:	9302      	str	r3, [sp, #8]
 800be88:	3301      	adds	r3, #1
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	9303      	str	r3, [sp, #12]
 800be8e:	bfb8      	it	lt
 800be90:	2301      	movlt	r3, #1
 800be92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800be94:	2200      	movs	r2, #0
 800be96:	6042      	str	r2, [r0, #4]
 800be98:	2204      	movs	r2, #4
 800be9a:	f102 0614 	add.w	r6, r2, #20
 800be9e:	429e      	cmp	r6, r3
 800bea0:	6841      	ldr	r1, [r0, #4]
 800bea2:	d93d      	bls.n	800bf20 <_dtoa_r+0x318>
 800bea4:	4620      	mov	r0, r4
 800bea6:	f000 fda7 	bl	800c9f8 <_Balloc>
 800beaa:	9001      	str	r0, [sp, #4]
 800beac:	2800      	cmp	r0, #0
 800beae:	d13b      	bne.n	800bf28 <_dtoa_r+0x320>
 800beb0:	4b11      	ldr	r3, [pc, #68]	; (800bef8 <_dtoa_r+0x2f0>)
 800beb2:	4602      	mov	r2, r0
 800beb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800beb8:	e6c0      	b.n	800bc3c <_dtoa_r+0x34>
 800beba:	2301      	movs	r3, #1
 800bebc:	e7df      	b.n	800be7e <_dtoa_r+0x276>
 800bebe:	bf00      	nop
 800bec0:	636f4361 	.word	0x636f4361
 800bec4:	3fd287a7 	.word	0x3fd287a7
 800bec8:	8b60c8b3 	.word	0x8b60c8b3
 800becc:	3fc68a28 	.word	0x3fc68a28
 800bed0:	509f79fb 	.word	0x509f79fb
 800bed4:	3fd34413 	.word	0x3fd34413
 800bed8:	08019b75 	.word	0x08019b75
 800bedc:	08019b8c 	.word	0x08019b8c
 800bee0:	7ff00000 	.word	0x7ff00000
 800bee4:	08019b71 	.word	0x08019b71
 800bee8:	08019b68 	.word	0x08019b68
 800beec:	08019b45 	.word	0x08019b45
 800bef0:	3ff80000 	.word	0x3ff80000
 800bef4:	08019ce0 	.word	0x08019ce0
 800bef8:	08019be7 	.word	0x08019be7
 800befc:	2501      	movs	r5, #1
 800befe:	2300      	movs	r3, #0
 800bf00:	9306      	str	r3, [sp, #24]
 800bf02:	9508      	str	r5, [sp, #32]
 800bf04:	f04f 33ff 	mov.w	r3, #4294967295
 800bf08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2312      	movs	r3, #18
 800bf10:	e7b0      	b.n	800be74 <_dtoa_r+0x26c>
 800bf12:	2301      	movs	r3, #1
 800bf14:	9308      	str	r3, [sp, #32]
 800bf16:	e7f5      	b.n	800bf04 <_dtoa_r+0x2fc>
 800bf18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf1e:	e7b8      	b.n	800be92 <_dtoa_r+0x28a>
 800bf20:	3101      	adds	r1, #1
 800bf22:	6041      	str	r1, [r0, #4]
 800bf24:	0052      	lsls	r2, r2, #1
 800bf26:	e7b8      	b.n	800be9a <_dtoa_r+0x292>
 800bf28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf2a:	9a01      	ldr	r2, [sp, #4]
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	9b03      	ldr	r3, [sp, #12]
 800bf30:	2b0e      	cmp	r3, #14
 800bf32:	f200 809d 	bhi.w	800c070 <_dtoa_r+0x468>
 800bf36:	2d00      	cmp	r5, #0
 800bf38:	f000 809a 	beq.w	800c070 <_dtoa_r+0x468>
 800bf3c:	9b00      	ldr	r3, [sp, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	dd32      	ble.n	800bfa8 <_dtoa_r+0x3a0>
 800bf42:	4ab7      	ldr	r2, [pc, #732]	; (800c220 <_dtoa_r+0x618>)
 800bf44:	f003 030f 	and.w	r3, r3, #15
 800bf48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf50:	9b00      	ldr	r3, [sp, #0]
 800bf52:	05d8      	lsls	r0, r3, #23
 800bf54:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bf58:	d516      	bpl.n	800bf88 <_dtoa_r+0x380>
 800bf5a:	4bb2      	ldr	r3, [pc, #712]	; (800c224 <_dtoa_r+0x61c>)
 800bf5c:	ec51 0b19 	vmov	r0, r1, d9
 800bf60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf64:	f7f4 fc72 	bl	800084c <__aeabi_ddiv>
 800bf68:	f007 070f 	and.w	r7, r7, #15
 800bf6c:	4682      	mov	sl, r0
 800bf6e:	468b      	mov	fp, r1
 800bf70:	2503      	movs	r5, #3
 800bf72:	4eac      	ldr	r6, [pc, #688]	; (800c224 <_dtoa_r+0x61c>)
 800bf74:	b957      	cbnz	r7, 800bf8c <_dtoa_r+0x384>
 800bf76:	4642      	mov	r2, r8
 800bf78:	464b      	mov	r3, r9
 800bf7a:	4650      	mov	r0, sl
 800bf7c:	4659      	mov	r1, fp
 800bf7e:	f7f4 fc65 	bl	800084c <__aeabi_ddiv>
 800bf82:	4682      	mov	sl, r0
 800bf84:	468b      	mov	fp, r1
 800bf86:	e028      	b.n	800bfda <_dtoa_r+0x3d2>
 800bf88:	2502      	movs	r5, #2
 800bf8a:	e7f2      	b.n	800bf72 <_dtoa_r+0x36a>
 800bf8c:	07f9      	lsls	r1, r7, #31
 800bf8e:	d508      	bpl.n	800bfa2 <_dtoa_r+0x39a>
 800bf90:	4640      	mov	r0, r8
 800bf92:	4649      	mov	r1, r9
 800bf94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf98:	f7f4 fb2e 	bl	80005f8 <__aeabi_dmul>
 800bf9c:	3501      	adds	r5, #1
 800bf9e:	4680      	mov	r8, r0
 800bfa0:	4689      	mov	r9, r1
 800bfa2:	107f      	asrs	r7, r7, #1
 800bfa4:	3608      	adds	r6, #8
 800bfa6:	e7e5      	b.n	800bf74 <_dtoa_r+0x36c>
 800bfa8:	f000 809b 	beq.w	800c0e2 <_dtoa_r+0x4da>
 800bfac:	9b00      	ldr	r3, [sp, #0]
 800bfae:	4f9d      	ldr	r7, [pc, #628]	; (800c224 <_dtoa_r+0x61c>)
 800bfb0:	425e      	negs	r6, r3
 800bfb2:	4b9b      	ldr	r3, [pc, #620]	; (800c220 <_dtoa_r+0x618>)
 800bfb4:	f006 020f 	and.w	r2, r6, #15
 800bfb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc0:	ec51 0b19 	vmov	r0, r1, d9
 800bfc4:	f7f4 fb18 	bl	80005f8 <__aeabi_dmul>
 800bfc8:	1136      	asrs	r6, r6, #4
 800bfca:	4682      	mov	sl, r0
 800bfcc:	468b      	mov	fp, r1
 800bfce:	2300      	movs	r3, #0
 800bfd0:	2502      	movs	r5, #2
 800bfd2:	2e00      	cmp	r6, #0
 800bfd4:	d17a      	bne.n	800c0cc <_dtoa_r+0x4c4>
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d1d3      	bne.n	800bf82 <_dtoa_r+0x37a>
 800bfda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	f000 8082 	beq.w	800c0e6 <_dtoa_r+0x4de>
 800bfe2:	4b91      	ldr	r3, [pc, #580]	; (800c228 <_dtoa_r+0x620>)
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	4650      	mov	r0, sl
 800bfe8:	4659      	mov	r1, fp
 800bfea:	f7f4 fd77 	bl	8000adc <__aeabi_dcmplt>
 800bfee:	2800      	cmp	r0, #0
 800bff0:	d079      	beq.n	800c0e6 <_dtoa_r+0x4de>
 800bff2:	9b03      	ldr	r3, [sp, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d076      	beq.n	800c0e6 <_dtoa_r+0x4de>
 800bff8:	9b02      	ldr	r3, [sp, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	dd36      	ble.n	800c06c <_dtoa_r+0x464>
 800bffe:	9b00      	ldr	r3, [sp, #0]
 800c000:	4650      	mov	r0, sl
 800c002:	4659      	mov	r1, fp
 800c004:	1e5f      	subs	r7, r3, #1
 800c006:	2200      	movs	r2, #0
 800c008:	4b88      	ldr	r3, [pc, #544]	; (800c22c <_dtoa_r+0x624>)
 800c00a:	f7f4 faf5 	bl	80005f8 <__aeabi_dmul>
 800c00e:	9e02      	ldr	r6, [sp, #8]
 800c010:	4682      	mov	sl, r0
 800c012:	468b      	mov	fp, r1
 800c014:	3501      	adds	r5, #1
 800c016:	4628      	mov	r0, r5
 800c018:	f7f4 fa84 	bl	8000524 <__aeabi_i2d>
 800c01c:	4652      	mov	r2, sl
 800c01e:	465b      	mov	r3, fp
 800c020:	f7f4 faea 	bl	80005f8 <__aeabi_dmul>
 800c024:	4b82      	ldr	r3, [pc, #520]	; (800c230 <_dtoa_r+0x628>)
 800c026:	2200      	movs	r2, #0
 800c028:	f7f4 f930 	bl	800028c <__adddf3>
 800c02c:	46d0      	mov	r8, sl
 800c02e:	46d9      	mov	r9, fp
 800c030:	4682      	mov	sl, r0
 800c032:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c036:	2e00      	cmp	r6, #0
 800c038:	d158      	bne.n	800c0ec <_dtoa_r+0x4e4>
 800c03a:	4b7e      	ldr	r3, [pc, #504]	; (800c234 <_dtoa_r+0x62c>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	4640      	mov	r0, r8
 800c040:	4649      	mov	r1, r9
 800c042:	f7f4 f921 	bl	8000288 <__aeabi_dsub>
 800c046:	4652      	mov	r2, sl
 800c048:	465b      	mov	r3, fp
 800c04a:	4680      	mov	r8, r0
 800c04c:	4689      	mov	r9, r1
 800c04e:	f7f4 fd63 	bl	8000b18 <__aeabi_dcmpgt>
 800c052:	2800      	cmp	r0, #0
 800c054:	f040 8295 	bne.w	800c582 <_dtoa_r+0x97a>
 800c058:	4652      	mov	r2, sl
 800c05a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c05e:	4640      	mov	r0, r8
 800c060:	4649      	mov	r1, r9
 800c062:	f7f4 fd3b 	bl	8000adc <__aeabi_dcmplt>
 800c066:	2800      	cmp	r0, #0
 800c068:	f040 8289 	bne.w	800c57e <_dtoa_r+0x976>
 800c06c:	ec5b ab19 	vmov	sl, fp, d9
 800c070:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c072:	2b00      	cmp	r3, #0
 800c074:	f2c0 8148 	blt.w	800c308 <_dtoa_r+0x700>
 800c078:	9a00      	ldr	r2, [sp, #0]
 800c07a:	2a0e      	cmp	r2, #14
 800c07c:	f300 8144 	bgt.w	800c308 <_dtoa_r+0x700>
 800c080:	4b67      	ldr	r3, [pc, #412]	; (800c220 <_dtoa_r+0x618>)
 800c082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c086:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f280 80d5 	bge.w	800c23c <_dtoa_r+0x634>
 800c092:	9b03      	ldr	r3, [sp, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f300 80d1 	bgt.w	800c23c <_dtoa_r+0x634>
 800c09a:	f040 826f 	bne.w	800c57c <_dtoa_r+0x974>
 800c09e:	4b65      	ldr	r3, [pc, #404]	; (800c234 <_dtoa_r+0x62c>)
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	4640      	mov	r0, r8
 800c0a4:	4649      	mov	r1, r9
 800c0a6:	f7f4 faa7 	bl	80005f8 <__aeabi_dmul>
 800c0aa:	4652      	mov	r2, sl
 800c0ac:	465b      	mov	r3, fp
 800c0ae:	f7f4 fd29 	bl	8000b04 <__aeabi_dcmpge>
 800c0b2:	9e03      	ldr	r6, [sp, #12]
 800c0b4:	4637      	mov	r7, r6
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	f040 8245 	bne.w	800c546 <_dtoa_r+0x93e>
 800c0bc:	9d01      	ldr	r5, [sp, #4]
 800c0be:	2331      	movs	r3, #49	; 0x31
 800c0c0:	f805 3b01 	strb.w	r3, [r5], #1
 800c0c4:	9b00      	ldr	r3, [sp, #0]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	9300      	str	r3, [sp, #0]
 800c0ca:	e240      	b.n	800c54e <_dtoa_r+0x946>
 800c0cc:	07f2      	lsls	r2, r6, #31
 800c0ce:	d505      	bpl.n	800c0dc <_dtoa_r+0x4d4>
 800c0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0d4:	f7f4 fa90 	bl	80005f8 <__aeabi_dmul>
 800c0d8:	3501      	adds	r5, #1
 800c0da:	2301      	movs	r3, #1
 800c0dc:	1076      	asrs	r6, r6, #1
 800c0de:	3708      	adds	r7, #8
 800c0e0:	e777      	b.n	800bfd2 <_dtoa_r+0x3ca>
 800c0e2:	2502      	movs	r5, #2
 800c0e4:	e779      	b.n	800bfda <_dtoa_r+0x3d2>
 800c0e6:	9f00      	ldr	r7, [sp, #0]
 800c0e8:	9e03      	ldr	r6, [sp, #12]
 800c0ea:	e794      	b.n	800c016 <_dtoa_r+0x40e>
 800c0ec:	9901      	ldr	r1, [sp, #4]
 800c0ee:	4b4c      	ldr	r3, [pc, #304]	; (800c220 <_dtoa_r+0x618>)
 800c0f0:	4431      	add	r1, r6
 800c0f2:	910d      	str	r1, [sp, #52]	; 0x34
 800c0f4:	9908      	ldr	r1, [sp, #32]
 800c0f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c0fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0fe:	2900      	cmp	r1, #0
 800c100:	d043      	beq.n	800c18a <_dtoa_r+0x582>
 800c102:	494d      	ldr	r1, [pc, #308]	; (800c238 <_dtoa_r+0x630>)
 800c104:	2000      	movs	r0, #0
 800c106:	f7f4 fba1 	bl	800084c <__aeabi_ddiv>
 800c10a:	4652      	mov	r2, sl
 800c10c:	465b      	mov	r3, fp
 800c10e:	f7f4 f8bb 	bl	8000288 <__aeabi_dsub>
 800c112:	9d01      	ldr	r5, [sp, #4]
 800c114:	4682      	mov	sl, r0
 800c116:	468b      	mov	fp, r1
 800c118:	4649      	mov	r1, r9
 800c11a:	4640      	mov	r0, r8
 800c11c:	f7f4 fd1c 	bl	8000b58 <__aeabi_d2iz>
 800c120:	4606      	mov	r6, r0
 800c122:	f7f4 f9ff 	bl	8000524 <__aeabi_i2d>
 800c126:	4602      	mov	r2, r0
 800c128:	460b      	mov	r3, r1
 800c12a:	4640      	mov	r0, r8
 800c12c:	4649      	mov	r1, r9
 800c12e:	f7f4 f8ab 	bl	8000288 <__aeabi_dsub>
 800c132:	3630      	adds	r6, #48	; 0x30
 800c134:	f805 6b01 	strb.w	r6, [r5], #1
 800c138:	4652      	mov	r2, sl
 800c13a:	465b      	mov	r3, fp
 800c13c:	4680      	mov	r8, r0
 800c13e:	4689      	mov	r9, r1
 800c140:	f7f4 fccc 	bl	8000adc <__aeabi_dcmplt>
 800c144:	2800      	cmp	r0, #0
 800c146:	d163      	bne.n	800c210 <_dtoa_r+0x608>
 800c148:	4642      	mov	r2, r8
 800c14a:	464b      	mov	r3, r9
 800c14c:	4936      	ldr	r1, [pc, #216]	; (800c228 <_dtoa_r+0x620>)
 800c14e:	2000      	movs	r0, #0
 800c150:	f7f4 f89a 	bl	8000288 <__aeabi_dsub>
 800c154:	4652      	mov	r2, sl
 800c156:	465b      	mov	r3, fp
 800c158:	f7f4 fcc0 	bl	8000adc <__aeabi_dcmplt>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	f040 80b5 	bne.w	800c2cc <_dtoa_r+0x6c4>
 800c162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c164:	429d      	cmp	r5, r3
 800c166:	d081      	beq.n	800c06c <_dtoa_r+0x464>
 800c168:	4b30      	ldr	r3, [pc, #192]	; (800c22c <_dtoa_r+0x624>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	4650      	mov	r0, sl
 800c16e:	4659      	mov	r1, fp
 800c170:	f7f4 fa42 	bl	80005f8 <__aeabi_dmul>
 800c174:	4b2d      	ldr	r3, [pc, #180]	; (800c22c <_dtoa_r+0x624>)
 800c176:	4682      	mov	sl, r0
 800c178:	468b      	mov	fp, r1
 800c17a:	4640      	mov	r0, r8
 800c17c:	4649      	mov	r1, r9
 800c17e:	2200      	movs	r2, #0
 800c180:	f7f4 fa3a 	bl	80005f8 <__aeabi_dmul>
 800c184:	4680      	mov	r8, r0
 800c186:	4689      	mov	r9, r1
 800c188:	e7c6      	b.n	800c118 <_dtoa_r+0x510>
 800c18a:	4650      	mov	r0, sl
 800c18c:	4659      	mov	r1, fp
 800c18e:	f7f4 fa33 	bl	80005f8 <__aeabi_dmul>
 800c192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c194:	9d01      	ldr	r5, [sp, #4]
 800c196:	930f      	str	r3, [sp, #60]	; 0x3c
 800c198:	4682      	mov	sl, r0
 800c19a:	468b      	mov	fp, r1
 800c19c:	4649      	mov	r1, r9
 800c19e:	4640      	mov	r0, r8
 800c1a0:	f7f4 fcda 	bl	8000b58 <__aeabi_d2iz>
 800c1a4:	4606      	mov	r6, r0
 800c1a6:	f7f4 f9bd 	bl	8000524 <__aeabi_i2d>
 800c1aa:	3630      	adds	r6, #48	; 0x30
 800c1ac:	4602      	mov	r2, r0
 800c1ae:	460b      	mov	r3, r1
 800c1b0:	4640      	mov	r0, r8
 800c1b2:	4649      	mov	r1, r9
 800c1b4:	f7f4 f868 	bl	8000288 <__aeabi_dsub>
 800c1b8:	f805 6b01 	strb.w	r6, [r5], #1
 800c1bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1be:	429d      	cmp	r5, r3
 800c1c0:	4680      	mov	r8, r0
 800c1c2:	4689      	mov	r9, r1
 800c1c4:	f04f 0200 	mov.w	r2, #0
 800c1c8:	d124      	bne.n	800c214 <_dtoa_r+0x60c>
 800c1ca:	4b1b      	ldr	r3, [pc, #108]	; (800c238 <_dtoa_r+0x630>)
 800c1cc:	4650      	mov	r0, sl
 800c1ce:	4659      	mov	r1, fp
 800c1d0:	f7f4 f85c 	bl	800028c <__adddf3>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	4640      	mov	r0, r8
 800c1da:	4649      	mov	r1, r9
 800c1dc:	f7f4 fc9c 	bl	8000b18 <__aeabi_dcmpgt>
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	d173      	bne.n	800c2cc <_dtoa_r+0x6c4>
 800c1e4:	4652      	mov	r2, sl
 800c1e6:	465b      	mov	r3, fp
 800c1e8:	4913      	ldr	r1, [pc, #76]	; (800c238 <_dtoa_r+0x630>)
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	f7f4 f84c 	bl	8000288 <__aeabi_dsub>
 800c1f0:	4602      	mov	r2, r0
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	4640      	mov	r0, r8
 800c1f6:	4649      	mov	r1, r9
 800c1f8:	f7f4 fc70 	bl	8000adc <__aeabi_dcmplt>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	f43f af35 	beq.w	800c06c <_dtoa_r+0x464>
 800c202:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c204:	1e6b      	subs	r3, r5, #1
 800c206:	930f      	str	r3, [sp, #60]	; 0x3c
 800c208:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c20c:	2b30      	cmp	r3, #48	; 0x30
 800c20e:	d0f8      	beq.n	800c202 <_dtoa_r+0x5fa>
 800c210:	9700      	str	r7, [sp, #0]
 800c212:	e049      	b.n	800c2a8 <_dtoa_r+0x6a0>
 800c214:	4b05      	ldr	r3, [pc, #20]	; (800c22c <_dtoa_r+0x624>)
 800c216:	f7f4 f9ef 	bl	80005f8 <__aeabi_dmul>
 800c21a:	4680      	mov	r8, r0
 800c21c:	4689      	mov	r9, r1
 800c21e:	e7bd      	b.n	800c19c <_dtoa_r+0x594>
 800c220:	08019ce0 	.word	0x08019ce0
 800c224:	08019cb8 	.word	0x08019cb8
 800c228:	3ff00000 	.word	0x3ff00000
 800c22c:	40240000 	.word	0x40240000
 800c230:	401c0000 	.word	0x401c0000
 800c234:	40140000 	.word	0x40140000
 800c238:	3fe00000 	.word	0x3fe00000
 800c23c:	9d01      	ldr	r5, [sp, #4]
 800c23e:	4656      	mov	r6, sl
 800c240:	465f      	mov	r7, fp
 800c242:	4642      	mov	r2, r8
 800c244:	464b      	mov	r3, r9
 800c246:	4630      	mov	r0, r6
 800c248:	4639      	mov	r1, r7
 800c24a:	f7f4 faff 	bl	800084c <__aeabi_ddiv>
 800c24e:	f7f4 fc83 	bl	8000b58 <__aeabi_d2iz>
 800c252:	4682      	mov	sl, r0
 800c254:	f7f4 f966 	bl	8000524 <__aeabi_i2d>
 800c258:	4642      	mov	r2, r8
 800c25a:	464b      	mov	r3, r9
 800c25c:	f7f4 f9cc 	bl	80005f8 <__aeabi_dmul>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4630      	mov	r0, r6
 800c266:	4639      	mov	r1, r7
 800c268:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c26c:	f7f4 f80c 	bl	8000288 <__aeabi_dsub>
 800c270:	f805 6b01 	strb.w	r6, [r5], #1
 800c274:	9e01      	ldr	r6, [sp, #4]
 800c276:	9f03      	ldr	r7, [sp, #12]
 800c278:	1bae      	subs	r6, r5, r6
 800c27a:	42b7      	cmp	r7, r6
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	d135      	bne.n	800c2ee <_dtoa_r+0x6e6>
 800c282:	f7f4 f803 	bl	800028c <__adddf3>
 800c286:	4642      	mov	r2, r8
 800c288:	464b      	mov	r3, r9
 800c28a:	4606      	mov	r6, r0
 800c28c:	460f      	mov	r7, r1
 800c28e:	f7f4 fc43 	bl	8000b18 <__aeabi_dcmpgt>
 800c292:	b9d0      	cbnz	r0, 800c2ca <_dtoa_r+0x6c2>
 800c294:	4642      	mov	r2, r8
 800c296:	464b      	mov	r3, r9
 800c298:	4630      	mov	r0, r6
 800c29a:	4639      	mov	r1, r7
 800c29c:	f7f4 fc14 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2a0:	b110      	cbz	r0, 800c2a8 <_dtoa_r+0x6a0>
 800c2a2:	f01a 0f01 	tst.w	sl, #1
 800c2a6:	d110      	bne.n	800c2ca <_dtoa_r+0x6c2>
 800c2a8:	4620      	mov	r0, r4
 800c2aa:	ee18 1a10 	vmov	r1, s16
 800c2ae:	f000 fbe3 	bl	800ca78 <_Bfree>
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	9800      	ldr	r0, [sp, #0]
 800c2b6:	702b      	strb	r3, [r5, #0]
 800c2b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2ba:	3001      	adds	r0, #1
 800c2bc:	6018      	str	r0, [r3, #0]
 800c2be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f43f acf1 	beq.w	800bca8 <_dtoa_r+0xa0>
 800c2c6:	601d      	str	r5, [r3, #0]
 800c2c8:	e4ee      	b.n	800bca8 <_dtoa_r+0xa0>
 800c2ca:	9f00      	ldr	r7, [sp, #0]
 800c2cc:	462b      	mov	r3, r5
 800c2ce:	461d      	mov	r5, r3
 800c2d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2d4:	2a39      	cmp	r2, #57	; 0x39
 800c2d6:	d106      	bne.n	800c2e6 <_dtoa_r+0x6de>
 800c2d8:	9a01      	ldr	r2, [sp, #4]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d1f7      	bne.n	800c2ce <_dtoa_r+0x6c6>
 800c2de:	9901      	ldr	r1, [sp, #4]
 800c2e0:	2230      	movs	r2, #48	; 0x30
 800c2e2:	3701      	adds	r7, #1
 800c2e4:	700a      	strb	r2, [r1, #0]
 800c2e6:	781a      	ldrb	r2, [r3, #0]
 800c2e8:	3201      	adds	r2, #1
 800c2ea:	701a      	strb	r2, [r3, #0]
 800c2ec:	e790      	b.n	800c210 <_dtoa_r+0x608>
 800c2ee:	4ba6      	ldr	r3, [pc, #664]	; (800c588 <_dtoa_r+0x980>)
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f7f4 f981 	bl	80005f8 <__aeabi_dmul>
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	4606      	mov	r6, r0
 800c2fc:	460f      	mov	r7, r1
 800c2fe:	f7f4 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c302:	2800      	cmp	r0, #0
 800c304:	d09d      	beq.n	800c242 <_dtoa_r+0x63a>
 800c306:	e7cf      	b.n	800c2a8 <_dtoa_r+0x6a0>
 800c308:	9a08      	ldr	r2, [sp, #32]
 800c30a:	2a00      	cmp	r2, #0
 800c30c:	f000 80d7 	beq.w	800c4be <_dtoa_r+0x8b6>
 800c310:	9a06      	ldr	r2, [sp, #24]
 800c312:	2a01      	cmp	r2, #1
 800c314:	f300 80ba 	bgt.w	800c48c <_dtoa_r+0x884>
 800c318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c31a:	2a00      	cmp	r2, #0
 800c31c:	f000 80b2 	beq.w	800c484 <_dtoa_r+0x87c>
 800c320:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c324:	9e07      	ldr	r6, [sp, #28]
 800c326:	9d04      	ldr	r5, [sp, #16]
 800c328:	9a04      	ldr	r2, [sp, #16]
 800c32a:	441a      	add	r2, r3
 800c32c:	9204      	str	r2, [sp, #16]
 800c32e:	9a05      	ldr	r2, [sp, #20]
 800c330:	2101      	movs	r1, #1
 800c332:	441a      	add	r2, r3
 800c334:	4620      	mov	r0, r4
 800c336:	9205      	str	r2, [sp, #20]
 800c338:	f000 fc56 	bl	800cbe8 <__i2b>
 800c33c:	4607      	mov	r7, r0
 800c33e:	2d00      	cmp	r5, #0
 800c340:	dd0c      	ble.n	800c35c <_dtoa_r+0x754>
 800c342:	9b05      	ldr	r3, [sp, #20]
 800c344:	2b00      	cmp	r3, #0
 800c346:	dd09      	ble.n	800c35c <_dtoa_r+0x754>
 800c348:	42ab      	cmp	r3, r5
 800c34a:	9a04      	ldr	r2, [sp, #16]
 800c34c:	bfa8      	it	ge
 800c34e:	462b      	movge	r3, r5
 800c350:	1ad2      	subs	r2, r2, r3
 800c352:	9204      	str	r2, [sp, #16]
 800c354:	9a05      	ldr	r2, [sp, #20]
 800c356:	1aed      	subs	r5, r5, r3
 800c358:	1ad3      	subs	r3, r2, r3
 800c35a:	9305      	str	r3, [sp, #20]
 800c35c:	9b07      	ldr	r3, [sp, #28]
 800c35e:	b31b      	cbz	r3, 800c3a8 <_dtoa_r+0x7a0>
 800c360:	9b08      	ldr	r3, [sp, #32]
 800c362:	2b00      	cmp	r3, #0
 800c364:	f000 80af 	beq.w	800c4c6 <_dtoa_r+0x8be>
 800c368:	2e00      	cmp	r6, #0
 800c36a:	dd13      	ble.n	800c394 <_dtoa_r+0x78c>
 800c36c:	4639      	mov	r1, r7
 800c36e:	4632      	mov	r2, r6
 800c370:	4620      	mov	r0, r4
 800c372:	f000 fcf9 	bl	800cd68 <__pow5mult>
 800c376:	ee18 2a10 	vmov	r2, s16
 800c37a:	4601      	mov	r1, r0
 800c37c:	4607      	mov	r7, r0
 800c37e:	4620      	mov	r0, r4
 800c380:	f000 fc48 	bl	800cc14 <__multiply>
 800c384:	ee18 1a10 	vmov	r1, s16
 800c388:	4680      	mov	r8, r0
 800c38a:	4620      	mov	r0, r4
 800c38c:	f000 fb74 	bl	800ca78 <_Bfree>
 800c390:	ee08 8a10 	vmov	s16, r8
 800c394:	9b07      	ldr	r3, [sp, #28]
 800c396:	1b9a      	subs	r2, r3, r6
 800c398:	d006      	beq.n	800c3a8 <_dtoa_r+0x7a0>
 800c39a:	ee18 1a10 	vmov	r1, s16
 800c39e:	4620      	mov	r0, r4
 800c3a0:	f000 fce2 	bl	800cd68 <__pow5mult>
 800c3a4:	ee08 0a10 	vmov	s16, r0
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f000 fc1c 	bl	800cbe8 <__i2b>
 800c3b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	4606      	mov	r6, r0
 800c3b6:	f340 8088 	ble.w	800c4ca <_dtoa_r+0x8c2>
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	4601      	mov	r1, r0
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f000 fcd2 	bl	800cd68 <__pow5mult>
 800c3c4:	9b06      	ldr	r3, [sp, #24]
 800c3c6:	2b01      	cmp	r3, #1
 800c3c8:	4606      	mov	r6, r0
 800c3ca:	f340 8081 	ble.w	800c4d0 <_dtoa_r+0x8c8>
 800c3ce:	f04f 0800 	mov.w	r8, #0
 800c3d2:	6933      	ldr	r3, [r6, #16]
 800c3d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c3d8:	6918      	ldr	r0, [r3, #16]
 800c3da:	f000 fbb5 	bl	800cb48 <__hi0bits>
 800c3de:	f1c0 0020 	rsb	r0, r0, #32
 800c3e2:	9b05      	ldr	r3, [sp, #20]
 800c3e4:	4418      	add	r0, r3
 800c3e6:	f010 001f 	ands.w	r0, r0, #31
 800c3ea:	f000 8092 	beq.w	800c512 <_dtoa_r+0x90a>
 800c3ee:	f1c0 0320 	rsb	r3, r0, #32
 800c3f2:	2b04      	cmp	r3, #4
 800c3f4:	f340 808a 	ble.w	800c50c <_dtoa_r+0x904>
 800c3f8:	f1c0 001c 	rsb	r0, r0, #28
 800c3fc:	9b04      	ldr	r3, [sp, #16]
 800c3fe:	4403      	add	r3, r0
 800c400:	9304      	str	r3, [sp, #16]
 800c402:	9b05      	ldr	r3, [sp, #20]
 800c404:	4403      	add	r3, r0
 800c406:	4405      	add	r5, r0
 800c408:	9305      	str	r3, [sp, #20]
 800c40a:	9b04      	ldr	r3, [sp, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	dd07      	ble.n	800c420 <_dtoa_r+0x818>
 800c410:	ee18 1a10 	vmov	r1, s16
 800c414:	461a      	mov	r2, r3
 800c416:	4620      	mov	r0, r4
 800c418:	f000 fd00 	bl	800ce1c <__lshift>
 800c41c:	ee08 0a10 	vmov	s16, r0
 800c420:	9b05      	ldr	r3, [sp, #20]
 800c422:	2b00      	cmp	r3, #0
 800c424:	dd05      	ble.n	800c432 <_dtoa_r+0x82a>
 800c426:	4631      	mov	r1, r6
 800c428:	461a      	mov	r2, r3
 800c42a:	4620      	mov	r0, r4
 800c42c:	f000 fcf6 	bl	800ce1c <__lshift>
 800c430:	4606      	mov	r6, r0
 800c432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c434:	2b00      	cmp	r3, #0
 800c436:	d06e      	beq.n	800c516 <_dtoa_r+0x90e>
 800c438:	ee18 0a10 	vmov	r0, s16
 800c43c:	4631      	mov	r1, r6
 800c43e:	f000 fd5d 	bl	800cefc <__mcmp>
 800c442:	2800      	cmp	r0, #0
 800c444:	da67      	bge.n	800c516 <_dtoa_r+0x90e>
 800c446:	9b00      	ldr	r3, [sp, #0]
 800c448:	3b01      	subs	r3, #1
 800c44a:	ee18 1a10 	vmov	r1, s16
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	220a      	movs	r2, #10
 800c452:	2300      	movs	r3, #0
 800c454:	4620      	mov	r0, r4
 800c456:	f000 fb31 	bl	800cabc <__multadd>
 800c45a:	9b08      	ldr	r3, [sp, #32]
 800c45c:	ee08 0a10 	vmov	s16, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	f000 81b1 	beq.w	800c7c8 <_dtoa_r+0xbc0>
 800c466:	2300      	movs	r3, #0
 800c468:	4639      	mov	r1, r7
 800c46a:	220a      	movs	r2, #10
 800c46c:	4620      	mov	r0, r4
 800c46e:	f000 fb25 	bl	800cabc <__multadd>
 800c472:	9b02      	ldr	r3, [sp, #8]
 800c474:	2b00      	cmp	r3, #0
 800c476:	4607      	mov	r7, r0
 800c478:	f300 808e 	bgt.w	800c598 <_dtoa_r+0x990>
 800c47c:	9b06      	ldr	r3, [sp, #24]
 800c47e:	2b02      	cmp	r3, #2
 800c480:	dc51      	bgt.n	800c526 <_dtoa_r+0x91e>
 800c482:	e089      	b.n	800c598 <_dtoa_r+0x990>
 800c484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c486:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c48a:	e74b      	b.n	800c324 <_dtoa_r+0x71c>
 800c48c:	9b03      	ldr	r3, [sp, #12]
 800c48e:	1e5e      	subs	r6, r3, #1
 800c490:	9b07      	ldr	r3, [sp, #28]
 800c492:	42b3      	cmp	r3, r6
 800c494:	bfbf      	itttt	lt
 800c496:	9b07      	ldrlt	r3, [sp, #28]
 800c498:	9607      	strlt	r6, [sp, #28]
 800c49a:	1af2      	sublt	r2, r6, r3
 800c49c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c49e:	bfb6      	itet	lt
 800c4a0:	189b      	addlt	r3, r3, r2
 800c4a2:	1b9e      	subge	r6, r3, r6
 800c4a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c4a6:	9b03      	ldr	r3, [sp, #12]
 800c4a8:	bfb8      	it	lt
 800c4aa:	2600      	movlt	r6, #0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	bfb7      	itett	lt
 800c4b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c4b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c4b8:	1a9d      	sublt	r5, r3, r2
 800c4ba:	2300      	movlt	r3, #0
 800c4bc:	e734      	b.n	800c328 <_dtoa_r+0x720>
 800c4be:	9e07      	ldr	r6, [sp, #28]
 800c4c0:	9d04      	ldr	r5, [sp, #16]
 800c4c2:	9f08      	ldr	r7, [sp, #32]
 800c4c4:	e73b      	b.n	800c33e <_dtoa_r+0x736>
 800c4c6:	9a07      	ldr	r2, [sp, #28]
 800c4c8:	e767      	b.n	800c39a <_dtoa_r+0x792>
 800c4ca:	9b06      	ldr	r3, [sp, #24]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	dc18      	bgt.n	800c502 <_dtoa_r+0x8fa>
 800c4d0:	f1ba 0f00 	cmp.w	sl, #0
 800c4d4:	d115      	bne.n	800c502 <_dtoa_r+0x8fa>
 800c4d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4da:	b993      	cbnz	r3, 800c502 <_dtoa_r+0x8fa>
 800c4dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c4e0:	0d1b      	lsrs	r3, r3, #20
 800c4e2:	051b      	lsls	r3, r3, #20
 800c4e4:	b183      	cbz	r3, 800c508 <_dtoa_r+0x900>
 800c4e6:	9b04      	ldr	r3, [sp, #16]
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	9304      	str	r3, [sp, #16]
 800c4ec:	9b05      	ldr	r3, [sp, #20]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	9305      	str	r3, [sp, #20]
 800c4f2:	f04f 0801 	mov.w	r8, #1
 800c4f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f47f af6a 	bne.w	800c3d2 <_dtoa_r+0x7ca>
 800c4fe:	2001      	movs	r0, #1
 800c500:	e76f      	b.n	800c3e2 <_dtoa_r+0x7da>
 800c502:	f04f 0800 	mov.w	r8, #0
 800c506:	e7f6      	b.n	800c4f6 <_dtoa_r+0x8ee>
 800c508:	4698      	mov	r8, r3
 800c50a:	e7f4      	b.n	800c4f6 <_dtoa_r+0x8ee>
 800c50c:	f43f af7d 	beq.w	800c40a <_dtoa_r+0x802>
 800c510:	4618      	mov	r0, r3
 800c512:	301c      	adds	r0, #28
 800c514:	e772      	b.n	800c3fc <_dtoa_r+0x7f4>
 800c516:	9b03      	ldr	r3, [sp, #12]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	dc37      	bgt.n	800c58c <_dtoa_r+0x984>
 800c51c:	9b06      	ldr	r3, [sp, #24]
 800c51e:	2b02      	cmp	r3, #2
 800c520:	dd34      	ble.n	800c58c <_dtoa_r+0x984>
 800c522:	9b03      	ldr	r3, [sp, #12]
 800c524:	9302      	str	r3, [sp, #8]
 800c526:	9b02      	ldr	r3, [sp, #8]
 800c528:	b96b      	cbnz	r3, 800c546 <_dtoa_r+0x93e>
 800c52a:	4631      	mov	r1, r6
 800c52c:	2205      	movs	r2, #5
 800c52e:	4620      	mov	r0, r4
 800c530:	f000 fac4 	bl	800cabc <__multadd>
 800c534:	4601      	mov	r1, r0
 800c536:	4606      	mov	r6, r0
 800c538:	ee18 0a10 	vmov	r0, s16
 800c53c:	f000 fcde 	bl	800cefc <__mcmp>
 800c540:	2800      	cmp	r0, #0
 800c542:	f73f adbb 	bgt.w	800c0bc <_dtoa_r+0x4b4>
 800c546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c548:	9d01      	ldr	r5, [sp, #4]
 800c54a:	43db      	mvns	r3, r3
 800c54c:	9300      	str	r3, [sp, #0]
 800c54e:	f04f 0800 	mov.w	r8, #0
 800c552:	4631      	mov	r1, r6
 800c554:	4620      	mov	r0, r4
 800c556:	f000 fa8f 	bl	800ca78 <_Bfree>
 800c55a:	2f00      	cmp	r7, #0
 800c55c:	f43f aea4 	beq.w	800c2a8 <_dtoa_r+0x6a0>
 800c560:	f1b8 0f00 	cmp.w	r8, #0
 800c564:	d005      	beq.n	800c572 <_dtoa_r+0x96a>
 800c566:	45b8      	cmp	r8, r7
 800c568:	d003      	beq.n	800c572 <_dtoa_r+0x96a>
 800c56a:	4641      	mov	r1, r8
 800c56c:	4620      	mov	r0, r4
 800c56e:	f000 fa83 	bl	800ca78 <_Bfree>
 800c572:	4639      	mov	r1, r7
 800c574:	4620      	mov	r0, r4
 800c576:	f000 fa7f 	bl	800ca78 <_Bfree>
 800c57a:	e695      	b.n	800c2a8 <_dtoa_r+0x6a0>
 800c57c:	2600      	movs	r6, #0
 800c57e:	4637      	mov	r7, r6
 800c580:	e7e1      	b.n	800c546 <_dtoa_r+0x93e>
 800c582:	9700      	str	r7, [sp, #0]
 800c584:	4637      	mov	r7, r6
 800c586:	e599      	b.n	800c0bc <_dtoa_r+0x4b4>
 800c588:	40240000 	.word	0x40240000
 800c58c:	9b08      	ldr	r3, [sp, #32]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f000 80ca 	beq.w	800c728 <_dtoa_r+0xb20>
 800c594:	9b03      	ldr	r3, [sp, #12]
 800c596:	9302      	str	r3, [sp, #8]
 800c598:	2d00      	cmp	r5, #0
 800c59a:	dd05      	ble.n	800c5a8 <_dtoa_r+0x9a0>
 800c59c:	4639      	mov	r1, r7
 800c59e:	462a      	mov	r2, r5
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	f000 fc3b 	bl	800ce1c <__lshift>
 800c5a6:	4607      	mov	r7, r0
 800c5a8:	f1b8 0f00 	cmp.w	r8, #0
 800c5ac:	d05b      	beq.n	800c666 <_dtoa_r+0xa5e>
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f000 fa21 	bl	800c9f8 <_Balloc>
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	b928      	cbnz	r0, 800c5c6 <_dtoa_r+0x9be>
 800c5ba:	4b87      	ldr	r3, [pc, #540]	; (800c7d8 <_dtoa_r+0xbd0>)
 800c5bc:	4602      	mov	r2, r0
 800c5be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c5c2:	f7ff bb3b 	b.w	800bc3c <_dtoa_r+0x34>
 800c5c6:	693a      	ldr	r2, [r7, #16]
 800c5c8:	3202      	adds	r2, #2
 800c5ca:	0092      	lsls	r2, r2, #2
 800c5cc:	f107 010c 	add.w	r1, r7, #12
 800c5d0:	300c      	adds	r0, #12
 800c5d2:	f7fe fd05 	bl	800afe0 <memcpy>
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	4629      	mov	r1, r5
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f000 fc1e 	bl	800ce1c <__lshift>
 800c5e0:	9b01      	ldr	r3, [sp, #4]
 800c5e2:	f103 0901 	add.w	r9, r3, #1
 800c5e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	9305      	str	r3, [sp, #20]
 800c5ee:	f00a 0301 	and.w	r3, sl, #1
 800c5f2:	46b8      	mov	r8, r7
 800c5f4:	9304      	str	r3, [sp, #16]
 800c5f6:	4607      	mov	r7, r0
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	ee18 0a10 	vmov	r0, s16
 800c5fe:	f7ff fa77 	bl	800baf0 <quorem>
 800c602:	4641      	mov	r1, r8
 800c604:	9002      	str	r0, [sp, #8]
 800c606:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c60a:	ee18 0a10 	vmov	r0, s16
 800c60e:	f000 fc75 	bl	800cefc <__mcmp>
 800c612:	463a      	mov	r2, r7
 800c614:	9003      	str	r0, [sp, #12]
 800c616:	4631      	mov	r1, r6
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 fc8b 	bl	800cf34 <__mdiff>
 800c61e:	68c2      	ldr	r2, [r0, #12]
 800c620:	f109 3bff 	add.w	fp, r9, #4294967295
 800c624:	4605      	mov	r5, r0
 800c626:	bb02      	cbnz	r2, 800c66a <_dtoa_r+0xa62>
 800c628:	4601      	mov	r1, r0
 800c62a:	ee18 0a10 	vmov	r0, s16
 800c62e:	f000 fc65 	bl	800cefc <__mcmp>
 800c632:	4602      	mov	r2, r0
 800c634:	4629      	mov	r1, r5
 800c636:	4620      	mov	r0, r4
 800c638:	9207      	str	r2, [sp, #28]
 800c63a:	f000 fa1d 	bl	800ca78 <_Bfree>
 800c63e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c642:	ea43 0102 	orr.w	r1, r3, r2
 800c646:	9b04      	ldr	r3, [sp, #16]
 800c648:	430b      	orrs	r3, r1
 800c64a:	464d      	mov	r5, r9
 800c64c:	d10f      	bne.n	800c66e <_dtoa_r+0xa66>
 800c64e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c652:	d02a      	beq.n	800c6aa <_dtoa_r+0xaa2>
 800c654:	9b03      	ldr	r3, [sp, #12]
 800c656:	2b00      	cmp	r3, #0
 800c658:	dd02      	ble.n	800c660 <_dtoa_r+0xa58>
 800c65a:	9b02      	ldr	r3, [sp, #8]
 800c65c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c660:	f88b a000 	strb.w	sl, [fp]
 800c664:	e775      	b.n	800c552 <_dtoa_r+0x94a>
 800c666:	4638      	mov	r0, r7
 800c668:	e7ba      	b.n	800c5e0 <_dtoa_r+0x9d8>
 800c66a:	2201      	movs	r2, #1
 800c66c:	e7e2      	b.n	800c634 <_dtoa_r+0xa2c>
 800c66e:	9b03      	ldr	r3, [sp, #12]
 800c670:	2b00      	cmp	r3, #0
 800c672:	db04      	blt.n	800c67e <_dtoa_r+0xa76>
 800c674:	9906      	ldr	r1, [sp, #24]
 800c676:	430b      	orrs	r3, r1
 800c678:	9904      	ldr	r1, [sp, #16]
 800c67a:	430b      	orrs	r3, r1
 800c67c:	d122      	bne.n	800c6c4 <_dtoa_r+0xabc>
 800c67e:	2a00      	cmp	r2, #0
 800c680:	ddee      	ble.n	800c660 <_dtoa_r+0xa58>
 800c682:	ee18 1a10 	vmov	r1, s16
 800c686:	2201      	movs	r2, #1
 800c688:	4620      	mov	r0, r4
 800c68a:	f000 fbc7 	bl	800ce1c <__lshift>
 800c68e:	4631      	mov	r1, r6
 800c690:	ee08 0a10 	vmov	s16, r0
 800c694:	f000 fc32 	bl	800cefc <__mcmp>
 800c698:	2800      	cmp	r0, #0
 800c69a:	dc03      	bgt.n	800c6a4 <_dtoa_r+0xa9c>
 800c69c:	d1e0      	bne.n	800c660 <_dtoa_r+0xa58>
 800c69e:	f01a 0f01 	tst.w	sl, #1
 800c6a2:	d0dd      	beq.n	800c660 <_dtoa_r+0xa58>
 800c6a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c6a8:	d1d7      	bne.n	800c65a <_dtoa_r+0xa52>
 800c6aa:	2339      	movs	r3, #57	; 0x39
 800c6ac:	f88b 3000 	strb.w	r3, [fp]
 800c6b0:	462b      	mov	r3, r5
 800c6b2:	461d      	mov	r5, r3
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c6ba:	2a39      	cmp	r2, #57	; 0x39
 800c6bc:	d071      	beq.n	800c7a2 <_dtoa_r+0xb9a>
 800c6be:	3201      	adds	r2, #1
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	e746      	b.n	800c552 <_dtoa_r+0x94a>
 800c6c4:	2a00      	cmp	r2, #0
 800c6c6:	dd07      	ble.n	800c6d8 <_dtoa_r+0xad0>
 800c6c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c6cc:	d0ed      	beq.n	800c6aa <_dtoa_r+0xaa2>
 800c6ce:	f10a 0301 	add.w	r3, sl, #1
 800c6d2:	f88b 3000 	strb.w	r3, [fp]
 800c6d6:	e73c      	b.n	800c552 <_dtoa_r+0x94a>
 800c6d8:	9b05      	ldr	r3, [sp, #20]
 800c6da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c6de:	4599      	cmp	r9, r3
 800c6e0:	d047      	beq.n	800c772 <_dtoa_r+0xb6a>
 800c6e2:	ee18 1a10 	vmov	r1, s16
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	220a      	movs	r2, #10
 800c6ea:	4620      	mov	r0, r4
 800c6ec:	f000 f9e6 	bl	800cabc <__multadd>
 800c6f0:	45b8      	cmp	r8, r7
 800c6f2:	ee08 0a10 	vmov	s16, r0
 800c6f6:	f04f 0300 	mov.w	r3, #0
 800c6fa:	f04f 020a 	mov.w	r2, #10
 800c6fe:	4641      	mov	r1, r8
 800c700:	4620      	mov	r0, r4
 800c702:	d106      	bne.n	800c712 <_dtoa_r+0xb0a>
 800c704:	f000 f9da 	bl	800cabc <__multadd>
 800c708:	4680      	mov	r8, r0
 800c70a:	4607      	mov	r7, r0
 800c70c:	f109 0901 	add.w	r9, r9, #1
 800c710:	e772      	b.n	800c5f8 <_dtoa_r+0x9f0>
 800c712:	f000 f9d3 	bl	800cabc <__multadd>
 800c716:	4639      	mov	r1, r7
 800c718:	4680      	mov	r8, r0
 800c71a:	2300      	movs	r3, #0
 800c71c:	220a      	movs	r2, #10
 800c71e:	4620      	mov	r0, r4
 800c720:	f000 f9cc 	bl	800cabc <__multadd>
 800c724:	4607      	mov	r7, r0
 800c726:	e7f1      	b.n	800c70c <_dtoa_r+0xb04>
 800c728:	9b03      	ldr	r3, [sp, #12]
 800c72a:	9302      	str	r3, [sp, #8]
 800c72c:	9d01      	ldr	r5, [sp, #4]
 800c72e:	ee18 0a10 	vmov	r0, s16
 800c732:	4631      	mov	r1, r6
 800c734:	f7ff f9dc 	bl	800baf0 <quorem>
 800c738:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c73c:	9b01      	ldr	r3, [sp, #4]
 800c73e:	f805 ab01 	strb.w	sl, [r5], #1
 800c742:	1aea      	subs	r2, r5, r3
 800c744:	9b02      	ldr	r3, [sp, #8]
 800c746:	4293      	cmp	r3, r2
 800c748:	dd09      	ble.n	800c75e <_dtoa_r+0xb56>
 800c74a:	ee18 1a10 	vmov	r1, s16
 800c74e:	2300      	movs	r3, #0
 800c750:	220a      	movs	r2, #10
 800c752:	4620      	mov	r0, r4
 800c754:	f000 f9b2 	bl	800cabc <__multadd>
 800c758:	ee08 0a10 	vmov	s16, r0
 800c75c:	e7e7      	b.n	800c72e <_dtoa_r+0xb26>
 800c75e:	9b02      	ldr	r3, [sp, #8]
 800c760:	2b00      	cmp	r3, #0
 800c762:	bfc8      	it	gt
 800c764:	461d      	movgt	r5, r3
 800c766:	9b01      	ldr	r3, [sp, #4]
 800c768:	bfd8      	it	le
 800c76a:	2501      	movle	r5, #1
 800c76c:	441d      	add	r5, r3
 800c76e:	f04f 0800 	mov.w	r8, #0
 800c772:	ee18 1a10 	vmov	r1, s16
 800c776:	2201      	movs	r2, #1
 800c778:	4620      	mov	r0, r4
 800c77a:	f000 fb4f 	bl	800ce1c <__lshift>
 800c77e:	4631      	mov	r1, r6
 800c780:	ee08 0a10 	vmov	s16, r0
 800c784:	f000 fbba 	bl	800cefc <__mcmp>
 800c788:	2800      	cmp	r0, #0
 800c78a:	dc91      	bgt.n	800c6b0 <_dtoa_r+0xaa8>
 800c78c:	d102      	bne.n	800c794 <_dtoa_r+0xb8c>
 800c78e:	f01a 0f01 	tst.w	sl, #1
 800c792:	d18d      	bne.n	800c6b0 <_dtoa_r+0xaa8>
 800c794:	462b      	mov	r3, r5
 800c796:	461d      	mov	r5, r3
 800c798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c79c:	2a30      	cmp	r2, #48	; 0x30
 800c79e:	d0fa      	beq.n	800c796 <_dtoa_r+0xb8e>
 800c7a0:	e6d7      	b.n	800c552 <_dtoa_r+0x94a>
 800c7a2:	9a01      	ldr	r2, [sp, #4]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d184      	bne.n	800c6b2 <_dtoa_r+0xaaa>
 800c7a8:	9b00      	ldr	r3, [sp, #0]
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	2331      	movs	r3, #49	; 0x31
 800c7b0:	7013      	strb	r3, [r2, #0]
 800c7b2:	e6ce      	b.n	800c552 <_dtoa_r+0x94a>
 800c7b4:	4b09      	ldr	r3, [pc, #36]	; (800c7dc <_dtoa_r+0xbd4>)
 800c7b6:	f7ff ba95 	b.w	800bce4 <_dtoa_r+0xdc>
 800c7ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	f47f aa6e 	bne.w	800bc9e <_dtoa_r+0x96>
 800c7c2:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <_dtoa_r+0xbd8>)
 800c7c4:	f7ff ba8e 	b.w	800bce4 <_dtoa_r+0xdc>
 800c7c8:	9b02      	ldr	r3, [sp, #8]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	dcae      	bgt.n	800c72c <_dtoa_r+0xb24>
 800c7ce:	9b06      	ldr	r3, [sp, #24]
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	f73f aea8 	bgt.w	800c526 <_dtoa_r+0x91e>
 800c7d6:	e7a9      	b.n	800c72c <_dtoa_r+0xb24>
 800c7d8:	08019be7 	.word	0x08019be7
 800c7dc:	08019b44 	.word	0x08019b44
 800c7e0:	08019b68 	.word	0x08019b68

0800c7e4 <std>:
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	b510      	push	{r4, lr}
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	e9c0 3300 	strd	r3, r3, [r0]
 800c7ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7f2:	6083      	str	r3, [r0, #8]
 800c7f4:	8181      	strh	r1, [r0, #12]
 800c7f6:	6643      	str	r3, [r0, #100]	; 0x64
 800c7f8:	81c2      	strh	r2, [r0, #14]
 800c7fa:	6183      	str	r3, [r0, #24]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	2208      	movs	r2, #8
 800c800:	305c      	adds	r0, #92	; 0x5c
 800c802:	f7fe fbfb 	bl	800affc <memset>
 800c806:	4b05      	ldr	r3, [pc, #20]	; (800c81c <std+0x38>)
 800c808:	6263      	str	r3, [r4, #36]	; 0x24
 800c80a:	4b05      	ldr	r3, [pc, #20]	; (800c820 <std+0x3c>)
 800c80c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c80e:	4b05      	ldr	r3, [pc, #20]	; (800c824 <std+0x40>)
 800c810:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c812:	4b05      	ldr	r3, [pc, #20]	; (800c828 <std+0x44>)
 800c814:	6224      	str	r4, [r4, #32]
 800c816:	6323      	str	r3, [r4, #48]	; 0x30
 800c818:	bd10      	pop	{r4, pc}
 800c81a:	bf00      	nop
 800c81c:	0800d3e1 	.word	0x0800d3e1
 800c820:	0800d403 	.word	0x0800d403
 800c824:	0800d43b 	.word	0x0800d43b
 800c828:	0800d45f 	.word	0x0800d45f

0800c82c <_cleanup_r>:
 800c82c:	4901      	ldr	r1, [pc, #4]	; (800c834 <_cleanup_r+0x8>)
 800c82e:	f000 b8af 	b.w	800c990 <_fwalk_reent>
 800c832:	bf00      	nop
 800c834:	0800d775 	.word	0x0800d775

0800c838 <__sfmoreglue>:
 800c838:	b570      	push	{r4, r5, r6, lr}
 800c83a:	2268      	movs	r2, #104	; 0x68
 800c83c:	1e4d      	subs	r5, r1, #1
 800c83e:	4355      	muls	r5, r2
 800c840:	460e      	mov	r6, r1
 800c842:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c846:	f7fe fc4d 	bl	800b0e4 <_malloc_r>
 800c84a:	4604      	mov	r4, r0
 800c84c:	b140      	cbz	r0, 800c860 <__sfmoreglue+0x28>
 800c84e:	2100      	movs	r1, #0
 800c850:	e9c0 1600 	strd	r1, r6, [r0]
 800c854:	300c      	adds	r0, #12
 800c856:	60a0      	str	r0, [r4, #8]
 800c858:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c85c:	f7fe fbce 	bl	800affc <memset>
 800c860:	4620      	mov	r0, r4
 800c862:	bd70      	pop	{r4, r5, r6, pc}

0800c864 <__sfp_lock_acquire>:
 800c864:	4801      	ldr	r0, [pc, #4]	; (800c86c <__sfp_lock_acquire+0x8>)
 800c866:	f000 b8b8 	b.w	800c9da <__retarget_lock_acquire_recursive>
 800c86a:	bf00      	nop
 800c86c:	20001ad5 	.word	0x20001ad5

0800c870 <__sfp_lock_release>:
 800c870:	4801      	ldr	r0, [pc, #4]	; (800c878 <__sfp_lock_release+0x8>)
 800c872:	f000 b8b3 	b.w	800c9dc <__retarget_lock_release_recursive>
 800c876:	bf00      	nop
 800c878:	20001ad5 	.word	0x20001ad5

0800c87c <__sinit_lock_acquire>:
 800c87c:	4801      	ldr	r0, [pc, #4]	; (800c884 <__sinit_lock_acquire+0x8>)
 800c87e:	f000 b8ac 	b.w	800c9da <__retarget_lock_acquire_recursive>
 800c882:	bf00      	nop
 800c884:	20001ad6 	.word	0x20001ad6

0800c888 <__sinit_lock_release>:
 800c888:	4801      	ldr	r0, [pc, #4]	; (800c890 <__sinit_lock_release+0x8>)
 800c88a:	f000 b8a7 	b.w	800c9dc <__retarget_lock_release_recursive>
 800c88e:	bf00      	nop
 800c890:	20001ad6 	.word	0x20001ad6

0800c894 <__sinit>:
 800c894:	b510      	push	{r4, lr}
 800c896:	4604      	mov	r4, r0
 800c898:	f7ff fff0 	bl	800c87c <__sinit_lock_acquire>
 800c89c:	69a3      	ldr	r3, [r4, #24]
 800c89e:	b11b      	cbz	r3, 800c8a8 <__sinit+0x14>
 800c8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a4:	f7ff bff0 	b.w	800c888 <__sinit_lock_release>
 800c8a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c8ac:	6523      	str	r3, [r4, #80]	; 0x50
 800c8ae:	4b13      	ldr	r3, [pc, #76]	; (800c8fc <__sinit+0x68>)
 800c8b0:	4a13      	ldr	r2, [pc, #76]	; (800c900 <__sinit+0x6c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8b6:	42a3      	cmp	r3, r4
 800c8b8:	bf04      	itt	eq
 800c8ba:	2301      	moveq	r3, #1
 800c8bc:	61a3      	streq	r3, [r4, #24]
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 f820 	bl	800c904 <__sfp>
 800c8c4:	6060      	str	r0, [r4, #4]
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f000 f81c 	bl	800c904 <__sfp>
 800c8cc:	60a0      	str	r0, [r4, #8]
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f000 f818 	bl	800c904 <__sfp>
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	60e0      	str	r0, [r4, #12]
 800c8d8:	2104      	movs	r1, #4
 800c8da:	6860      	ldr	r0, [r4, #4]
 800c8dc:	f7ff ff82 	bl	800c7e4 <std>
 800c8e0:	68a0      	ldr	r0, [r4, #8]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	2109      	movs	r1, #9
 800c8e6:	f7ff ff7d 	bl	800c7e4 <std>
 800c8ea:	68e0      	ldr	r0, [r4, #12]
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	2112      	movs	r1, #18
 800c8f0:	f7ff ff78 	bl	800c7e4 <std>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	61a3      	str	r3, [r4, #24]
 800c8f8:	e7d2      	b.n	800c8a0 <__sinit+0xc>
 800c8fa:	bf00      	nop
 800c8fc:	08019b30 	.word	0x08019b30
 800c900:	0800c82d 	.word	0x0800c82d

0800c904 <__sfp>:
 800c904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c906:	4607      	mov	r7, r0
 800c908:	f7ff ffac 	bl	800c864 <__sfp_lock_acquire>
 800c90c:	4b1e      	ldr	r3, [pc, #120]	; (800c988 <__sfp+0x84>)
 800c90e:	681e      	ldr	r6, [r3, #0]
 800c910:	69b3      	ldr	r3, [r6, #24]
 800c912:	b913      	cbnz	r3, 800c91a <__sfp+0x16>
 800c914:	4630      	mov	r0, r6
 800c916:	f7ff ffbd 	bl	800c894 <__sinit>
 800c91a:	3648      	adds	r6, #72	; 0x48
 800c91c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c920:	3b01      	subs	r3, #1
 800c922:	d503      	bpl.n	800c92c <__sfp+0x28>
 800c924:	6833      	ldr	r3, [r6, #0]
 800c926:	b30b      	cbz	r3, 800c96c <__sfp+0x68>
 800c928:	6836      	ldr	r6, [r6, #0]
 800c92a:	e7f7      	b.n	800c91c <__sfp+0x18>
 800c92c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c930:	b9d5      	cbnz	r5, 800c968 <__sfp+0x64>
 800c932:	4b16      	ldr	r3, [pc, #88]	; (800c98c <__sfp+0x88>)
 800c934:	60e3      	str	r3, [r4, #12]
 800c936:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c93a:	6665      	str	r5, [r4, #100]	; 0x64
 800c93c:	f000 f84c 	bl	800c9d8 <__retarget_lock_init_recursive>
 800c940:	f7ff ff96 	bl	800c870 <__sfp_lock_release>
 800c944:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c948:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c94c:	6025      	str	r5, [r4, #0]
 800c94e:	61a5      	str	r5, [r4, #24]
 800c950:	2208      	movs	r2, #8
 800c952:	4629      	mov	r1, r5
 800c954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c958:	f7fe fb50 	bl	800affc <memset>
 800c95c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c964:	4620      	mov	r0, r4
 800c966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c968:	3468      	adds	r4, #104	; 0x68
 800c96a:	e7d9      	b.n	800c920 <__sfp+0x1c>
 800c96c:	2104      	movs	r1, #4
 800c96e:	4638      	mov	r0, r7
 800c970:	f7ff ff62 	bl	800c838 <__sfmoreglue>
 800c974:	4604      	mov	r4, r0
 800c976:	6030      	str	r0, [r6, #0]
 800c978:	2800      	cmp	r0, #0
 800c97a:	d1d5      	bne.n	800c928 <__sfp+0x24>
 800c97c:	f7ff ff78 	bl	800c870 <__sfp_lock_release>
 800c980:	230c      	movs	r3, #12
 800c982:	603b      	str	r3, [r7, #0]
 800c984:	e7ee      	b.n	800c964 <__sfp+0x60>
 800c986:	bf00      	nop
 800c988:	08019b30 	.word	0x08019b30
 800c98c:	ffff0001 	.word	0xffff0001

0800c990 <_fwalk_reent>:
 800c990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c994:	4606      	mov	r6, r0
 800c996:	4688      	mov	r8, r1
 800c998:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c99c:	2700      	movs	r7, #0
 800c99e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9a2:	f1b9 0901 	subs.w	r9, r9, #1
 800c9a6:	d505      	bpl.n	800c9b4 <_fwalk_reent+0x24>
 800c9a8:	6824      	ldr	r4, [r4, #0]
 800c9aa:	2c00      	cmp	r4, #0
 800c9ac:	d1f7      	bne.n	800c99e <_fwalk_reent+0xe>
 800c9ae:	4638      	mov	r0, r7
 800c9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9b4:	89ab      	ldrh	r3, [r5, #12]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d907      	bls.n	800c9ca <_fwalk_reent+0x3a>
 800c9ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	d003      	beq.n	800c9ca <_fwalk_reent+0x3a>
 800c9c2:	4629      	mov	r1, r5
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	47c0      	blx	r8
 800c9c8:	4307      	orrs	r7, r0
 800c9ca:	3568      	adds	r5, #104	; 0x68
 800c9cc:	e7e9      	b.n	800c9a2 <_fwalk_reent+0x12>
	...

0800c9d0 <_localeconv_r>:
 800c9d0:	4800      	ldr	r0, [pc, #0]	; (800c9d4 <_localeconv_r+0x4>)
 800c9d2:	4770      	bx	lr
 800c9d4:	200009cc 	.word	0x200009cc

0800c9d8 <__retarget_lock_init_recursive>:
 800c9d8:	4770      	bx	lr

0800c9da <__retarget_lock_acquire_recursive>:
 800c9da:	4770      	bx	lr

0800c9dc <__retarget_lock_release_recursive>:
 800c9dc:	4770      	bx	lr
	...

0800c9e0 <__malloc_lock>:
 800c9e0:	4801      	ldr	r0, [pc, #4]	; (800c9e8 <__malloc_lock+0x8>)
 800c9e2:	f7ff bffa 	b.w	800c9da <__retarget_lock_acquire_recursive>
 800c9e6:	bf00      	nop
 800c9e8:	20001ad4 	.word	0x20001ad4

0800c9ec <__malloc_unlock>:
 800c9ec:	4801      	ldr	r0, [pc, #4]	; (800c9f4 <__malloc_unlock+0x8>)
 800c9ee:	f7ff bff5 	b.w	800c9dc <__retarget_lock_release_recursive>
 800c9f2:	bf00      	nop
 800c9f4:	20001ad4 	.word	0x20001ad4

0800c9f8 <_Balloc>:
 800c9f8:	b570      	push	{r4, r5, r6, lr}
 800c9fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	460d      	mov	r5, r1
 800ca00:	b976      	cbnz	r6, 800ca20 <_Balloc+0x28>
 800ca02:	2010      	movs	r0, #16
 800ca04:	f7fe fae4 	bl	800afd0 <malloc>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	6260      	str	r0, [r4, #36]	; 0x24
 800ca0c:	b920      	cbnz	r0, 800ca18 <_Balloc+0x20>
 800ca0e:	4b18      	ldr	r3, [pc, #96]	; (800ca70 <_Balloc+0x78>)
 800ca10:	4818      	ldr	r0, [pc, #96]	; (800ca74 <_Balloc+0x7c>)
 800ca12:	2166      	movs	r1, #102	; 0x66
 800ca14:	f000 fdfa 	bl	800d60c <__assert_func>
 800ca18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca1c:	6006      	str	r6, [r0, #0]
 800ca1e:	60c6      	str	r6, [r0, #12]
 800ca20:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ca22:	68f3      	ldr	r3, [r6, #12]
 800ca24:	b183      	cbz	r3, 800ca48 <_Balloc+0x50>
 800ca26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca2e:	b9b8      	cbnz	r0, 800ca60 <_Balloc+0x68>
 800ca30:	2101      	movs	r1, #1
 800ca32:	fa01 f605 	lsl.w	r6, r1, r5
 800ca36:	1d72      	adds	r2, r6, #5
 800ca38:	0092      	lsls	r2, r2, #2
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f000 fb60 	bl	800d100 <_calloc_r>
 800ca40:	b160      	cbz	r0, 800ca5c <_Balloc+0x64>
 800ca42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca46:	e00e      	b.n	800ca66 <_Balloc+0x6e>
 800ca48:	2221      	movs	r2, #33	; 0x21
 800ca4a:	2104      	movs	r1, #4
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f000 fb57 	bl	800d100 <_calloc_r>
 800ca52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca54:	60f0      	str	r0, [r6, #12]
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d1e4      	bne.n	800ca26 <_Balloc+0x2e>
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	bd70      	pop	{r4, r5, r6, pc}
 800ca60:	6802      	ldr	r2, [r0, #0]
 800ca62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca66:	2300      	movs	r3, #0
 800ca68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca6c:	e7f7      	b.n	800ca5e <_Balloc+0x66>
 800ca6e:	bf00      	nop
 800ca70:	08019b75 	.word	0x08019b75
 800ca74:	08019c58 	.word	0x08019c58

0800ca78 <_Bfree>:
 800ca78:	b570      	push	{r4, r5, r6, lr}
 800ca7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca7c:	4605      	mov	r5, r0
 800ca7e:	460c      	mov	r4, r1
 800ca80:	b976      	cbnz	r6, 800caa0 <_Bfree+0x28>
 800ca82:	2010      	movs	r0, #16
 800ca84:	f7fe faa4 	bl	800afd0 <malloc>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	6268      	str	r0, [r5, #36]	; 0x24
 800ca8c:	b920      	cbnz	r0, 800ca98 <_Bfree+0x20>
 800ca8e:	4b09      	ldr	r3, [pc, #36]	; (800cab4 <_Bfree+0x3c>)
 800ca90:	4809      	ldr	r0, [pc, #36]	; (800cab8 <_Bfree+0x40>)
 800ca92:	218a      	movs	r1, #138	; 0x8a
 800ca94:	f000 fdba 	bl	800d60c <__assert_func>
 800ca98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca9c:	6006      	str	r6, [r0, #0]
 800ca9e:	60c6      	str	r6, [r0, #12]
 800caa0:	b13c      	cbz	r4, 800cab2 <_Bfree+0x3a>
 800caa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800caa4:	6862      	ldr	r2, [r4, #4]
 800caa6:	68db      	ldr	r3, [r3, #12]
 800caa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800caac:	6021      	str	r1, [r4, #0]
 800caae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cab2:	bd70      	pop	{r4, r5, r6, pc}
 800cab4:	08019b75 	.word	0x08019b75
 800cab8:	08019c58 	.word	0x08019c58

0800cabc <__multadd>:
 800cabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cac0:	690d      	ldr	r5, [r1, #16]
 800cac2:	4607      	mov	r7, r0
 800cac4:	460c      	mov	r4, r1
 800cac6:	461e      	mov	r6, r3
 800cac8:	f101 0c14 	add.w	ip, r1, #20
 800cacc:	2000      	movs	r0, #0
 800cace:	f8dc 3000 	ldr.w	r3, [ip]
 800cad2:	b299      	uxth	r1, r3
 800cad4:	fb02 6101 	mla	r1, r2, r1, r6
 800cad8:	0c1e      	lsrs	r6, r3, #16
 800cada:	0c0b      	lsrs	r3, r1, #16
 800cadc:	fb02 3306 	mla	r3, r2, r6, r3
 800cae0:	b289      	uxth	r1, r1
 800cae2:	3001      	adds	r0, #1
 800cae4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cae8:	4285      	cmp	r5, r0
 800caea:	f84c 1b04 	str.w	r1, [ip], #4
 800caee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800caf2:	dcec      	bgt.n	800cace <__multadd+0x12>
 800caf4:	b30e      	cbz	r6, 800cb3a <__multadd+0x7e>
 800caf6:	68a3      	ldr	r3, [r4, #8]
 800caf8:	42ab      	cmp	r3, r5
 800cafa:	dc19      	bgt.n	800cb30 <__multadd+0x74>
 800cafc:	6861      	ldr	r1, [r4, #4]
 800cafe:	4638      	mov	r0, r7
 800cb00:	3101      	adds	r1, #1
 800cb02:	f7ff ff79 	bl	800c9f8 <_Balloc>
 800cb06:	4680      	mov	r8, r0
 800cb08:	b928      	cbnz	r0, 800cb16 <__multadd+0x5a>
 800cb0a:	4602      	mov	r2, r0
 800cb0c:	4b0c      	ldr	r3, [pc, #48]	; (800cb40 <__multadd+0x84>)
 800cb0e:	480d      	ldr	r0, [pc, #52]	; (800cb44 <__multadd+0x88>)
 800cb10:	21b5      	movs	r1, #181	; 0xb5
 800cb12:	f000 fd7b 	bl	800d60c <__assert_func>
 800cb16:	6922      	ldr	r2, [r4, #16]
 800cb18:	3202      	adds	r2, #2
 800cb1a:	f104 010c 	add.w	r1, r4, #12
 800cb1e:	0092      	lsls	r2, r2, #2
 800cb20:	300c      	adds	r0, #12
 800cb22:	f7fe fa5d 	bl	800afe0 <memcpy>
 800cb26:	4621      	mov	r1, r4
 800cb28:	4638      	mov	r0, r7
 800cb2a:	f7ff ffa5 	bl	800ca78 <_Bfree>
 800cb2e:	4644      	mov	r4, r8
 800cb30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb34:	3501      	adds	r5, #1
 800cb36:	615e      	str	r6, [r3, #20]
 800cb38:	6125      	str	r5, [r4, #16]
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb40:	08019be7 	.word	0x08019be7
 800cb44:	08019c58 	.word	0x08019c58

0800cb48 <__hi0bits>:
 800cb48:	0c03      	lsrs	r3, r0, #16
 800cb4a:	041b      	lsls	r3, r3, #16
 800cb4c:	b9d3      	cbnz	r3, 800cb84 <__hi0bits+0x3c>
 800cb4e:	0400      	lsls	r0, r0, #16
 800cb50:	2310      	movs	r3, #16
 800cb52:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb56:	bf04      	itt	eq
 800cb58:	0200      	lsleq	r0, r0, #8
 800cb5a:	3308      	addeq	r3, #8
 800cb5c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb60:	bf04      	itt	eq
 800cb62:	0100      	lsleq	r0, r0, #4
 800cb64:	3304      	addeq	r3, #4
 800cb66:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb6a:	bf04      	itt	eq
 800cb6c:	0080      	lsleq	r0, r0, #2
 800cb6e:	3302      	addeq	r3, #2
 800cb70:	2800      	cmp	r0, #0
 800cb72:	db05      	blt.n	800cb80 <__hi0bits+0x38>
 800cb74:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb78:	f103 0301 	add.w	r3, r3, #1
 800cb7c:	bf08      	it	eq
 800cb7e:	2320      	moveq	r3, #32
 800cb80:	4618      	mov	r0, r3
 800cb82:	4770      	bx	lr
 800cb84:	2300      	movs	r3, #0
 800cb86:	e7e4      	b.n	800cb52 <__hi0bits+0xa>

0800cb88 <__lo0bits>:
 800cb88:	6803      	ldr	r3, [r0, #0]
 800cb8a:	f013 0207 	ands.w	r2, r3, #7
 800cb8e:	4601      	mov	r1, r0
 800cb90:	d00b      	beq.n	800cbaa <__lo0bits+0x22>
 800cb92:	07da      	lsls	r2, r3, #31
 800cb94:	d423      	bmi.n	800cbde <__lo0bits+0x56>
 800cb96:	0798      	lsls	r0, r3, #30
 800cb98:	bf49      	itett	mi
 800cb9a:	085b      	lsrmi	r3, r3, #1
 800cb9c:	089b      	lsrpl	r3, r3, #2
 800cb9e:	2001      	movmi	r0, #1
 800cba0:	600b      	strmi	r3, [r1, #0]
 800cba2:	bf5c      	itt	pl
 800cba4:	600b      	strpl	r3, [r1, #0]
 800cba6:	2002      	movpl	r0, #2
 800cba8:	4770      	bx	lr
 800cbaa:	b298      	uxth	r0, r3
 800cbac:	b9a8      	cbnz	r0, 800cbda <__lo0bits+0x52>
 800cbae:	0c1b      	lsrs	r3, r3, #16
 800cbb0:	2010      	movs	r0, #16
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	b90a      	cbnz	r2, 800cbba <__lo0bits+0x32>
 800cbb6:	3008      	adds	r0, #8
 800cbb8:	0a1b      	lsrs	r3, r3, #8
 800cbba:	071a      	lsls	r2, r3, #28
 800cbbc:	bf04      	itt	eq
 800cbbe:	091b      	lsreq	r3, r3, #4
 800cbc0:	3004      	addeq	r0, #4
 800cbc2:	079a      	lsls	r2, r3, #30
 800cbc4:	bf04      	itt	eq
 800cbc6:	089b      	lsreq	r3, r3, #2
 800cbc8:	3002      	addeq	r0, #2
 800cbca:	07da      	lsls	r2, r3, #31
 800cbcc:	d403      	bmi.n	800cbd6 <__lo0bits+0x4e>
 800cbce:	085b      	lsrs	r3, r3, #1
 800cbd0:	f100 0001 	add.w	r0, r0, #1
 800cbd4:	d005      	beq.n	800cbe2 <__lo0bits+0x5a>
 800cbd6:	600b      	str	r3, [r1, #0]
 800cbd8:	4770      	bx	lr
 800cbda:	4610      	mov	r0, r2
 800cbdc:	e7e9      	b.n	800cbb2 <__lo0bits+0x2a>
 800cbde:	2000      	movs	r0, #0
 800cbe0:	4770      	bx	lr
 800cbe2:	2020      	movs	r0, #32
 800cbe4:	4770      	bx	lr
	...

0800cbe8 <__i2b>:
 800cbe8:	b510      	push	{r4, lr}
 800cbea:	460c      	mov	r4, r1
 800cbec:	2101      	movs	r1, #1
 800cbee:	f7ff ff03 	bl	800c9f8 <_Balloc>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	b928      	cbnz	r0, 800cc02 <__i2b+0x1a>
 800cbf6:	4b05      	ldr	r3, [pc, #20]	; (800cc0c <__i2b+0x24>)
 800cbf8:	4805      	ldr	r0, [pc, #20]	; (800cc10 <__i2b+0x28>)
 800cbfa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cbfe:	f000 fd05 	bl	800d60c <__assert_func>
 800cc02:	2301      	movs	r3, #1
 800cc04:	6144      	str	r4, [r0, #20]
 800cc06:	6103      	str	r3, [r0, #16]
 800cc08:	bd10      	pop	{r4, pc}
 800cc0a:	bf00      	nop
 800cc0c:	08019be7 	.word	0x08019be7
 800cc10:	08019c58 	.word	0x08019c58

0800cc14 <__multiply>:
 800cc14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc18:	4691      	mov	r9, r2
 800cc1a:	690a      	ldr	r2, [r1, #16]
 800cc1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	bfb8      	it	lt
 800cc24:	460b      	movlt	r3, r1
 800cc26:	460c      	mov	r4, r1
 800cc28:	bfbc      	itt	lt
 800cc2a:	464c      	movlt	r4, r9
 800cc2c:	4699      	movlt	r9, r3
 800cc2e:	6927      	ldr	r7, [r4, #16]
 800cc30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc34:	68a3      	ldr	r3, [r4, #8]
 800cc36:	6861      	ldr	r1, [r4, #4]
 800cc38:	eb07 060a 	add.w	r6, r7, sl
 800cc3c:	42b3      	cmp	r3, r6
 800cc3e:	b085      	sub	sp, #20
 800cc40:	bfb8      	it	lt
 800cc42:	3101      	addlt	r1, #1
 800cc44:	f7ff fed8 	bl	800c9f8 <_Balloc>
 800cc48:	b930      	cbnz	r0, 800cc58 <__multiply+0x44>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	4b44      	ldr	r3, [pc, #272]	; (800cd60 <__multiply+0x14c>)
 800cc4e:	4845      	ldr	r0, [pc, #276]	; (800cd64 <__multiply+0x150>)
 800cc50:	f240 115d 	movw	r1, #349	; 0x15d
 800cc54:	f000 fcda 	bl	800d60c <__assert_func>
 800cc58:	f100 0514 	add.w	r5, r0, #20
 800cc5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc60:	462b      	mov	r3, r5
 800cc62:	2200      	movs	r2, #0
 800cc64:	4543      	cmp	r3, r8
 800cc66:	d321      	bcc.n	800ccac <__multiply+0x98>
 800cc68:	f104 0314 	add.w	r3, r4, #20
 800cc6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc70:	f109 0314 	add.w	r3, r9, #20
 800cc74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc78:	9202      	str	r2, [sp, #8]
 800cc7a:	1b3a      	subs	r2, r7, r4
 800cc7c:	3a15      	subs	r2, #21
 800cc7e:	f022 0203 	bic.w	r2, r2, #3
 800cc82:	3204      	adds	r2, #4
 800cc84:	f104 0115 	add.w	r1, r4, #21
 800cc88:	428f      	cmp	r7, r1
 800cc8a:	bf38      	it	cc
 800cc8c:	2204      	movcc	r2, #4
 800cc8e:	9201      	str	r2, [sp, #4]
 800cc90:	9a02      	ldr	r2, [sp, #8]
 800cc92:	9303      	str	r3, [sp, #12]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d80c      	bhi.n	800ccb2 <__multiply+0x9e>
 800cc98:	2e00      	cmp	r6, #0
 800cc9a:	dd03      	ble.n	800cca4 <__multiply+0x90>
 800cc9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d05a      	beq.n	800cd5a <__multiply+0x146>
 800cca4:	6106      	str	r6, [r0, #16]
 800cca6:	b005      	add	sp, #20
 800cca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccac:	f843 2b04 	str.w	r2, [r3], #4
 800ccb0:	e7d8      	b.n	800cc64 <__multiply+0x50>
 800ccb2:	f8b3 a000 	ldrh.w	sl, [r3]
 800ccb6:	f1ba 0f00 	cmp.w	sl, #0
 800ccba:	d024      	beq.n	800cd06 <__multiply+0xf2>
 800ccbc:	f104 0e14 	add.w	lr, r4, #20
 800ccc0:	46a9      	mov	r9, r5
 800ccc2:	f04f 0c00 	mov.w	ip, #0
 800ccc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ccca:	f8d9 1000 	ldr.w	r1, [r9]
 800ccce:	fa1f fb82 	uxth.w	fp, r2
 800ccd2:	b289      	uxth	r1, r1
 800ccd4:	fb0a 110b 	mla	r1, sl, fp, r1
 800ccd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ccdc:	f8d9 2000 	ldr.w	r2, [r9]
 800cce0:	4461      	add	r1, ip
 800cce2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cce6:	fb0a c20b 	mla	r2, sl, fp, ip
 800ccea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ccee:	b289      	uxth	r1, r1
 800ccf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ccf4:	4577      	cmp	r7, lr
 800ccf6:	f849 1b04 	str.w	r1, [r9], #4
 800ccfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccfe:	d8e2      	bhi.n	800ccc6 <__multiply+0xb2>
 800cd00:	9a01      	ldr	r2, [sp, #4]
 800cd02:	f845 c002 	str.w	ip, [r5, r2]
 800cd06:	9a03      	ldr	r2, [sp, #12]
 800cd08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	f1b9 0f00 	cmp.w	r9, #0
 800cd12:	d020      	beq.n	800cd56 <__multiply+0x142>
 800cd14:	6829      	ldr	r1, [r5, #0]
 800cd16:	f104 0c14 	add.w	ip, r4, #20
 800cd1a:	46ae      	mov	lr, r5
 800cd1c:	f04f 0a00 	mov.w	sl, #0
 800cd20:	f8bc b000 	ldrh.w	fp, [ip]
 800cd24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cd28:	fb09 220b 	mla	r2, r9, fp, r2
 800cd2c:	4492      	add	sl, r2
 800cd2e:	b289      	uxth	r1, r1
 800cd30:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cd34:	f84e 1b04 	str.w	r1, [lr], #4
 800cd38:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd3c:	f8be 1000 	ldrh.w	r1, [lr]
 800cd40:	0c12      	lsrs	r2, r2, #16
 800cd42:	fb09 1102 	mla	r1, r9, r2, r1
 800cd46:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cd4a:	4567      	cmp	r7, ip
 800cd4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd50:	d8e6      	bhi.n	800cd20 <__multiply+0x10c>
 800cd52:	9a01      	ldr	r2, [sp, #4]
 800cd54:	50a9      	str	r1, [r5, r2]
 800cd56:	3504      	adds	r5, #4
 800cd58:	e79a      	b.n	800cc90 <__multiply+0x7c>
 800cd5a:	3e01      	subs	r6, #1
 800cd5c:	e79c      	b.n	800cc98 <__multiply+0x84>
 800cd5e:	bf00      	nop
 800cd60:	08019be7 	.word	0x08019be7
 800cd64:	08019c58 	.word	0x08019c58

0800cd68 <__pow5mult>:
 800cd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd6c:	4615      	mov	r5, r2
 800cd6e:	f012 0203 	ands.w	r2, r2, #3
 800cd72:	4606      	mov	r6, r0
 800cd74:	460f      	mov	r7, r1
 800cd76:	d007      	beq.n	800cd88 <__pow5mult+0x20>
 800cd78:	4c25      	ldr	r4, [pc, #148]	; (800ce10 <__pow5mult+0xa8>)
 800cd7a:	3a01      	subs	r2, #1
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd82:	f7ff fe9b 	bl	800cabc <__multadd>
 800cd86:	4607      	mov	r7, r0
 800cd88:	10ad      	asrs	r5, r5, #2
 800cd8a:	d03d      	beq.n	800ce08 <__pow5mult+0xa0>
 800cd8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cd8e:	b97c      	cbnz	r4, 800cdb0 <__pow5mult+0x48>
 800cd90:	2010      	movs	r0, #16
 800cd92:	f7fe f91d 	bl	800afd0 <malloc>
 800cd96:	4602      	mov	r2, r0
 800cd98:	6270      	str	r0, [r6, #36]	; 0x24
 800cd9a:	b928      	cbnz	r0, 800cda8 <__pow5mult+0x40>
 800cd9c:	4b1d      	ldr	r3, [pc, #116]	; (800ce14 <__pow5mult+0xac>)
 800cd9e:	481e      	ldr	r0, [pc, #120]	; (800ce18 <__pow5mult+0xb0>)
 800cda0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cda4:	f000 fc32 	bl	800d60c <__assert_func>
 800cda8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cdac:	6004      	str	r4, [r0, #0]
 800cdae:	60c4      	str	r4, [r0, #12]
 800cdb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cdb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdb8:	b94c      	cbnz	r4, 800cdce <__pow5mult+0x66>
 800cdba:	f240 2171 	movw	r1, #625	; 0x271
 800cdbe:	4630      	mov	r0, r6
 800cdc0:	f7ff ff12 	bl	800cbe8 <__i2b>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdca:	4604      	mov	r4, r0
 800cdcc:	6003      	str	r3, [r0, #0]
 800cdce:	f04f 0900 	mov.w	r9, #0
 800cdd2:	07eb      	lsls	r3, r5, #31
 800cdd4:	d50a      	bpl.n	800cdec <__pow5mult+0x84>
 800cdd6:	4639      	mov	r1, r7
 800cdd8:	4622      	mov	r2, r4
 800cdda:	4630      	mov	r0, r6
 800cddc:	f7ff ff1a 	bl	800cc14 <__multiply>
 800cde0:	4639      	mov	r1, r7
 800cde2:	4680      	mov	r8, r0
 800cde4:	4630      	mov	r0, r6
 800cde6:	f7ff fe47 	bl	800ca78 <_Bfree>
 800cdea:	4647      	mov	r7, r8
 800cdec:	106d      	asrs	r5, r5, #1
 800cdee:	d00b      	beq.n	800ce08 <__pow5mult+0xa0>
 800cdf0:	6820      	ldr	r0, [r4, #0]
 800cdf2:	b938      	cbnz	r0, 800ce04 <__pow5mult+0x9c>
 800cdf4:	4622      	mov	r2, r4
 800cdf6:	4621      	mov	r1, r4
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	f7ff ff0b 	bl	800cc14 <__multiply>
 800cdfe:	6020      	str	r0, [r4, #0]
 800ce00:	f8c0 9000 	str.w	r9, [r0]
 800ce04:	4604      	mov	r4, r0
 800ce06:	e7e4      	b.n	800cdd2 <__pow5mult+0x6a>
 800ce08:	4638      	mov	r0, r7
 800ce0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce0e:	bf00      	nop
 800ce10:	08019da8 	.word	0x08019da8
 800ce14:	08019b75 	.word	0x08019b75
 800ce18:	08019c58 	.word	0x08019c58

0800ce1c <__lshift>:
 800ce1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce20:	460c      	mov	r4, r1
 800ce22:	6849      	ldr	r1, [r1, #4]
 800ce24:	6923      	ldr	r3, [r4, #16]
 800ce26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce2a:	68a3      	ldr	r3, [r4, #8]
 800ce2c:	4607      	mov	r7, r0
 800ce2e:	4691      	mov	r9, r2
 800ce30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce34:	f108 0601 	add.w	r6, r8, #1
 800ce38:	42b3      	cmp	r3, r6
 800ce3a:	db0b      	blt.n	800ce54 <__lshift+0x38>
 800ce3c:	4638      	mov	r0, r7
 800ce3e:	f7ff fddb 	bl	800c9f8 <_Balloc>
 800ce42:	4605      	mov	r5, r0
 800ce44:	b948      	cbnz	r0, 800ce5a <__lshift+0x3e>
 800ce46:	4602      	mov	r2, r0
 800ce48:	4b2a      	ldr	r3, [pc, #168]	; (800cef4 <__lshift+0xd8>)
 800ce4a:	482b      	ldr	r0, [pc, #172]	; (800cef8 <__lshift+0xdc>)
 800ce4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ce50:	f000 fbdc 	bl	800d60c <__assert_func>
 800ce54:	3101      	adds	r1, #1
 800ce56:	005b      	lsls	r3, r3, #1
 800ce58:	e7ee      	b.n	800ce38 <__lshift+0x1c>
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f100 0114 	add.w	r1, r0, #20
 800ce60:	f100 0210 	add.w	r2, r0, #16
 800ce64:	4618      	mov	r0, r3
 800ce66:	4553      	cmp	r3, sl
 800ce68:	db37      	blt.n	800ceda <__lshift+0xbe>
 800ce6a:	6920      	ldr	r0, [r4, #16]
 800ce6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce70:	f104 0314 	add.w	r3, r4, #20
 800ce74:	f019 091f 	ands.w	r9, r9, #31
 800ce78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ce80:	d02f      	beq.n	800cee2 <__lshift+0xc6>
 800ce82:	f1c9 0e20 	rsb	lr, r9, #32
 800ce86:	468a      	mov	sl, r1
 800ce88:	f04f 0c00 	mov.w	ip, #0
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	fa02 f209 	lsl.w	r2, r2, r9
 800ce92:	ea42 020c 	orr.w	r2, r2, ip
 800ce96:	f84a 2b04 	str.w	r2, [sl], #4
 800ce9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce9e:	4298      	cmp	r0, r3
 800cea0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cea4:	d8f2      	bhi.n	800ce8c <__lshift+0x70>
 800cea6:	1b03      	subs	r3, r0, r4
 800cea8:	3b15      	subs	r3, #21
 800ceaa:	f023 0303 	bic.w	r3, r3, #3
 800ceae:	3304      	adds	r3, #4
 800ceb0:	f104 0215 	add.w	r2, r4, #21
 800ceb4:	4290      	cmp	r0, r2
 800ceb6:	bf38      	it	cc
 800ceb8:	2304      	movcc	r3, #4
 800ceba:	f841 c003 	str.w	ip, [r1, r3]
 800cebe:	f1bc 0f00 	cmp.w	ip, #0
 800cec2:	d001      	beq.n	800cec8 <__lshift+0xac>
 800cec4:	f108 0602 	add.w	r6, r8, #2
 800cec8:	3e01      	subs	r6, #1
 800ceca:	4638      	mov	r0, r7
 800cecc:	612e      	str	r6, [r5, #16]
 800cece:	4621      	mov	r1, r4
 800ced0:	f7ff fdd2 	bl	800ca78 <_Bfree>
 800ced4:	4628      	mov	r0, r5
 800ced6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceda:	f842 0f04 	str.w	r0, [r2, #4]!
 800cede:	3301      	adds	r3, #1
 800cee0:	e7c1      	b.n	800ce66 <__lshift+0x4a>
 800cee2:	3904      	subs	r1, #4
 800cee4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cee8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ceec:	4298      	cmp	r0, r3
 800ceee:	d8f9      	bhi.n	800cee4 <__lshift+0xc8>
 800cef0:	e7ea      	b.n	800cec8 <__lshift+0xac>
 800cef2:	bf00      	nop
 800cef4:	08019be7 	.word	0x08019be7
 800cef8:	08019c58 	.word	0x08019c58

0800cefc <__mcmp>:
 800cefc:	b530      	push	{r4, r5, lr}
 800cefe:	6902      	ldr	r2, [r0, #16]
 800cf00:	690c      	ldr	r4, [r1, #16]
 800cf02:	1b12      	subs	r2, r2, r4
 800cf04:	d10e      	bne.n	800cf24 <__mcmp+0x28>
 800cf06:	f100 0314 	add.w	r3, r0, #20
 800cf0a:	3114      	adds	r1, #20
 800cf0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cf10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cf14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cf18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cf1c:	42a5      	cmp	r5, r4
 800cf1e:	d003      	beq.n	800cf28 <__mcmp+0x2c>
 800cf20:	d305      	bcc.n	800cf2e <__mcmp+0x32>
 800cf22:	2201      	movs	r2, #1
 800cf24:	4610      	mov	r0, r2
 800cf26:	bd30      	pop	{r4, r5, pc}
 800cf28:	4283      	cmp	r3, r0
 800cf2a:	d3f3      	bcc.n	800cf14 <__mcmp+0x18>
 800cf2c:	e7fa      	b.n	800cf24 <__mcmp+0x28>
 800cf2e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf32:	e7f7      	b.n	800cf24 <__mcmp+0x28>

0800cf34 <__mdiff>:
 800cf34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf38:	460c      	mov	r4, r1
 800cf3a:	4606      	mov	r6, r0
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	4620      	mov	r0, r4
 800cf40:	4690      	mov	r8, r2
 800cf42:	f7ff ffdb 	bl	800cefc <__mcmp>
 800cf46:	1e05      	subs	r5, r0, #0
 800cf48:	d110      	bne.n	800cf6c <__mdiff+0x38>
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	f7ff fd53 	bl	800c9f8 <_Balloc>
 800cf52:	b930      	cbnz	r0, 800cf62 <__mdiff+0x2e>
 800cf54:	4b3a      	ldr	r3, [pc, #232]	; (800d040 <__mdiff+0x10c>)
 800cf56:	4602      	mov	r2, r0
 800cf58:	f240 2132 	movw	r1, #562	; 0x232
 800cf5c:	4839      	ldr	r0, [pc, #228]	; (800d044 <__mdiff+0x110>)
 800cf5e:	f000 fb55 	bl	800d60c <__assert_func>
 800cf62:	2301      	movs	r3, #1
 800cf64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf6c:	bfa4      	itt	ge
 800cf6e:	4643      	movge	r3, r8
 800cf70:	46a0      	movge	r8, r4
 800cf72:	4630      	mov	r0, r6
 800cf74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf78:	bfa6      	itte	ge
 800cf7a:	461c      	movge	r4, r3
 800cf7c:	2500      	movge	r5, #0
 800cf7e:	2501      	movlt	r5, #1
 800cf80:	f7ff fd3a 	bl	800c9f8 <_Balloc>
 800cf84:	b920      	cbnz	r0, 800cf90 <__mdiff+0x5c>
 800cf86:	4b2e      	ldr	r3, [pc, #184]	; (800d040 <__mdiff+0x10c>)
 800cf88:	4602      	mov	r2, r0
 800cf8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cf8e:	e7e5      	b.n	800cf5c <__mdiff+0x28>
 800cf90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf94:	6926      	ldr	r6, [r4, #16]
 800cf96:	60c5      	str	r5, [r0, #12]
 800cf98:	f104 0914 	add.w	r9, r4, #20
 800cf9c:	f108 0514 	add.w	r5, r8, #20
 800cfa0:	f100 0e14 	add.w	lr, r0, #20
 800cfa4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cfa8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cfac:	f108 0210 	add.w	r2, r8, #16
 800cfb0:	46f2      	mov	sl, lr
 800cfb2:	2100      	movs	r1, #0
 800cfb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800cfb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cfbc:	fa1f f883 	uxth.w	r8, r3
 800cfc0:	fa11 f18b 	uxtah	r1, r1, fp
 800cfc4:	0c1b      	lsrs	r3, r3, #16
 800cfc6:	eba1 0808 	sub.w	r8, r1, r8
 800cfca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cfce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cfd2:	fa1f f888 	uxth.w	r8, r8
 800cfd6:	1419      	asrs	r1, r3, #16
 800cfd8:	454e      	cmp	r6, r9
 800cfda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cfde:	f84a 3b04 	str.w	r3, [sl], #4
 800cfe2:	d8e7      	bhi.n	800cfb4 <__mdiff+0x80>
 800cfe4:	1b33      	subs	r3, r6, r4
 800cfe6:	3b15      	subs	r3, #21
 800cfe8:	f023 0303 	bic.w	r3, r3, #3
 800cfec:	3304      	adds	r3, #4
 800cfee:	3415      	adds	r4, #21
 800cff0:	42a6      	cmp	r6, r4
 800cff2:	bf38      	it	cc
 800cff4:	2304      	movcc	r3, #4
 800cff6:	441d      	add	r5, r3
 800cff8:	4473      	add	r3, lr
 800cffa:	469e      	mov	lr, r3
 800cffc:	462e      	mov	r6, r5
 800cffe:	4566      	cmp	r6, ip
 800d000:	d30e      	bcc.n	800d020 <__mdiff+0xec>
 800d002:	f10c 0203 	add.w	r2, ip, #3
 800d006:	1b52      	subs	r2, r2, r5
 800d008:	f022 0203 	bic.w	r2, r2, #3
 800d00c:	3d03      	subs	r5, #3
 800d00e:	45ac      	cmp	ip, r5
 800d010:	bf38      	it	cc
 800d012:	2200      	movcc	r2, #0
 800d014:	441a      	add	r2, r3
 800d016:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d01a:	b17b      	cbz	r3, 800d03c <__mdiff+0x108>
 800d01c:	6107      	str	r7, [r0, #16]
 800d01e:	e7a3      	b.n	800cf68 <__mdiff+0x34>
 800d020:	f856 8b04 	ldr.w	r8, [r6], #4
 800d024:	fa11 f288 	uxtah	r2, r1, r8
 800d028:	1414      	asrs	r4, r2, #16
 800d02a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d02e:	b292      	uxth	r2, r2
 800d030:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d034:	f84e 2b04 	str.w	r2, [lr], #4
 800d038:	1421      	asrs	r1, r4, #16
 800d03a:	e7e0      	b.n	800cffe <__mdiff+0xca>
 800d03c:	3f01      	subs	r7, #1
 800d03e:	e7ea      	b.n	800d016 <__mdiff+0xe2>
 800d040:	08019be7 	.word	0x08019be7
 800d044:	08019c58 	.word	0x08019c58

0800d048 <__d2b>:
 800d048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d04c:	4689      	mov	r9, r1
 800d04e:	2101      	movs	r1, #1
 800d050:	ec57 6b10 	vmov	r6, r7, d0
 800d054:	4690      	mov	r8, r2
 800d056:	f7ff fccf 	bl	800c9f8 <_Balloc>
 800d05a:	4604      	mov	r4, r0
 800d05c:	b930      	cbnz	r0, 800d06c <__d2b+0x24>
 800d05e:	4602      	mov	r2, r0
 800d060:	4b25      	ldr	r3, [pc, #148]	; (800d0f8 <__d2b+0xb0>)
 800d062:	4826      	ldr	r0, [pc, #152]	; (800d0fc <__d2b+0xb4>)
 800d064:	f240 310a 	movw	r1, #778	; 0x30a
 800d068:	f000 fad0 	bl	800d60c <__assert_func>
 800d06c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d070:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d074:	bb35      	cbnz	r5, 800d0c4 <__d2b+0x7c>
 800d076:	2e00      	cmp	r6, #0
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	d028      	beq.n	800d0ce <__d2b+0x86>
 800d07c:	4668      	mov	r0, sp
 800d07e:	9600      	str	r6, [sp, #0]
 800d080:	f7ff fd82 	bl	800cb88 <__lo0bits>
 800d084:	9900      	ldr	r1, [sp, #0]
 800d086:	b300      	cbz	r0, 800d0ca <__d2b+0x82>
 800d088:	9a01      	ldr	r2, [sp, #4]
 800d08a:	f1c0 0320 	rsb	r3, r0, #32
 800d08e:	fa02 f303 	lsl.w	r3, r2, r3
 800d092:	430b      	orrs	r3, r1
 800d094:	40c2      	lsrs	r2, r0
 800d096:	6163      	str	r3, [r4, #20]
 800d098:	9201      	str	r2, [sp, #4]
 800d09a:	9b01      	ldr	r3, [sp, #4]
 800d09c:	61a3      	str	r3, [r4, #24]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	bf14      	ite	ne
 800d0a2:	2202      	movne	r2, #2
 800d0a4:	2201      	moveq	r2, #1
 800d0a6:	6122      	str	r2, [r4, #16]
 800d0a8:	b1d5      	cbz	r5, 800d0e0 <__d2b+0x98>
 800d0aa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d0ae:	4405      	add	r5, r0
 800d0b0:	f8c9 5000 	str.w	r5, [r9]
 800d0b4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d0b8:	f8c8 0000 	str.w	r0, [r8]
 800d0bc:	4620      	mov	r0, r4
 800d0be:	b003      	add	sp, #12
 800d0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0c8:	e7d5      	b.n	800d076 <__d2b+0x2e>
 800d0ca:	6161      	str	r1, [r4, #20]
 800d0cc:	e7e5      	b.n	800d09a <__d2b+0x52>
 800d0ce:	a801      	add	r0, sp, #4
 800d0d0:	f7ff fd5a 	bl	800cb88 <__lo0bits>
 800d0d4:	9b01      	ldr	r3, [sp, #4]
 800d0d6:	6163      	str	r3, [r4, #20]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	6122      	str	r2, [r4, #16]
 800d0dc:	3020      	adds	r0, #32
 800d0de:	e7e3      	b.n	800d0a8 <__d2b+0x60>
 800d0e0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d0e4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0e8:	f8c9 0000 	str.w	r0, [r9]
 800d0ec:	6918      	ldr	r0, [r3, #16]
 800d0ee:	f7ff fd2b 	bl	800cb48 <__hi0bits>
 800d0f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0f6:	e7df      	b.n	800d0b8 <__d2b+0x70>
 800d0f8:	08019be7 	.word	0x08019be7
 800d0fc:	08019c58 	.word	0x08019c58

0800d100 <_calloc_r>:
 800d100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d102:	fba1 2402 	umull	r2, r4, r1, r2
 800d106:	b94c      	cbnz	r4, 800d11c <_calloc_r+0x1c>
 800d108:	4611      	mov	r1, r2
 800d10a:	9201      	str	r2, [sp, #4]
 800d10c:	f7fd ffea 	bl	800b0e4 <_malloc_r>
 800d110:	9a01      	ldr	r2, [sp, #4]
 800d112:	4605      	mov	r5, r0
 800d114:	b930      	cbnz	r0, 800d124 <_calloc_r+0x24>
 800d116:	4628      	mov	r0, r5
 800d118:	b003      	add	sp, #12
 800d11a:	bd30      	pop	{r4, r5, pc}
 800d11c:	220c      	movs	r2, #12
 800d11e:	6002      	str	r2, [r0, #0]
 800d120:	2500      	movs	r5, #0
 800d122:	e7f8      	b.n	800d116 <_calloc_r+0x16>
 800d124:	4621      	mov	r1, r4
 800d126:	f7fd ff69 	bl	800affc <memset>
 800d12a:	e7f4      	b.n	800d116 <_calloc_r+0x16>

0800d12c <__sfputc_r>:
 800d12c:	6893      	ldr	r3, [r2, #8]
 800d12e:	3b01      	subs	r3, #1
 800d130:	2b00      	cmp	r3, #0
 800d132:	b410      	push	{r4}
 800d134:	6093      	str	r3, [r2, #8]
 800d136:	da08      	bge.n	800d14a <__sfputc_r+0x1e>
 800d138:	6994      	ldr	r4, [r2, #24]
 800d13a:	42a3      	cmp	r3, r4
 800d13c:	db01      	blt.n	800d142 <__sfputc_r+0x16>
 800d13e:	290a      	cmp	r1, #10
 800d140:	d103      	bne.n	800d14a <__sfputc_r+0x1e>
 800d142:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d146:	f000 b98f 	b.w	800d468 <__swbuf_r>
 800d14a:	6813      	ldr	r3, [r2, #0]
 800d14c:	1c58      	adds	r0, r3, #1
 800d14e:	6010      	str	r0, [r2, #0]
 800d150:	7019      	strb	r1, [r3, #0]
 800d152:	4608      	mov	r0, r1
 800d154:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <__sfputs_r>:
 800d15a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15c:	4606      	mov	r6, r0
 800d15e:	460f      	mov	r7, r1
 800d160:	4614      	mov	r4, r2
 800d162:	18d5      	adds	r5, r2, r3
 800d164:	42ac      	cmp	r4, r5
 800d166:	d101      	bne.n	800d16c <__sfputs_r+0x12>
 800d168:	2000      	movs	r0, #0
 800d16a:	e007      	b.n	800d17c <__sfputs_r+0x22>
 800d16c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d170:	463a      	mov	r2, r7
 800d172:	4630      	mov	r0, r6
 800d174:	f7ff ffda 	bl	800d12c <__sfputc_r>
 800d178:	1c43      	adds	r3, r0, #1
 800d17a:	d1f3      	bne.n	800d164 <__sfputs_r+0xa>
 800d17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d180 <_vfiprintf_r>:
 800d180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d184:	460d      	mov	r5, r1
 800d186:	b09d      	sub	sp, #116	; 0x74
 800d188:	4614      	mov	r4, r2
 800d18a:	4698      	mov	r8, r3
 800d18c:	4606      	mov	r6, r0
 800d18e:	b118      	cbz	r0, 800d198 <_vfiprintf_r+0x18>
 800d190:	6983      	ldr	r3, [r0, #24]
 800d192:	b90b      	cbnz	r3, 800d198 <_vfiprintf_r+0x18>
 800d194:	f7ff fb7e 	bl	800c894 <__sinit>
 800d198:	4b89      	ldr	r3, [pc, #548]	; (800d3c0 <_vfiprintf_r+0x240>)
 800d19a:	429d      	cmp	r5, r3
 800d19c:	d11b      	bne.n	800d1d6 <_vfiprintf_r+0x56>
 800d19e:	6875      	ldr	r5, [r6, #4]
 800d1a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1a2:	07d9      	lsls	r1, r3, #31
 800d1a4:	d405      	bmi.n	800d1b2 <_vfiprintf_r+0x32>
 800d1a6:	89ab      	ldrh	r3, [r5, #12]
 800d1a8:	059a      	lsls	r2, r3, #22
 800d1aa:	d402      	bmi.n	800d1b2 <_vfiprintf_r+0x32>
 800d1ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ae:	f7ff fc14 	bl	800c9da <__retarget_lock_acquire_recursive>
 800d1b2:	89ab      	ldrh	r3, [r5, #12]
 800d1b4:	071b      	lsls	r3, r3, #28
 800d1b6:	d501      	bpl.n	800d1bc <_vfiprintf_r+0x3c>
 800d1b8:	692b      	ldr	r3, [r5, #16]
 800d1ba:	b9eb      	cbnz	r3, 800d1f8 <_vfiprintf_r+0x78>
 800d1bc:	4629      	mov	r1, r5
 800d1be:	4630      	mov	r0, r6
 800d1c0:	f000 f9b6 	bl	800d530 <__swsetup_r>
 800d1c4:	b1c0      	cbz	r0, 800d1f8 <_vfiprintf_r+0x78>
 800d1c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1c8:	07dc      	lsls	r4, r3, #31
 800d1ca:	d50e      	bpl.n	800d1ea <_vfiprintf_r+0x6a>
 800d1cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d0:	b01d      	add	sp, #116	; 0x74
 800d1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d6:	4b7b      	ldr	r3, [pc, #492]	; (800d3c4 <_vfiprintf_r+0x244>)
 800d1d8:	429d      	cmp	r5, r3
 800d1da:	d101      	bne.n	800d1e0 <_vfiprintf_r+0x60>
 800d1dc:	68b5      	ldr	r5, [r6, #8]
 800d1de:	e7df      	b.n	800d1a0 <_vfiprintf_r+0x20>
 800d1e0:	4b79      	ldr	r3, [pc, #484]	; (800d3c8 <_vfiprintf_r+0x248>)
 800d1e2:	429d      	cmp	r5, r3
 800d1e4:	bf08      	it	eq
 800d1e6:	68f5      	ldreq	r5, [r6, #12]
 800d1e8:	e7da      	b.n	800d1a0 <_vfiprintf_r+0x20>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	0598      	lsls	r0, r3, #22
 800d1ee:	d4ed      	bmi.n	800d1cc <_vfiprintf_r+0x4c>
 800d1f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1f2:	f7ff fbf3 	bl	800c9dc <__retarget_lock_release_recursive>
 800d1f6:	e7e9      	b.n	800d1cc <_vfiprintf_r+0x4c>
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d1fc:	2320      	movs	r3, #32
 800d1fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d202:	f8cd 800c 	str.w	r8, [sp, #12]
 800d206:	2330      	movs	r3, #48	; 0x30
 800d208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d3cc <_vfiprintf_r+0x24c>
 800d20c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d210:	f04f 0901 	mov.w	r9, #1
 800d214:	4623      	mov	r3, r4
 800d216:	469a      	mov	sl, r3
 800d218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d21c:	b10a      	cbz	r2, 800d222 <_vfiprintf_r+0xa2>
 800d21e:	2a25      	cmp	r2, #37	; 0x25
 800d220:	d1f9      	bne.n	800d216 <_vfiprintf_r+0x96>
 800d222:	ebba 0b04 	subs.w	fp, sl, r4
 800d226:	d00b      	beq.n	800d240 <_vfiprintf_r+0xc0>
 800d228:	465b      	mov	r3, fp
 800d22a:	4622      	mov	r2, r4
 800d22c:	4629      	mov	r1, r5
 800d22e:	4630      	mov	r0, r6
 800d230:	f7ff ff93 	bl	800d15a <__sfputs_r>
 800d234:	3001      	adds	r0, #1
 800d236:	f000 80aa 	beq.w	800d38e <_vfiprintf_r+0x20e>
 800d23a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d23c:	445a      	add	r2, fp
 800d23e:	9209      	str	r2, [sp, #36]	; 0x24
 800d240:	f89a 3000 	ldrb.w	r3, [sl]
 800d244:	2b00      	cmp	r3, #0
 800d246:	f000 80a2 	beq.w	800d38e <_vfiprintf_r+0x20e>
 800d24a:	2300      	movs	r3, #0
 800d24c:	f04f 32ff 	mov.w	r2, #4294967295
 800d250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d254:	f10a 0a01 	add.w	sl, sl, #1
 800d258:	9304      	str	r3, [sp, #16]
 800d25a:	9307      	str	r3, [sp, #28]
 800d25c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d260:	931a      	str	r3, [sp, #104]	; 0x68
 800d262:	4654      	mov	r4, sl
 800d264:	2205      	movs	r2, #5
 800d266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d26a:	4858      	ldr	r0, [pc, #352]	; (800d3cc <_vfiprintf_r+0x24c>)
 800d26c:	f7f2 ffb8 	bl	80001e0 <memchr>
 800d270:	9a04      	ldr	r2, [sp, #16]
 800d272:	b9d8      	cbnz	r0, 800d2ac <_vfiprintf_r+0x12c>
 800d274:	06d1      	lsls	r1, r2, #27
 800d276:	bf44      	itt	mi
 800d278:	2320      	movmi	r3, #32
 800d27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d27e:	0713      	lsls	r3, r2, #28
 800d280:	bf44      	itt	mi
 800d282:	232b      	movmi	r3, #43	; 0x2b
 800d284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d288:	f89a 3000 	ldrb.w	r3, [sl]
 800d28c:	2b2a      	cmp	r3, #42	; 0x2a
 800d28e:	d015      	beq.n	800d2bc <_vfiprintf_r+0x13c>
 800d290:	9a07      	ldr	r2, [sp, #28]
 800d292:	4654      	mov	r4, sl
 800d294:	2000      	movs	r0, #0
 800d296:	f04f 0c0a 	mov.w	ip, #10
 800d29a:	4621      	mov	r1, r4
 800d29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2a0:	3b30      	subs	r3, #48	; 0x30
 800d2a2:	2b09      	cmp	r3, #9
 800d2a4:	d94e      	bls.n	800d344 <_vfiprintf_r+0x1c4>
 800d2a6:	b1b0      	cbz	r0, 800d2d6 <_vfiprintf_r+0x156>
 800d2a8:	9207      	str	r2, [sp, #28]
 800d2aa:	e014      	b.n	800d2d6 <_vfiprintf_r+0x156>
 800d2ac:	eba0 0308 	sub.w	r3, r0, r8
 800d2b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	9304      	str	r3, [sp, #16]
 800d2b8:	46a2      	mov	sl, r4
 800d2ba:	e7d2      	b.n	800d262 <_vfiprintf_r+0xe2>
 800d2bc:	9b03      	ldr	r3, [sp, #12]
 800d2be:	1d19      	adds	r1, r3, #4
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	9103      	str	r1, [sp, #12]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	bfbb      	ittet	lt
 800d2c8:	425b      	neglt	r3, r3
 800d2ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ce:	9307      	strge	r3, [sp, #28]
 800d2d0:	9307      	strlt	r3, [sp, #28]
 800d2d2:	bfb8      	it	lt
 800d2d4:	9204      	strlt	r2, [sp, #16]
 800d2d6:	7823      	ldrb	r3, [r4, #0]
 800d2d8:	2b2e      	cmp	r3, #46	; 0x2e
 800d2da:	d10c      	bne.n	800d2f6 <_vfiprintf_r+0x176>
 800d2dc:	7863      	ldrb	r3, [r4, #1]
 800d2de:	2b2a      	cmp	r3, #42	; 0x2a
 800d2e0:	d135      	bne.n	800d34e <_vfiprintf_r+0x1ce>
 800d2e2:	9b03      	ldr	r3, [sp, #12]
 800d2e4:	1d1a      	adds	r2, r3, #4
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	9203      	str	r2, [sp, #12]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	bfb8      	it	lt
 800d2ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2f2:	3402      	adds	r4, #2
 800d2f4:	9305      	str	r3, [sp, #20]
 800d2f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d3dc <_vfiprintf_r+0x25c>
 800d2fa:	7821      	ldrb	r1, [r4, #0]
 800d2fc:	2203      	movs	r2, #3
 800d2fe:	4650      	mov	r0, sl
 800d300:	f7f2 ff6e 	bl	80001e0 <memchr>
 800d304:	b140      	cbz	r0, 800d318 <_vfiprintf_r+0x198>
 800d306:	2340      	movs	r3, #64	; 0x40
 800d308:	eba0 000a 	sub.w	r0, r0, sl
 800d30c:	fa03 f000 	lsl.w	r0, r3, r0
 800d310:	9b04      	ldr	r3, [sp, #16]
 800d312:	4303      	orrs	r3, r0
 800d314:	3401      	adds	r4, #1
 800d316:	9304      	str	r3, [sp, #16]
 800d318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31c:	482c      	ldr	r0, [pc, #176]	; (800d3d0 <_vfiprintf_r+0x250>)
 800d31e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d322:	2206      	movs	r2, #6
 800d324:	f7f2 ff5c 	bl	80001e0 <memchr>
 800d328:	2800      	cmp	r0, #0
 800d32a:	d03f      	beq.n	800d3ac <_vfiprintf_r+0x22c>
 800d32c:	4b29      	ldr	r3, [pc, #164]	; (800d3d4 <_vfiprintf_r+0x254>)
 800d32e:	bb1b      	cbnz	r3, 800d378 <_vfiprintf_r+0x1f8>
 800d330:	9b03      	ldr	r3, [sp, #12]
 800d332:	3307      	adds	r3, #7
 800d334:	f023 0307 	bic.w	r3, r3, #7
 800d338:	3308      	adds	r3, #8
 800d33a:	9303      	str	r3, [sp, #12]
 800d33c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d33e:	443b      	add	r3, r7
 800d340:	9309      	str	r3, [sp, #36]	; 0x24
 800d342:	e767      	b.n	800d214 <_vfiprintf_r+0x94>
 800d344:	fb0c 3202 	mla	r2, ip, r2, r3
 800d348:	460c      	mov	r4, r1
 800d34a:	2001      	movs	r0, #1
 800d34c:	e7a5      	b.n	800d29a <_vfiprintf_r+0x11a>
 800d34e:	2300      	movs	r3, #0
 800d350:	3401      	adds	r4, #1
 800d352:	9305      	str	r3, [sp, #20]
 800d354:	4619      	mov	r1, r3
 800d356:	f04f 0c0a 	mov.w	ip, #10
 800d35a:	4620      	mov	r0, r4
 800d35c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d360:	3a30      	subs	r2, #48	; 0x30
 800d362:	2a09      	cmp	r2, #9
 800d364:	d903      	bls.n	800d36e <_vfiprintf_r+0x1ee>
 800d366:	2b00      	cmp	r3, #0
 800d368:	d0c5      	beq.n	800d2f6 <_vfiprintf_r+0x176>
 800d36a:	9105      	str	r1, [sp, #20]
 800d36c:	e7c3      	b.n	800d2f6 <_vfiprintf_r+0x176>
 800d36e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d372:	4604      	mov	r4, r0
 800d374:	2301      	movs	r3, #1
 800d376:	e7f0      	b.n	800d35a <_vfiprintf_r+0x1da>
 800d378:	ab03      	add	r3, sp, #12
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	462a      	mov	r2, r5
 800d37e:	4b16      	ldr	r3, [pc, #88]	; (800d3d8 <_vfiprintf_r+0x258>)
 800d380:	a904      	add	r1, sp, #16
 800d382:	4630      	mov	r0, r6
 800d384:	f7fd ffc2 	bl	800b30c <_printf_float>
 800d388:	4607      	mov	r7, r0
 800d38a:	1c78      	adds	r0, r7, #1
 800d38c:	d1d6      	bne.n	800d33c <_vfiprintf_r+0x1bc>
 800d38e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d390:	07d9      	lsls	r1, r3, #31
 800d392:	d405      	bmi.n	800d3a0 <_vfiprintf_r+0x220>
 800d394:	89ab      	ldrh	r3, [r5, #12]
 800d396:	059a      	lsls	r2, r3, #22
 800d398:	d402      	bmi.n	800d3a0 <_vfiprintf_r+0x220>
 800d39a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d39c:	f7ff fb1e 	bl	800c9dc <__retarget_lock_release_recursive>
 800d3a0:	89ab      	ldrh	r3, [r5, #12]
 800d3a2:	065b      	lsls	r3, r3, #25
 800d3a4:	f53f af12 	bmi.w	800d1cc <_vfiprintf_r+0x4c>
 800d3a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3aa:	e711      	b.n	800d1d0 <_vfiprintf_r+0x50>
 800d3ac:	ab03      	add	r3, sp, #12
 800d3ae:	9300      	str	r3, [sp, #0]
 800d3b0:	462a      	mov	r2, r5
 800d3b2:	4b09      	ldr	r3, [pc, #36]	; (800d3d8 <_vfiprintf_r+0x258>)
 800d3b4:	a904      	add	r1, sp, #16
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f7fe fa4c 	bl	800b854 <_printf_i>
 800d3bc:	e7e4      	b.n	800d388 <_vfiprintf_r+0x208>
 800d3be:	bf00      	nop
 800d3c0:	08019c18 	.word	0x08019c18
 800d3c4:	08019c38 	.word	0x08019c38
 800d3c8:	08019bf8 	.word	0x08019bf8
 800d3cc:	08019db4 	.word	0x08019db4
 800d3d0:	08019dbe 	.word	0x08019dbe
 800d3d4:	0800b30d 	.word	0x0800b30d
 800d3d8:	0800d15b 	.word	0x0800d15b
 800d3dc:	08019dba 	.word	0x08019dba

0800d3e0 <__sread>:
 800d3e0:	b510      	push	{r4, lr}
 800d3e2:	460c      	mov	r4, r1
 800d3e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3e8:	f000 fa9c 	bl	800d924 <_read_r>
 800d3ec:	2800      	cmp	r0, #0
 800d3ee:	bfab      	itete	ge
 800d3f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d3f2:	89a3      	ldrhlt	r3, [r4, #12]
 800d3f4:	181b      	addge	r3, r3, r0
 800d3f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d3fa:	bfac      	ite	ge
 800d3fc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d3fe:	81a3      	strhlt	r3, [r4, #12]
 800d400:	bd10      	pop	{r4, pc}

0800d402 <__swrite>:
 800d402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d406:	461f      	mov	r7, r3
 800d408:	898b      	ldrh	r3, [r1, #12]
 800d40a:	05db      	lsls	r3, r3, #23
 800d40c:	4605      	mov	r5, r0
 800d40e:	460c      	mov	r4, r1
 800d410:	4616      	mov	r6, r2
 800d412:	d505      	bpl.n	800d420 <__swrite+0x1e>
 800d414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d418:	2302      	movs	r3, #2
 800d41a:	2200      	movs	r2, #0
 800d41c:	f000 f9f8 	bl	800d810 <_lseek_r>
 800d420:	89a3      	ldrh	r3, [r4, #12]
 800d422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d426:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d42a:	81a3      	strh	r3, [r4, #12]
 800d42c:	4632      	mov	r2, r6
 800d42e:	463b      	mov	r3, r7
 800d430:	4628      	mov	r0, r5
 800d432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d436:	f000 b869 	b.w	800d50c <_write_r>

0800d43a <__sseek>:
 800d43a:	b510      	push	{r4, lr}
 800d43c:	460c      	mov	r4, r1
 800d43e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d442:	f000 f9e5 	bl	800d810 <_lseek_r>
 800d446:	1c43      	adds	r3, r0, #1
 800d448:	89a3      	ldrh	r3, [r4, #12]
 800d44a:	bf15      	itete	ne
 800d44c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d44e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d452:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d456:	81a3      	strheq	r3, [r4, #12]
 800d458:	bf18      	it	ne
 800d45a:	81a3      	strhne	r3, [r4, #12]
 800d45c:	bd10      	pop	{r4, pc}

0800d45e <__sclose>:
 800d45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d462:	f000 b8f1 	b.w	800d648 <_close_r>
	...

0800d468 <__swbuf_r>:
 800d468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d46a:	460e      	mov	r6, r1
 800d46c:	4614      	mov	r4, r2
 800d46e:	4605      	mov	r5, r0
 800d470:	b118      	cbz	r0, 800d47a <__swbuf_r+0x12>
 800d472:	6983      	ldr	r3, [r0, #24]
 800d474:	b90b      	cbnz	r3, 800d47a <__swbuf_r+0x12>
 800d476:	f7ff fa0d 	bl	800c894 <__sinit>
 800d47a:	4b21      	ldr	r3, [pc, #132]	; (800d500 <__swbuf_r+0x98>)
 800d47c:	429c      	cmp	r4, r3
 800d47e:	d12b      	bne.n	800d4d8 <__swbuf_r+0x70>
 800d480:	686c      	ldr	r4, [r5, #4]
 800d482:	69a3      	ldr	r3, [r4, #24]
 800d484:	60a3      	str	r3, [r4, #8]
 800d486:	89a3      	ldrh	r3, [r4, #12]
 800d488:	071a      	lsls	r2, r3, #28
 800d48a:	d52f      	bpl.n	800d4ec <__swbuf_r+0x84>
 800d48c:	6923      	ldr	r3, [r4, #16]
 800d48e:	b36b      	cbz	r3, 800d4ec <__swbuf_r+0x84>
 800d490:	6923      	ldr	r3, [r4, #16]
 800d492:	6820      	ldr	r0, [r4, #0]
 800d494:	1ac0      	subs	r0, r0, r3
 800d496:	6963      	ldr	r3, [r4, #20]
 800d498:	b2f6      	uxtb	r6, r6
 800d49a:	4283      	cmp	r3, r0
 800d49c:	4637      	mov	r7, r6
 800d49e:	dc04      	bgt.n	800d4aa <__swbuf_r+0x42>
 800d4a0:	4621      	mov	r1, r4
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	f000 f966 	bl	800d774 <_fflush_r>
 800d4a8:	bb30      	cbnz	r0, 800d4f8 <__swbuf_r+0x90>
 800d4aa:	68a3      	ldr	r3, [r4, #8]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	60a3      	str	r3, [r4, #8]
 800d4b0:	6823      	ldr	r3, [r4, #0]
 800d4b2:	1c5a      	adds	r2, r3, #1
 800d4b4:	6022      	str	r2, [r4, #0]
 800d4b6:	701e      	strb	r6, [r3, #0]
 800d4b8:	6963      	ldr	r3, [r4, #20]
 800d4ba:	3001      	adds	r0, #1
 800d4bc:	4283      	cmp	r3, r0
 800d4be:	d004      	beq.n	800d4ca <__swbuf_r+0x62>
 800d4c0:	89a3      	ldrh	r3, [r4, #12]
 800d4c2:	07db      	lsls	r3, r3, #31
 800d4c4:	d506      	bpl.n	800d4d4 <__swbuf_r+0x6c>
 800d4c6:	2e0a      	cmp	r6, #10
 800d4c8:	d104      	bne.n	800d4d4 <__swbuf_r+0x6c>
 800d4ca:	4621      	mov	r1, r4
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	f000 f951 	bl	800d774 <_fflush_r>
 800d4d2:	b988      	cbnz	r0, 800d4f8 <__swbuf_r+0x90>
 800d4d4:	4638      	mov	r0, r7
 800d4d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4d8:	4b0a      	ldr	r3, [pc, #40]	; (800d504 <__swbuf_r+0x9c>)
 800d4da:	429c      	cmp	r4, r3
 800d4dc:	d101      	bne.n	800d4e2 <__swbuf_r+0x7a>
 800d4de:	68ac      	ldr	r4, [r5, #8]
 800d4e0:	e7cf      	b.n	800d482 <__swbuf_r+0x1a>
 800d4e2:	4b09      	ldr	r3, [pc, #36]	; (800d508 <__swbuf_r+0xa0>)
 800d4e4:	429c      	cmp	r4, r3
 800d4e6:	bf08      	it	eq
 800d4e8:	68ec      	ldreq	r4, [r5, #12]
 800d4ea:	e7ca      	b.n	800d482 <__swbuf_r+0x1a>
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f000 f81e 	bl	800d530 <__swsetup_r>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d0cb      	beq.n	800d490 <__swbuf_r+0x28>
 800d4f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d4fc:	e7ea      	b.n	800d4d4 <__swbuf_r+0x6c>
 800d4fe:	bf00      	nop
 800d500:	08019c18 	.word	0x08019c18
 800d504:	08019c38 	.word	0x08019c38
 800d508:	08019bf8 	.word	0x08019bf8

0800d50c <_write_r>:
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	4d07      	ldr	r5, [pc, #28]	; (800d52c <_write_r+0x20>)
 800d510:	4604      	mov	r4, r0
 800d512:	4608      	mov	r0, r1
 800d514:	4611      	mov	r1, r2
 800d516:	2200      	movs	r2, #0
 800d518:	602a      	str	r2, [r5, #0]
 800d51a:	461a      	mov	r2, r3
 800d51c:	f7f4 f92a 	bl	8001774 <_write>
 800d520:	1c43      	adds	r3, r0, #1
 800d522:	d102      	bne.n	800d52a <_write_r+0x1e>
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	b103      	cbz	r3, 800d52a <_write_r+0x1e>
 800d528:	6023      	str	r3, [r4, #0]
 800d52a:	bd38      	pop	{r3, r4, r5, pc}
 800d52c:	20001ad8 	.word	0x20001ad8

0800d530 <__swsetup_r>:
 800d530:	4b32      	ldr	r3, [pc, #200]	; (800d5fc <__swsetup_r+0xcc>)
 800d532:	b570      	push	{r4, r5, r6, lr}
 800d534:	681d      	ldr	r5, [r3, #0]
 800d536:	4606      	mov	r6, r0
 800d538:	460c      	mov	r4, r1
 800d53a:	b125      	cbz	r5, 800d546 <__swsetup_r+0x16>
 800d53c:	69ab      	ldr	r3, [r5, #24]
 800d53e:	b913      	cbnz	r3, 800d546 <__swsetup_r+0x16>
 800d540:	4628      	mov	r0, r5
 800d542:	f7ff f9a7 	bl	800c894 <__sinit>
 800d546:	4b2e      	ldr	r3, [pc, #184]	; (800d600 <__swsetup_r+0xd0>)
 800d548:	429c      	cmp	r4, r3
 800d54a:	d10f      	bne.n	800d56c <__swsetup_r+0x3c>
 800d54c:	686c      	ldr	r4, [r5, #4]
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d554:	0719      	lsls	r1, r3, #28
 800d556:	d42c      	bmi.n	800d5b2 <__swsetup_r+0x82>
 800d558:	06dd      	lsls	r5, r3, #27
 800d55a:	d411      	bmi.n	800d580 <__swsetup_r+0x50>
 800d55c:	2309      	movs	r3, #9
 800d55e:	6033      	str	r3, [r6, #0]
 800d560:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d564:	81a3      	strh	r3, [r4, #12]
 800d566:	f04f 30ff 	mov.w	r0, #4294967295
 800d56a:	e03e      	b.n	800d5ea <__swsetup_r+0xba>
 800d56c:	4b25      	ldr	r3, [pc, #148]	; (800d604 <__swsetup_r+0xd4>)
 800d56e:	429c      	cmp	r4, r3
 800d570:	d101      	bne.n	800d576 <__swsetup_r+0x46>
 800d572:	68ac      	ldr	r4, [r5, #8]
 800d574:	e7eb      	b.n	800d54e <__swsetup_r+0x1e>
 800d576:	4b24      	ldr	r3, [pc, #144]	; (800d608 <__swsetup_r+0xd8>)
 800d578:	429c      	cmp	r4, r3
 800d57a:	bf08      	it	eq
 800d57c:	68ec      	ldreq	r4, [r5, #12]
 800d57e:	e7e6      	b.n	800d54e <__swsetup_r+0x1e>
 800d580:	0758      	lsls	r0, r3, #29
 800d582:	d512      	bpl.n	800d5aa <__swsetup_r+0x7a>
 800d584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d586:	b141      	cbz	r1, 800d59a <__swsetup_r+0x6a>
 800d588:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d58c:	4299      	cmp	r1, r3
 800d58e:	d002      	beq.n	800d596 <__swsetup_r+0x66>
 800d590:	4630      	mov	r0, r6
 800d592:	f7fd fd3b 	bl	800b00c <_free_r>
 800d596:	2300      	movs	r3, #0
 800d598:	6363      	str	r3, [r4, #52]	; 0x34
 800d59a:	89a3      	ldrh	r3, [r4, #12]
 800d59c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5a0:	81a3      	strh	r3, [r4, #12]
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	6063      	str	r3, [r4, #4]
 800d5a6:	6923      	ldr	r3, [r4, #16]
 800d5a8:	6023      	str	r3, [r4, #0]
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	f043 0308 	orr.w	r3, r3, #8
 800d5b0:	81a3      	strh	r3, [r4, #12]
 800d5b2:	6923      	ldr	r3, [r4, #16]
 800d5b4:	b94b      	cbnz	r3, 800d5ca <__swsetup_r+0x9a>
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5c0:	d003      	beq.n	800d5ca <__swsetup_r+0x9a>
 800d5c2:	4621      	mov	r1, r4
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	f000 f95b 	bl	800d880 <__smakebuf_r>
 800d5ca:	89a0      	ldrh	r0, [r4, #12]
 800d5cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5d0:	f010 0301 	ands.w	r3, r0, #1
 800d5d4:	d00a      	beq.n	800d5ec <__swsetup_r+0xbc>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	60a3      	str	r3, [r4, #8]
 800d5da:	6963      	ldr	r3, [r4, #20]
 800d5dc:	425b      	negs	r3, r3
 800d5de:	61a3      	str	r3, [r4, #24]
 800d5e0:	6923      	ldr	r3, [r4, #16]
 800d5e2:	b943      	cbnz	r3, 800d5f6 <__swsetup_r+0xc6>
 800d5e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5e8:	d1ba      	bne.n	800d560 <__swsetup_r+0x30>
 800d5ea:	bd70      	pop	{r4, r5, r6, pc}
 800d5ec:	0781      	lsls	r1, r0, #30
 800d5ee:	bf58      	it	pl
 800d5f0:	6963      	ldrpl	r3, [r4, #20]
 800d5f2:	60a3      	str	r3, [r4, #8]
 800d5f4:	e7f4      	b.n	800d5e0 <__swsetup_r+0xb0>
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	e7f7      	b.n	800d5ea <__swsetup_r+0xba>
 800d5fa:	bf00      	nop
 800d5fc:	20000878 	.word	0x20000878
 800d600:	08019c18 	.word	0x08019c18
 800d604:	08019c38 	.word	0x08019c38
 800d608:	08019bf8 	.word	0x08019bf8

0800d60c <__assert_func>:
 800d60c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d60e:	4614      	mov	r4, r2
 800d610:	461a      	mov	r2, r3
 800d612:	4b09      	ldr	r3, [pc, #36]	; (800d638 <__assert_func+0x2c>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4605      	mov	r5, r0
 800d618:	68d8      	ldr	r0, [r3, #12]
 800d61a:	b14c      	cbz	r4, 800d630 <__assert_func+0x24>
 800d61c:	4b07      	ldr	r3, [pc, #28]	; (800d63c <__assert_func+0x30>)
 800d61e:	9100      	str	r1, [sp, #0]
 800d620:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d624:	4906      	ldr	r1, [pc, #24]	; (800d640 <__assert_func+0x34>)
 800d626:	462b      	mov	r3, r5
 800d628:	f000 f8e0 	bl	800d7ec <fiprintf>
 800d62c:	f000 f999 	bl	800d962 <abort>
 800d630:	4b04      	ldr	r3, [pc, #16]	; (800d644 <__assert_func+0x38>)
 800d632:	461c      	mov	r4, r3
 800d634:	e7f3      	b.n	800d61e <__assert_func+0x12>
 800d636:	bf00      	nop
 800d638:	20000878 	.word	0x20000878
 800d63c:	08019dc5 	.word	0x08019dc5
 800d640:	08019dd2 	.word	0x08019dd2
 800d644:	08019e00 	.word	0x08019e00

0800d648 <_close_r>:
 800d648:	b538      	push	{r3, r4, r5, lr}
 800d64a:	4d06      	ldr	r5, [pc, #24]	; (800d664 <_close_r+0x1c>)
 800d64c:	2300      	movs	r3, #0
 800d64e:	4604      	mov	r4, r0
 800d650:	4608      	mov	r0, r1
 800d652:	602b      	str	r3, [r5, #0]
 800d654:	f000 fb26 	bl	800dca4 <_close>
 800d658:	1c43      	adds	r3, r0, #1
 800d65a:	d102      	bne.n	800d662 <_close_r+0x1a>
 800d65c:	682b      	ldr	r3, [r5, #0]
 800d65e:	b103      	cbz	r3, 800d662 <_close_r+0x1a>
 800d660:	6023      	str	r3, [r4, #0]
 800d662:	bd38      	pop	{r3, r4, r5, pc}
 800d664:	20001ad8 	.word	0x20001ad8

0800d668 <__sflush_r>:
 800d668:	898a      	ldrh	r2, [r1, #12]
 800d66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66e:	4605      	mov	r5, r0
 800d670:	0710      	lsls	r0, r2, #28
 800d672:	460c      	mov	r4, r1
 800d674:	d458      	bmi.n	800d728 <__sflush_r+0xc0>
 800d676:	684b      	ldr	r3, [r1, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	dc05      	bgt.n	800d688 <__sflush_r+0x20>
 800d67c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d67e:	2b00      	cmp	r3, #0
 800d680:	dc02      	bgt.n	800d688 <__sflush_r+0x20>
 800d682:	2000      	movs	r0, #0
 800d684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d68a:	2e00      	cmp	r6, #0
 800d68c:	d0f9      	beq.n	800d682 <__sflush_r+0x1a>
 800d68e:	2300      	movs	r3, #0
 800d690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d694:	682f      	ldr	r7, [r5, #0]
 800d696:	602b      	str	r3, [r5, #0]
 800d698:	d032      	beq.n	800d700 <__sflush_r+0x98>
 800d69a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d69c:	89a3      	ldrh	r3, [r4, #12]
 800d69e:	075a      	lsls	r2, r3, #29
 800d6a0:	d505      	bpl.n	800d6ae <__sflush_r+0x46>
 800d6a2:	6863      	ldr	r3, [r4, #4]
 800d6a4:	1ac0      	subs	r0, r0, r3
 800d6a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6a8:	b10b      	cbz	r3, 800d6ae <__sflush_r+0x46>
 800d6aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6ac:	1ac0      	subs	r0, r0, r3
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6b4:	6a21      	ldr	r1, [r4, #32]
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	47b0      	blx	r6
 800d6ba:	1c43      	adds	r3, r0, #1
 800d6bc:	89a3      	ldrh	r3, [r4, #12]
 800d6be:	d106      	bne.n	800d6ce <__sflush_r+0x66>
 800d6c0:	6829      	ldr	r1, [r5, #0]
 800d6c2:	291d      	cmp	r1, #29
 800d6c4:	d82c      	bhi.n	800d720 <__sflush_r+0xb8>
 800d6c6:	4a2a      	ldr	r2, [pc, #168]	; (800d770 <__sflush_r+0x108>)
 800d6c8:	40ca      	lsrs	r2, r1
 800d6ca:	07d6      	lsls	r6, r2, #31
 800d6cc:	d528      	bpl.n	800d720 <__sflush_r+0xb8>
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	6062      	str	r2, [r4, #4]
 800d6d2:	04d9      	lsls	r1, r3, #19
 800d6d4:	6922      	ldr	r2, [r4, #16]
 800d6d6:	6022      	str	r2, [r4, #0]
 800d6d8:	d504      	bpl.n	800d6e4 <__sflush_r+0x7c>
 800d6da:	1c42      	adds	r2, r0, #1
 800d6dc:	d101      	bne.n	800d6e2 <__sflush_r+0x7a>
 800d6de:	682b      	ldr	r3, [r5, #0]
 800d6e0:	b903      	cbnz	r3, 800d6e4 <__sflush_r+0x7c>
 800d6e2:	6560      	str	r0, [r4, #84]	; 0x54
 800d6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6e6:	602f      	str	r7, [r5, #0]
 800d6e8:	2900      	cmp	r1, #0
 800d6ea:	d0ca      	beq.n	800d682 <__sflush_r+0x1a>
 800d6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6f0:	4299      	cmp	r1, r3
 800d6f2:	d002      	beq.n	800d6fa <__sflush_r+0x92>
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	f7fd fc89 	bl	800b00c <_free_r>
 800d6fa:	2000      	movs	r0, #0
 800d6fc:	6360      	str	r0, [r4, #52]	; 0x34
 800d6fe:	e7c1      	b.n	800d684 <__sflush_r+0x1c>
 800d700:	6a21      	ldr	r1, [r4, #32]
 800d702:	2301      	movs	r3, #1
 800d704:	4628      	mov	r0, r5
 800d706:	47b0      	blx	r6
 800d708:	1c41      	adds	r1, r0, #1
 800d70a:	d1c7      	bne.n	800d69c <__sflush_r+0x34>
 800d70c:	682b      	ldr	r3, [r5, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d0c4      	beq.n	800d69c <__sflush_r+0x34>
 800d712:	2b1d      	cmp	r3, #29
 800d714:	d001      	beq.n	800d71a <__sflush_r+0xb2>
 800d716:	2b16      	cmp	r3, #22
 800d718:	d101      	bne.n	800d71e <__sflush_r+0xb6>
 800d71a:	602f      	str	r7, [r5, #0]
 800d71c:	e7b1      	b.n	800d682 <__sflush_r+0x1a>
 800d71e:	89a3      	ldrh	r3, [r4, #12]
 800d720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d724:	81a3      	strh	r3, [r4, #12]
 800d726:	e7ad      	b.n	800d684 <__sflush_r+0x1c>
 800d728:	690f      	ldr	r7, [r1, #16]
 800d72a:	2f00      	cmp	r7, #0
 800d72c:	d0a9      	beq.n	800d682 <__sflush_r+0x1a>
 800d72e:	0793      	lsls	r3, r2, #30
 800d730:	680e      	ldr	r6, [r1, #0]
 800d732:	bf08      	it	eq
 800d734:	694b      	ldreq	r3, [r1, #20]
 800d736:	600f      	str	r7, [r1, #0]
 800d738:	bf18      	it	ne
 800d73a:	2300      	movne	r3, #0
 800d73c:	eba6 0807 	sub.w	r8, r6, r7
 800d740:	608b      	str	r3, [r1, #8]
 800d742:	f1b8 0f00 	cmp.w	r8, #0
 800d746:	dd9c      	ble.n	800d682 <__sflush_r+0x1a>
 800d748:	6a21      	ldr	r1, [r4, #32]
 800d74a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d74c:	4643      	mov	r3, r8
 800d74e:	463a      	mov	r2, r7
 800d750:	4628      	mov	r0, r5
 800d752:	47b0      	blx	r6
 800d754:	2800      	cmp	r0, #0
 800d756:	dc06      	bgt.n	800d766 <__sflush_r+0xfe>
 800d758:	89a3      	ldrh	r3, [r4, #12]
 800d75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d75e:	81a3      	strh	r3, [r4, #12]
 800d760:	f04f 30ff 	mov.w	r0, #4294967295
 800d764:	e78e      	b.n	800d684 <__sflush_r+0x1c>
 800d766:	4407      	add	r7, r0
 800d768:	eba8 0800 	sub.w	r8, r8, r0
 800d76c:	e7e9      	b.n	800d742 <__sflush_r+0xda>
 800d76e:	bf00      	nop
 800d770:	20400001 	.word	0x20400001

0800d774 <_fflush_r>:
 800d774:	b538      	push	{r3, r4, r5, lr}
 800d776:	690b      	ldr	r3, [r1, #16]
 800d778:	4605      	mov	r5, r0
 800d77a:	460c      	mov	r4, r1
 800d77c:	b913      	cbnz	r3, 800d784 <_fflush_r+0x10>
 800d77e:	2500      	movs	r5, #0
 800d780:	4628      	mov	r0, r5
 800d782:	bd38      	pop	{r3, r4, r5, pc}
 800d784:	b118      	cbz	r0, 800d78e <_fflush_r+0x1a>
 800d786:	6983      	ldr	r3, [r0, #24]
 800d788:	b90b      	cbnz	r3, 800d78e <_fflush_r+0x1a>
 800d78a:	f7ff f883 	bl	800c894 <__sinit>
 800d78e:	4b14      	ldr	r3, [pc, #80]	; (800d7e0 <_fflush_r+0x6c>)
 800d790:	429c      	cmp	r4, r3
 800d792:	d11b      	bne.n	800d7cc <_fflush_r+0x58>
 800d794:	686c      	ldr	r4, [r5, #4]
 800d796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d0ef      	beq.n	800d77e <_fflush_r+0xa>
 800d79e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d7a0:	07d0      	lsls	r0, r2, #31
 800d7a2:	d404      	bmi.n	800d7ae <_fflush_r+0x3a>
 800d7a4:	0599      	lsls	r1, r3, #22
 800d7a6:	d402      	bmi.n	800d7ae <_fflush_r+0x3a>
 800d7a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7aa:	f7ff f916 	bl	800c9da <__retarget_lock_acquire_recursive>
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	4621      	mov	r1, r4
 800d7b2:	f7ff ff59 	bl	800d668 <__sflush_r>
 800d7b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7b8:	07da      	lsls	r2, r3, #31
 800d7ba:	4605      	mov	r5, r0
 800d7bc:	d4e0      	bmi.n	800d780 <_fflush_r+0xc>
 800d7be:	89a3      	ldrh	r3, [r4, #12]
 800d7c0:	059b      	lsls	r3, r3, #22
 800d7c2:	d4dd      	bmi.n	800d780 <_fflush_r+0xc>
 800d7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7c6:	f7ff f909 	bl	800c9dc <__retarget_lock_release_recursive>
 800d7ca:	e7d9      	b.n	800d780 <_fflush_r+0xc>
 800d7cc:	4b05      	ldr	r3, [pc, #20]	; (800d7e4 <_fflush_r+0x70>)
 800d7ce:	429c      	cmp	r4, r3
 800d7d0:	d101      	bne.n	800d7d6 <_fflush_r+0x62>
 800d7d2:	68ac      	ldr	r4, [r5, #8]
 800d7d4:	e7df      	b.n	800d796 <_fflush_r+0x22>
 800d7d6:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <_fflush_r+0x74>)
 800d7d8:	429c      	cmp	r4, r3
 800d7da:	bf08      	it	eq
 800d7dc:	68ec      	ldreq	r4, [r5, #12]
 800d7de:	e7da      	b.n	800d796 <_fflush_r+0x22>
 800d7e0:	08019c18 	.word	0x08019c18
 800d7e4:	08019c38 	.word	0x08019c38
 800d7e8:	08019bf8 	.word	0x08019bf8

0800d7ec <fiprintf>:
 800d7ec:	b40e      	push	{r1, r2, r3}
 800d7ee:	b503      	push	{r0, r1, lr}
 800d7f0:	4601      	mov	r1, r0
 800d7f2:	ab03      	add	r3, sp, #12
 800d7f4:	4805      	ldr	r0, [pc, #20]	; (800d80c <fiprintf+0x20>)
 800d7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7fa:	6800      	ldr	r0, [r0, #0]
 800d7fc:	9301      	str	r3, [sp, #4]
 800d7fe:	f7ff fcbf 	bl	800d180 <_vfiprintf_r>
 800d802:	b002      	add	sp, #8
 800d804:	f85d eb04 	ldr.w	lr, [sp], #4
 800d808:	b003      	add	sp, #12
 800d80a:	4770      	bx	lr
 800d80c:	20000878 	.word	0x20000878

0800d810 <_lseek_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	4d07      	ldr	r5, [pc, #28]	; (800d830 <_lseek_r+0x20>)
 800d814:	4604      	mov	r4, r0
 800d816:	4608      	mov	r0, r1
 800d818:	4611      	mov	r1, r2
 800d81a:	2200      	movs	r2, #0
 800d81c:	602a      	str	r2, [r5, #0]
 800d81e:	461a      	mov	r2, r3
 800d820:	f000 fa68 	bl	800dcf4 <_lseek>
 800d824:	1c43      	adds	r3, r0, #1
 800d826:	d102      	bne.n	800d82e <_lseek_r+0x1e>
 800d828:	682b      	ldr	r3, [r5, #0]
 800d82a:	b103      	cbz	r3, 800d82e <_lseek_r+0x1e>
 800d82c:	6023      	str	r3, [r4, #0]
 800d82e:	bd38      	pop	{r3, r4, r5, pc}
 800d830:	20001ad8 	.word	0x20001ad8

0800d834 <__swhatbuf_r>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	460e      	mov	r6, r1
 800d838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d83c:	2900      	cmp	r1, #0
 800d83e:	b096      	sub	sp, #88	; 0x58
 800d840:	4614      	mov	r4, r2
 800d842:	461d      	mov	r5, r3
 800d844:	da08      	bge.n	800d858 <__swhatbuf_r+0x24>
 800d846:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d84a:	2200      	movs	r2, #0
 800d84c:	602a      	str	r2, [r5, #0]
 800d84e:	061a      	lsls	r2, r3, #24
 800d850:	d410      	bmi.n	800d874 <__swhatbuf_r+0x40>
 800d852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d856:	e00e      	b.n	800d876 <__swhatbuf_r+0x42>
 800d858:	466a      	mov	r2, sp
 800d85a:	f000 f889 	bl	800d970 <_fstat_r>
 800d85e:	2800      	cmp	r0, #0
 800d860:	dbf1      	blt.n	800d846 <__swhatbuf_r+0x12>
 800d862:	9a01      	ldr	r2, [sp, #4]
 800d864:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d868:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d86c:	425a      	negs	r2, r3
 800d86e:	415a      	adcs	r2, r3
 800d870:	602a      	str	r2, [r5, #0]
 800d872:	e7ee      	b.n	800d852 <__swhatbuf_r+0x1e>
 800d874:	2340      	movs	r3, #64	; 0x40
 800d876:	2000      	movs	r0, #0
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	b016      	add	sp, #88	; 0x58
 800d87c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d880 <__smakebuf_r>:
 800d880:	898b      	ldrh	r3, [r1, #12]
 800d882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d884:	079d      	lsls	r5, r3, #30
 800d886:	4606      	mov	r6, r0
 800d888:	460c      	mov	r4, r1
 800d88a:	d507      	bpl.n	800d89c <__smakebuf_r+0x1c>
 800d88c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d890:	6023      	str	r3, [r4, #0]
 800d892:	6123      	str	r3, [r4, #16]
 800d894:	2301      	movs	r3, #1
 800d896:	6163      	str	r3, [r4, #20]
 800d898:	b002      	add	sp, #8
 800d89a:	bd70      	pop	{r4, r5, r6, pc}
 800d89c:	ab01      	add	r3, sp, #4
 800d89e:	466a      	mov	r2, sp
 800d8a0:	f7ff ffc8 	bl	800d834 <__swhatbuf_r>
 800d8a4:	9900      	ldr	r1, [sp, #0]
 800d8a6:	4605      	mov	r5, r0
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	f7fd fc1b 	bl	800b0e4 <_malloc_r>
 800d8ae:	b948      	cbnz	r0, 800d8c4 <__smakebuf_r+0x44>
 800d8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b4:	059a      	lsls	r2, r3, #22
 800d8b6:	d4ef      	bmi.n	800d898 <__smakebuf_r+0x18>
 800d8b8:	f023 0303 	bic.w	r3, r3, #3
 800d8bc:	f043 0302 	orr.w	r3, r3, #2
 800d8c0:	81a3      	strh	r3, [r4, #12]
 800d8c2:	e7e3      	b.n	800d88c <__smakebuf_r+0xc>
 800d8c4:	4b0d      	ldr	r3, [pc, #52]	; (800d8fc <__smakebuf_r+0x7c>)
 800d8c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d8c8:	89a3      	ldrh	r3, [r4, #12]
 800d8ca:	6020      	str	r0, [r4, #0]
 800d8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8d0:	81a3      	strh	r3, [r4, #12]
 800d8d2:	9b00      	ldr	r3, [sp, #0]
 800d8d4:	6163      	str	r3, [r4, #20]
 800d8d6:	9b01      	ldr	r3, [sp, #4]
 800d8d8:	6120      	str	r0, [r4, #16]
 800d8da:	b15b      	cbz	r3, 800d8f4 <__smakebuf_r+0x74>
 800d8dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	f000 f857 	bl	800d994 <_isatty_r>
 800d8e6:	b128      	cbz	r0, 800d8f4 <__smakebuf_r+0x74>
 800d8e8:	89a3      	ldrh	r3, [r4, #12]
 800d8ea:	f023 0303 	bic.w	r3, r3, #3
 800d8ee:	f043 0301 	orr.w	r3, r3, #1
 800d8f2:	81a3      	strh	r3, [r4, #12]
 800d8f4:	89a0      	ldrh	r0, [r4, #12]
 800d8f6:	4305      	orrs	r5, r0
 800d8f8:	81a5      	strh	r5, [r4, #12]
 800d8fa:	e7cd      	b.n	800d898 <__smakebuf_r+0x18>
 800d8fc:	0800c82d 	.word	0x0800c82d

0800d900 <__ascii_mbtowc>:
 800d900:	b082      	sub	sp, #8
 800d902:	b901      	cbnz	r1, 800d906 <__ascii_mbtowc+0x6>
 800d904:	a901      	add	r1, sp, #4
 800d906:	b142      	cbz	r2, 800d91a <__ascii_mbtowc+0x1a>
 800d908:	b14b      	cbz	r3, 800d91e <__ascii_mbtowc+0x1e>
 800d90a:	7813      	ldrb	r3, [r2, #0]
 800d90c:	600b      	str	r3, [r1, #0]
 800d90e:	7812      	ldrb	r2, [r2, #0]
 800d910:	1e10      	subs	r0, r2, #0
 800d912:	bf18      	it	ne
 800d914:	2001      	movne	r0, #1
 800d916:	b002      	add	sp, #8
 800d918:	4770      	bx	lr
 800d91a:	4610      	mov	r0, r2
 800d91c:	e7fb      	b.n	800d916 <__ascii_mbtowc+0x16>
 800d91e:	f06f 0001 	mvn.w	r0, #1
 800d922:	e7f8      	b.n	800d916 <__ascii_mbtowc+0x16>

0800d924 <_read_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	4d07      	ldr	r5, [pc, #28]	; (800d944 <_read_r+0x20>)
 800d928:	4604      	mov	r4, r0
 800d92a:	4608      	mov	r0, r1
 800d92c:	4611      	mov	r1, r2
 800d92e:	2200      	movs	r2, #0
 800d930:	602a      	str	r2, [r5, #0]
 800d932:	461a      	mov	r2, r3
 800d934:	f000 f9e6 	bl	800dd04 <_read>
 800d938:	1c43      	adds	r3, r0, #1
 800d93a:	d102      	bne.n	800d942 <_read_r+0x1e>
 800d93c:	682b      	ldr	r3, [r5, #0]
 800d93e:	b103      	cbz	r3, 800d942 <_read_r+0x1e>
 800d940:	6023      	str	r3, [r4, #0]
 800d942:	bd38      	pop	{r3, r4, r5, pc}
 800d944:	20001ad8 	.word	0x20001ad8

0800d948 <__ascii_wctomb>:
 800d948:	b149      	cbz	r1, 800d95e <__ascii_wctomb+0x16>
 800d94a:	2aff      	cmp	r2, #255	; 0xff
 800d94c:	bf85      	ittet	hi
 800d94e:	238a      	movhi	r3, #138	; 0x8a
 800d950:	6003      	strhi	r3, [r0, #0]
 800d952:	700a      	strbls	r2, [r1, #0]
 800d954:	f04f 30ff 	movhi.w	r0, #4294967295
 800d958:	bf98      	it	ls
 800d95a:	2001      	movls	r0, #1
 800d95c:	4770      	bx	lr
 800d95e:	4608      	mov	r0, r1
 800d960:	4770      	bx	lr

0800d962 <abort>:
 800d962:	b508      	push	{r3, lr}
 800d964:	2006      	movs	r0, #6
 800d966:	f000 f84d 	bl	800da04 <raise>
 800d96a:	2001      	movs	r0, #1
 800d96c:	f000 f9d2 	bl	800dd14 <_exit>

0800d970 <_fstat_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4d07      	ldr	r5, [pc, #28]	; (800d990 <_fstat_r+0x20>)
 800d974:	2300      	movs	r3, #0
 800d976:	4604      	mov	r4, r0
 800d978:	4608      	mov	r0, r1
 800d97a:	4611      	mov	r1, r2
 800d97c:	602b      	str	r3, [r5, #0]
 800d97e:	f000 f999 	bl	800dcb4 <_fstat>
 800d982:	1c43      	adds	r3, r0, #1
 800d984:	d102      	bne.n	800d98c <_fstat_r+0x1c>
 800d986:	682b      	ldr	r3, [r5, #0]
 800d988:	b103      	cbz	r3, 800d98c <_fstat_r+0x1c>
 800d98a:	6023      	str	r3, [r4, #0]
 800d98c:	bd38      	pop	{r3, r4, r5, pc}
 800d98e:	bf00      	nop
 800d990:	20001ad8 	.word	0x20001ad8

0800d994 <_isatty_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	4d06      	ldr	r5, [pc, #24]	; (800d9b0 <_isatty_r+0x1c>)
 800d998:	2300      	movs	r3, #0
 800d99a:	4604      	mov	r4, r0
 800d99c:	4608      	mov	r0, r1
 800d99e:	602b      	str	r3, [r5, #0]
 800d9a0:	f000 f998 	bl	800dcd4 <_isatty>
 800d9a4:	1c43      	adds	r3, r0, #1
 800d9a6:	d102      	bne.n	800d9ae <_isatty_r+0x1a>
 800d9a8:	682b      	ldr	r3, [r5, #0]
 800d9aa:	b103      	cbz	r3, 800d9ae <_isatty_r+0x1a>
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	bd38      	pop	{r3, r4, r5, pc}
 800d9b0:	20001ad8 	.word	0x20001ad8

0800d9b4 <_raise_r>:
 800d9b4:	291f      	cmp	r1, #31
 800d9b6:	b538      	push	{r3, r4, r5, lr}
 800d9b8:	4604      	mov	r4, r0
 800d9ba:	460d      	mov	r5, r1
 800d9bc:	d904      	bls.n	800d9c8 <_raise_r+0x14>
 800d9be:	2316      	movs	r3, #22
 800d9c0:	6003      	str	r3, [r0, #0]
 800d9c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c6:	bd38      	pop	{r3, r4, r5, pc}
 800d9c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d9ca:	b112      	cbz	r2, 800d9d2 <_raise_r+0x1e>
 800d9cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9d0:	b94b      	cbnz	r3, 800d9e6 <_raise_r+0x32>
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	f000 f830 	bl	800da38 <_getpid_r>
 800d9d8:	462a      	mov	r2, r5
 800d9da:	4601      	mov	r1, r0
 800d9dc:	4620      	mov	r0, r4
 800d9de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9e2:	f000 b817 	b.w	800da14 <_kill_r>
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d00a      	beq.n	800da00 <_raise_r+0x4c>
 800d9ea:	1c59      	adds	r1, r3, #1
 800d9ec:	d103      	bne.n	800d9f6 <_raise_r+0x42>
 800d9ee:	2316      	movs	r3, #22
 800d9f0:	6003      	str	r3, [r0, #0]
 800d9f2:	2001      	movs	r0, #1
 800d9f4:	e7e7      	b.n	800d9c6 <_raise_r+0x12>
 800d9f6:	2400      	movs	r4, #0
 800d9f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	4798      	blx	r3
 800da00:	2000      	movs	r0, #0
 800da02:	e7e0      	b.n	800d9c6 <_raise_r+0x12>

0800da04 <raise>:
 800da04:	4b02      	ldr	r3, [pc, #8]	; (800da10 <raise+0xc>)
 800da06:	4601      	mov	r1, r0
 800da08:	6818      	ldr	r0, [r3, #0]
 800da0a:	f7ff bfd3 	b.w	800d9b4 <_raise_r>
 800da0e:	bf00      	nop
 800da10:	20000878 	.word	0x20000878

0800da14 <_kill_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4d07      	ldr	r5, [pc, #28]	; (800da34 <_kill_r+0x20>)
 800da18:	2300      	movs	r3, #0
 800da1a:	4604      	mov	r4, r0
 800da1c:	4608      	mov	r0, r1
 800da1e:	4611      	mov	r1, r2
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	f000 f95f 	bl	800dce4 <_kill>
 800da26:	1c43      	adds	r3, r0, #1
 800da28:	d102      	bne.n	800da30 <_kill_r+0x1c>
 800da2a:	682b      	ldr	r3, [r5, #0]
 800da2c:	b103      	cbz	r3, 800da30 <_kill_r+0x1c>
 800da2e:	6023      	str	r3, [r4, #0]
 800da30:	bd38      	pop	{r3, r4, r5, pc}
 800da32:	bf00      	nop
 800da34:	20001ad8 	.word	0x20001ad8

0800da38 <_getpid_r>:
 800da38:	f000 b944 	b.w	800dcc4 <_getpid>

0800da3c <expf>:
 800da3c:	b508      	push	{r3, lr}
 800da3e:	ed2d 8b02 	vpush	{d8}
 800da42:	eef0 8a40 	vmov.f32	s17, s0
 800da46:	f000 f82f 	bl	800daa8 <__ieee754_expf>
 800da4a:	eeb0 8a40 	vmov.f32	s16, s0
 800da4e:	eeb0 0a68 	vmov.f32	s0, s17
 800da52:	f000 f919 	bl	800dc88 <finitef>
 800da56:	b160      	cbz	r0, 800da72 <expf+0x36>
 800da58:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800da98 <expf+0x5c>
 800da5c:	eef4 8ae7 	vcmpe.f32	s17, s15
 800da60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da64:	dd0a      	ble.n	800da7c <expf+0x40>
 800da66:	f7fd fa89 	bl	800af7c <__errno>
 800da6a:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800da9c <expf+0x60>
 800da6e:	2322      	movs	r3, #34	; 0x22
 800da70:	6003      	str	r3, [r0, #0]
 800da72:	eeb0 0a48 	vmov.f32	s0, s16
 800da76:	ecbd 8b02 	vpop	{d8}
 800da7a:	bd08      	pop	{r3, pc}
 800da7c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800daa0 <expf+0x64>
 800da80:	eef4 8ae7 	vcmpe.f32	s17, s15
 800da84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da88:	d5f3      	bpl.n	800da72 <expf+0x36>
 800da8a:	f7fd fa77 	bl	800af7c <__errno>
 800da8e:	2322      	movs	r3, #34	; 0x22
 800da90:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800daa4 <expf+0x68>
 800da94:	6003      	str	r3, [r0, #0]
 800da96:	e7ec      	b.n	800da72 <expf+0x36>
 800da98:	42b17180 	.word	0x42b17180
 800da9c:	7f800000 	.word	0x7f800000
 800daa0:	c2cff1b5 	.word	0xc2cff1b5
 800daa4:	00000000 	.word	0x00000000

0800daa8 <__ieee754_expf>:
 800daa8:	ee10 2a10 	vmov	r2, s0
 800daac:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800dab0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800dab4:	d902      	bls.n	800dabc <__ieee754_expf+0x14>
 800dab6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800daba:	4770      	bx	lr
 800dabc:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800dac0:	d106      	bne.n	800dad0 <__ieee754_expf+0x28>
 800dac2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800dbfc <__ieee754_expf+0x154>
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	bf18      	it	ne
 800daca:	eeb0 0a67 	vmovne.f32	s0, s15
 800dace:	4770      	bx	lr
 800dad0:	484b      	ldr	r0, [pc, #300]	; (800dc00 <__ieee754_expf+0x158>)
 800dad2:	4282      	cmp	r2, r0
 800dad4:	dd02      	ble.n	800dadc <__ieee754_expf+0x34>
 800dad6:	2000      	movs	r0, #0
 800dad8:	f000 b8d0 	b.w	800dc7c <__math_oflowf>
 800dadc:	2a00      	cmp	r2, #0
 800dade:	da05      	bge.n	800daec <__ieee754_expf+0x44>
 800dae0:	4a48      	ldr	r2, [pc, #288]	; (800dc04 <__ieee754_expf+0x15c>)
 800dae2:	4291      	cmp	r1, r2
 800dae4:	d902      	bls.n	800daec <__ieee754_expf+0x44>
 800dae6:	2000      	movs	r0, #0
 800dae8:	f000 b8c2 	b.w	800dc70 <__math_uflowf>
 800daec:	4a46      	ldr	r2, [pc, #280]	; (800dc08 <__ieee754_expf+0x160>)
 800daee:	4291      	cmp	r1, r2
 800daf0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800daf4:	d952      	bls.n	800db9c <__ieee754_expf+0xf4>
 800daf6:	4a45      	ldr	r2, [pc, #276]	; (800dc0c <__ieee754_expf+0x164>)
 800daf8:	4291      	cmp	r1, r2
 800dafa:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800dafe:	d834      	bhi.n	800db6a <__ieee754_expf+0xc2>
 800db00:	4943      	ldr	r1, [pc, #268]	; (800dc10 <__ieee754_expf+0x168>)
 800db02:	4411      	add	r1, r2
 800db04:	ed91 7a00 	vldr	s14, [r1]
 800db08:	4942      	ldr	r1, [pc, #264]	; (800dc14 <__ieee754_expf+0x16c>)
 800db0a:	440a      	add	r2, r1
 800db0c:	edd2 7a00 	vldr	s15, [r2]
 800db10:	ee30 7a47 	vsub.f32	s14, s0, s14
 800db14:	f1c3 0201 	rsb	r2, r3, #1
 800db18:	1ad2      	subs	r2, r2, r3
 800db1a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800db1e:	ee20 6a00 	vmul.f32	s12, s0, s0
 800db22:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800dc18 <__ieee754_expf+0x170>
 800db26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800dc1c <__ieee754_expf+0x174>
 800db2a:	eee6 6a05 	vfma.f32	s13, s12, s10
 800db2e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800dc20 <__ieee754_expf+0x178>
 800db32:	eea6 5a86 	vfma.f32	s10, s13, s12
 800db36:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800dc24 <__ieee754_expf+0x17c>
 800db3a:	eee5 6a06 	vfma.f32	s13, s10, s12
 800db3e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800dc28 <__ieee754_expf+0x180>
 800db42:	eea6 5a86 	vfma.f32	s10, s13, s12
 800db46:	eef0 6a40 	vmov.f32	s13, s0
 800db4a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800db4e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800db52:	ee20 5a26 	vmul.f32	s10, s0, s13
 800db56:	bb92      	cbnz	r2, 800dbbe <__ieee754_expf+0x116>
 800db58:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800db5c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800db60:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800db64:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800db68:	4770      	bx	lr
 800db6a:	4b30      	ldr	r3, [pc, #192]	; (800dc2c <__ieee754_expf+0x184>)
 800db6c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dc30 <__ieee754_expf+0x188>
 800db70:	eddf 6a30 	vldr	s13, [pc, #192]	; 800dc34 <__ieee754_expf+0x18c>
 800db74:	4413      	add	r3, r2
 800db76:	edd3 7a00 	vldr	s15, [r3]
 800db7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800db7e:	eeb0 7a40 	vmov.f32	s14, s0
 800db82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db86:	ee17 2a90 	vmov	r2, s15
 800db8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db8e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800db92:	eddf 6a29 	vldr	s13, [pc, #164]	; 800dc38 <__ieee754_expf+0x190>
 800db96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800db9a:	e7be      	b.n	800db1a <__ieee754_expf+0x72>
 800db9c:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800dba0:	d20b      	bcs.n	800dbba <__ieee754_expf+0x112>
 800dba2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800dc3c <__ieee754_expf+0x194>
 800dba6:	ee70 6a26 	vadd.f32	s13, s0, s13
 800dbaa:	eef4 6ae5 	vcmpe.f32	s13, s11
 800dbae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb2:	dd02      	ble.n	800dbba <__ieee754_expf+0x112>
 800dbb4:	ee30 0a25 	vadd.f32	s0, s0, s11
 800dbb8:	4770      	bx	lr
 800dbba:	2200      	movs	r2, #0
 800dbbc:	e7af      	b.n	800db1e <__ieee754_expf+0x76>
 800dbbe:	ee76 6a66 	vsub.f32	s13, s12, s13
 800dbc2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800dbc6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800dbca:	bfb8      	it	lt
 800dbcc:	3264      	addlt	r2, #100	; 0x64
 800dbce:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dbd2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800dbd6:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800dbda:	ee17 3a90 	vmov	r3, s15
 800dbde:	bfab      	itete	ge
 800dbe0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800dbe4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800dbe8:	ee00 3a10 	vmovge	s0, r3
 800dbec:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800dc40 <__ieee754_expf+0x198>
 800dbf0:	bfbc      	itt	lt
 800dbf2:	ee00 3a10 	vmovlt	s0, r3
 800dbf6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800dbfa:	4770      	bx	lr
 800dbfc:	00000000 	.word	0x00000000
 800dc00:	42b17217 	.word	0x42b17217
 800dc04:	42cff1b5 	.word	0x42cff1b5
 800dc08:	3eb17218 	.word	0x3eb17218
 800dc0c:	3f851591 	.word	0x3f851591
 800dc10:	08019f14 	.word	0x08019f14
 800dc14:	08019f1c 	.word	0x08019f1c
 800dc18:	3331bb4c 	.word	0x3331bb4c
 800dc1c:	b5ddea0e 	.word	0xb5ddea0e
 800dc20:	388ab355 	.word	0x388ab355
 800dc24:	bb360b61 	.word	0xbb360b61
 800dc28:	3e2aaaab 	.word	0x3e2aaaab
 800dc2c:	08019f0c 	.word	0x08019f0c
 800dc30:	3fb8aa3b 	.word	0x3fb8aa3b
 800dc34:	3f317180 	.word	0x3f317180
 800dc38:	3717f7d1 	.word	0x3717f7d1
 800dc3c:	7149f2ca 	.word	0x7149f2ca
 800dc40:	0d800000 	.word	0x0d800000

0800dc44 <with_errnof>:
 800dc44:	b513      	push	{r0, r1, r4, lr}
 800dc46:	4604      	mov	r4, r0
 800dc48:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dc4c:	f7fd f996 	bl	800af7c <__errno>
 800dc50:	ed9d 0a01 	vldr	s0, [sp, #4]
 800dc54:	6004      	str	r4, [r0, #0]
 800dc56:	b002      	add	sp, #8
 800dc58:	bd10      	pop	{r4, pc}

0800dc5a <xflowf>:
 800dc5a:	b130      	cbz	r0, 800dc6a <xflowf+0x10>
 800dc5c:	eef1 7a40 	vneg.f32	s15, s0
 800dc60:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dc64:	2022      	movs	r0, #34	; 0x22
 800dc66:	f7ff bfed 	b.w	800dc44 <with_errnof>
 800dc6a:	eef0 7a40 	vmov.f32	s15, s0
 800dc6e:	e7f7      	b.n	800dc60 <xflowf+0x6>

0800dc70 <__math_uflowf>:
 800dc70:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dc78 <__math_uflowf+0x8>
 800dc74:	f7ff bff1 	b.w	800dc5a <xflowf>
 800dc78:	10000000 	.word	0x10000000

0800dc7c <__math_oflowf>:
 800dc7c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800dc84 <__math_oflowf+0x8>
 800dc80:	f7ff bfeb 	b.w	800dc5a <xflowf>
 800dc84:	70000000 	.word	0x70000000

0800dc88 <finitef>:
 800dc88:	b082      	sub	sp, #8
 800dc8a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dc8e:	9801      	ldr	r0, [sp, #4]
 800dc90:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dc94:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800dc98:	bfac      	ite	ge
 800dc9a:	2000      	movge	r0, #0
 800dc9c:	2001      	movlt	r0, #1
 800dc9e:	b002      	add	sp, #8
 800dca0:	4770      	bx	lr
	...

0800dca4 <_close>:
 800dca4:	4b02      	ldr	r3, [pc, #8]	; (800dcb0 <_close+0xc>)
 800dca6:	2258      	movs	r2, #88	; 0x58
 800dca8:	601a      	str	r2, [r3, #0]
 800dcaa:	f04f 30ff 	mov.w	r0, #4294967295
 800dcae:	4770      	bx	lr
 800dcb0:	20001ad8 	.word	0x20001ad8

0800dcb4 <_fstat>:
 800dcb4:	4b02      	ldr	r3, [pc, #8]	; (800dcc0 <_fstat+0xc>)
 800dcb6:	2258      	movs	r2, #88	; 0x58
 800dcb8:	601a      	str	r2, [r3, #0]
 800dcba:	f04f 30ff 	mov.w	r0, #4294967295
 800dcbe:	4770      	bx	lr
 800dcc0:	20001ad8 	.word	0x20001ad8

0800dcc4 <_getpid>:
 800dcc4:	4b02      	ldr	r3, [pc, #8]	; (800dcd0 <_getpid+0xc>)
 800dcc6:	2258      	movs	r2, #88	; 0x58
 800dcc8:	601a      	str	r2, [r3, #0]
 800dcca:	f04f 30ff 	mov.w	r0, #4294967295
 800dcce:	4770      	bx	lr
 800dcd0:	20001ad8 	.word	0x20001ad8

0800dcd4 <_isatty>:
 800dcd4:	4b02      	ldr	r3, [pc, #8]	; (800dce0 <_isatty+0xc>)
 800dcd6:	2258      	movs	r2, #88	; 0x58
 800dcd8:	601a      	str	r2, [r3, #0]
 800dcda:	2000      	movs	r0, #0
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	20001ad8 	.word	0x20001ad8

0800dce4 <_kill>:
 800dce4:	4b02      	ldr	r3, [pc, #8]	; (800dcf0 <_kill+0xc>)
 800dce6:	2258      	movs	r2, #88	; 0x58
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	f04f 30ff 	mov.w	r0, #4294967295
 800dcee:	4770      	bx	lr
 800dcf0:	20001ad8 	.word	0x20001ad8

0800dcf4 <_lseek>:
 800dcf4:	4b02      	ldr	r3, [pc, #8]	; (800dd00 <_lseek+0xc>)
 800dcf6:	2258      	movs	r2, #88	; 0x58
 800dcf8:	601a      	str	r2, [r3, #0]
 800dcfa:	f04f 30ff 	mov.w	r0, #4294967295
 800dcfe:	4770      	bx	lr
 800dd00:	20001ad8 	.word	0x20001ad8

0800dd04 <_read>:
 800dd04:	4b02      	ldr	r3, [pc, #8]	; (800dd10 <_read+0xc>)
 800dd06:	2258      	movs	r2, #88	; 0x58
 800dd08:	601a      	str	r2, [r3, #0]
 800dd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd0e:	4770      	bx	lr
 800dd10:	20001ad8 	.word	0x20001ad8

0800dd14 <_exit>:
 800dd14:	e7fe      	b.n	800dd14 <_exit>
	...

0800dd18 <_init>:
 800dd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd1a:	bf00      	nop
 800dd1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd1e:	bc08      	pop	{r3}
 800dd20:	469e      	mov	lr, r3
 800dd22:	4770      	bx	lr

0800dd24 <_fini>:
 800dd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd26:	bf00      	nop
 800dd28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd2a:	bc08      	pop	{r3}
 800dd2c:	469e      	mov	lr, r3
 800dd2e:	4770      	bx	lr
